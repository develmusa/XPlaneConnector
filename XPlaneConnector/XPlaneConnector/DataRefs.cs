using System;

namespace XPlaneConnector
{
    public sealed class DataRefs
    {
        private DateTime revDate = new DateTime(2017, 11, 17, 19, 33, 45);
        private int revBuild = 1110;
        public DateTime RevDate { get { return revDate; } }
        public int RevBuild { get { return revBuild; } }

        private static int DefaultFrequency = 5;
        #region X-Plane
        public static FloatDataRefElement AircraftAutopilotVviStepFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/vvi_step_ft",
                    Units = "Feet",
                    Description = "Step increment for autopilot VVI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftAutopilotAltStepFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/alt_step_ft",
                    Units = "Feet",
                    Description = "Step increment for autopilot altitude",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftAutopilotRadioAltimeterStepFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/autopilot/radio_altimeter_step_ft",
                    Units = "Feet",
                    Description = "Step increment for radio altimeter decision height",
                    Frequency = DefaultFrequency
                };
            }
        }

        public static StringDataRefElement AircraftViewAcfTailnum
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_tailnum",
                    Frequency = DefaultFrequency,
                    StringLenght = 40
                };
            }
        }
        public static StringDataRefElement AircraftViewAcfAuthor
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_author",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement AircraftViewAcfDescrip
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_descrip",
                    Frequency = DefaultFrequency,
                    StringLenght = 260
                };
            }
        }
        public static StringDataRefElement AircraftViewAcfNotes
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_notes",
                    Frequency = DefaultFrequency,
                    StringLenght = 240
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfSizeZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_size_z",
                    Units = "???",
                    Description = "shadow size, and viewing distance size",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfAsiKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_asi_kts",
                    Units = "enum",
                    Description = "air speed indicator knots calibration",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfCockpitType
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_cockpit_type",
                    Units = "enum",
                    Description = "cockpit panel type",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfHasSCFd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_has_SC_fd",
                    Units = "bool",
                    Description = "has single cue flight director?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfHasStallwarn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_has_stallwarn",
                    Units = "bool",
                    Description = "has audio stall warning?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfHasLitemapTex
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_has_litemap_tex",
                    Units = "enum",
                    Description = "Do we have a lite map texture for this?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfPeX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_peX",
                    Units = "pos",
                    Description = "Position of pilot's head relative to CG, X",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfPeY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_peY",
                    Units = "pos",
                    Description = "Position of pilot's head relative to CG, Y",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfPeZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_peZ",
                    Units = "pos",
                    Description = "Position of pilot's head relative to CG, Z",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfVso
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_Vso",
                    Units = "kias",
                    Description = "Various speed maxes for the aircraft.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfYawstringx
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_yawstringx",
                    Units = "???",
                    Description = "The yaw string, that thing that no one knows how to get rid of.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static StringDataRefElement AircraftViewAcfICAO
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_ICAO",
                    Frequency = DefaultFrequency,
                    StringLenght = 40
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfDoorX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_door_x",
                    Units = "meters",
                    Description = "position of door relative to CG, latitude offset in meters",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfDoorY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_door_y",
                    Units = "meters",
                    Description = "position of door relative to CG, vertical offset in meters",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfDoorZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_door_z",
                    Units = "meters",
                    Description = "position of door relative to CG, longitude offset in meters",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfHasHOOPSHUD
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_has_HOOPS_HUD",
                    Units = "???",
                    Description = "has Hoops HUD",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftViewAcfLiveryIndex
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_livery_index",
                    Units = "index",
                    Description = "index number of livery",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static StringDataRefElement AircraftViewAcfLiveryPath
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/aircraft/view/acf_livery_path",
                    Frequency = DefaultFrequency,
                    StringLenght = 1024
                };
            }
        }
        public static FloatDataRefElement AircraftElectricalNumBatteries
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/electrical/num_batteries",
                    Units = "count",
                    Description = "The number of batteries on this plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftElectricalNumGenerators
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/electrical/num_generators",
                    Units = "count",
                    Description = "The number of generators on this plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftElectricalNumInverters
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/electrical/num_inverters",
                    Units = "count",
                    Description = "The number of inverters on this plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftElectricalNumBuses
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/electrical/num_buses",
                    Units = "count",
                    Description = "The number of busses on this plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfRSCMingovEng
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_RSC_mingov_eng",
                    Units = "rad/sec",
                    Description = "Minimum engine speed with governor on radians/second",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfRSCIdlespeedEng
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_RSC_idlespeed_eng",
                    Units = "rad/sec",
                    Description = "Engine idle speed radians/second.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfRSCRedlineEng
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_RSC_redline_eng",
                    Units = "rad/sec",
                    Description = "Max engine speed radians/second.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfCritalt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_critalt",
                    Units = "meters",
                    Description = "Critical altitude for props",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfGearRat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_gear_rat",
                    Units = "???",
                    Description = "This is for backward compatibility, you can use acf_prop_gear_rat from v700 onwards",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfSpooltimeJet
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_spooltime_jet",
                    Units = "seconds",
                    Description = "This is the delay in increasing the throttle for jet engines - it is the number of seconds to actuate a full advance.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfSpooltimeProp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_spooltime_prop",
                    Units = "seconds",
                    Description = "This is the delay in increasing the throttle for prop/turboprop engines - it is the number of seconds to actuate a full advance.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfSpooltimeTurbine
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_spooltime_turbine",
                    Units = "seconds",
                    Description = "This is the number of seconds it takes for a free turbine to spin up from idle to full RPM.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfMaxITT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_ITT",
                    Units = "???",
                    Description = "Max internal turbine temperature the plane can have before engine failure.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfMaxEGT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_EGT",
                    Units = "???",
                    Description = "Max exhaust gas temperature the plane can have before engine failure.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfMaxCHT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_CHT",
                    Units = "???",
                    Description = "MAx cylinder head temperature the plane can have before engine failure.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfMaxOILP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_OILP",
                    Units = "???",
                    Description = "Max Oil Pressure the plane can have before engine failure.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfMaxOILT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_OILT",
                    Units = "???",
                    Description = "Max Oil Temperature the plane can have before engine failure.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfMaxFUELP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_max_FUELP",
                    Units = "???",
                    Description = "Max Fuel Pressure the plane can have before engine failure.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfStarterTorqueRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_starter_torque_ratio",
                    Units = "Ratio",
                    Description = "This is the ratio of the engine's maximum torque that the starter applies at its design RPM.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineAcfStarterMaxRpmRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/acf_starter_max_rpm_ratio",
                    Units = "Ratio",
                    Description = "This is the ratio of the engine's max RPM that the starter can spin the engine up to before it loses torque.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineBoostRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/boost_ratio",
                    Units = "ratio",
                    Description = "Boost Amount",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftEngineBoostMaxSeconds
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/engine/boost_max_seconds",
                    Units = "seconds",
                    Description = "Boost Capacity",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoMP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_MP",
                    Units = "inhg",
                    Description = "Low value of the green arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiMP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_MP",
                    Units = "inhg",
                    Description = "High value of the green arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoMP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_MP",
                    Units = "inhg",
                    Description = "Low value of the yellow arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiMP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_MP",
                    Units = "inhg",
                    Description = "High value of the yellow arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoMP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_MP",
                    Units = "inhg",
                    Description = "Low value of the red arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiMP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_MP",
                    Units = "inhg",
                    Description = "High value of the red arc for the manifold pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoEPR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_EPR",
                    Units = "ratio",
                    Description = "Low value of the green arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiEPR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_EPR",
                    Units = "ratio",
                    Description = "High value of the green arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoEPR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_EPR",
                    Units = "ratio",
                    Description = "Low value of the yellow arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiEPR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_EPR",
                    Units = "ratio",
                    Description = "High value of the yellow arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoEPR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_EPR",
                    Units = "ratio",
                    Description = "Low value of the red arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiEPR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_EPR",
                    Units = "ratio",
                    Description = "High value of the red arc for the engine pressure ratio instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoTRQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_TRQ",
                    Units = "ft-lbs",
                    Description = "Low value of the green arc for the torque instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiTRQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_TRQ",
                    Units = "ft-lbs",
                    Description = "High value of the green arc for the torque instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoTRQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_TRQ",
                    Units = "ft-lbs",
                    Description = "Low value of the yellow arc for the torque instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiTRQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_TRQ",
                    Units = "ft-lbs",
                    Description = "High value of the yellow arc for the torque instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoTRQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_TRQ",
                    Units = "ft-lbs",
                    Description = "Low value of the red arc for the torque instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiTRQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_TRQ",
                    Units = "ft-lbs",
                    Description = "High value of the red arc for the torque instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoFF
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "Low value of the green arc for the fuel flow instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiFF
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "High value of the green arc for the fuel flow instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoFF
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "Low value of the yellow arc for the fuel flow instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiFF
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "High value of the yellow arc for the fuel flow instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoFF
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "Low value of the red arc for the fuel flow instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiFF
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_FF",
                    Units = "gal/hr_or_lb/hr",
                    Description = "High value of the red arc for the fuel flow instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoITT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_ITT",
                    Units = "degC",
                    Description = "Low value of the green arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiITT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_ITT",
                    Units = "degC",
                    Description = "High value of the green arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoITT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_ITT",
                    Units = "degC",
                    Description = "Low value of the yellow arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiITT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_ITT",
                    Units = "degC",
                    Description = "High value of the yellow arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoITT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_ITT",
                    Units = "degC",
                    Description = "Low value of the red arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiITT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_ITT",
                    Units = "degC",
                    Description = "High value of the red arc for the interturbine temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoEGT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_EGT",
                    Units = "degC",
                    Description = "Low value of the green arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiEGT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_EGT",
                    Units = "degC",
                    Description = "High value of the green arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoEGT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_EGT",
                    Units = "degC",
                    Description = "Low value of the yellow arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiEGT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_EGT",
                    Units = "degC",
                    Description = "High value of the yellow arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoEGT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_EGT",
                    Units = "degC",
                    Description = "Low value of the red arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiEGT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_EGT",
                    Units = "degC",
                    Description = "High value of the red arc for the exhaust gas temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoCHT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_CHT",
                    Units = "degC",
                    Description = "Low value of the green arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiCHT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_CHT",
                    Units = "degC",
                    Description = "High value of the green arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoCHT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_CHT",
                    Units = "degC",
                    Description = "Low value of the yellow arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiCHT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_CHT",
                    Units = "degC",
                    Description = "High value of the yellow arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoCHT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_CHT",
                    Units = "degC",
                    Description = "Low value of the red arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiCHT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_CHT",
                    Units = "degC",
                    Description = "High value of the red arc for the cylinder-head temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoOilT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_oilT",
                    Units = "degC",
                    Description = "Low value of the green arc for the oil temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiOilT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_oilT",
                    Units = "degC",
                    Description = "High value of the green arc for the oil temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoOilT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_oilT",
                    Units = "degC",
                    Description = "Low value of the yellow arc for the oil temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiOilT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_oilT",
                    Units = "degC",
                    Description = "High value of the yellow arc for the oil temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoOilT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_oilT",
                    Units = "degC",
                    Description = "Low value of the red arc for the oil temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiOilT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_oilT",
                    Units = "degC",
                    Description = "High value of the red arc for the oil temperature instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoOilP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_oilP",
                    Units = "PSI",
                    Description = "Low value of the green arc for the oil pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiOilP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_oilP",
                    Units = "PSI",
                    Description = "High value of the green arc for the oil pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoOilP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_oilP",
                    Units = "PSI",
                    Description = "Low value of the yellow arc for the oil pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiOilP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_oilP",
                    Units = "PSI",
                    Description = "High value of the yellow arc for the oil pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoOilP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_oilP",
                    Units = "PSI",
                    Description = "Low value of the red arc for the oil pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiOilP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_oilP",
                    Units = "PSI",
                    Description = "High value of the red arc for the oil pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoFuelP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_fuelP",
                    Units = "PSI",
                    Description = "Low value of the green arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiFuelP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_fuelP",
                    Units = "PSI",
                    Description = "High value of the green arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoFuelP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_fuelP",
                    Units = "PSI",
                    Description = "Low value of the yellow arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiFuelP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_fuelP",
                    Units = "PSI",
                    Description = "High value of the yellow arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoFuelP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_fuelP",
                    Units = "PSI",
                    Description = "Low value of the red arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiFuelP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_fuelP",
                    Units = "PSI",
                    Description = "High value of the red arc for the fuel pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoGenAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_gen_amp",
                    Units = "amps",
                    Description = "Low value of the green arc for the generator amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiGenAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_gen_amp",
                    Units = "amps",
                    Description = "High value of the green arc for the generator amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoGenAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_gen_amp",
                    Units = "amps",
                    Description = "Low value of the yellow arc for the generator amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiGenAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_gen_amp",
                    Units = "amps",
                    Description = "High value of the yellow arc for the generator amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoGenAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_gen_amp",
                    Units = "amps",
                    Description = "Low value of the red arc for the generator amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiGenAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_gen_amp",
                    Units = "amps",
                    Description = "High value of the red arc for the generator amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoBatAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_bat_amp",
                    Units = "amps",
                    Description = "Low value of the green arc for the battery amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiBatAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_bat_amp",
                    Units = "amps",
                    Description = "High value of the green arc for the battery amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoBatAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_bat_amp",
                    Units = "amps",
                    Description = "Low value of the yellow arc for the battery amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiBatAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_bat_amp",
                    Units = "amps",
                    Description = "High value of the yellow arc for the battery amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoBatAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_bat_amp",
                    Units = "amps",
                    Description = "Low value of the red arc for the battery amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiBatAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_bat_amp",
                    Units = "amps",
                    Description = "High value of the red arc for the battery amperage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsMaxBatAmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/max_bat_amp",
                    Units = "amps",
                    Description = "Battery amp when the non-standby batteries are fully charged.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoBatVolt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_bat_volt",
                    Units = "volts",
                    Description = "Low value of the green arc for the battery voltage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiBatVolt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_bat_volt",
                    Units = "volts",
                    Description = "High value of the green arc for the battery voltage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoBatVolt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_bat_volt",
                    Units = "volts",
                    Description = "Low value of the yellow arc for the battery voltage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiBatVolt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_bat_volt",
                    Units = "volts",
                    Description = "High value of the yellow arc for the battery voltage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoBatVolt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_bat_volt",
                    Units = "volts",
                    Description = "Low value of the red arc for the battery voltage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiBatVolt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_bat_volt",
                    Units = "volts",
                    Description = "High value of the red arc for the battery voltage instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsMaxBatVoltStandard
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/max_bat_volt_standard",
                    Units = "volts",
                    Description = "This is the voltage when the standard (non-standby) batteries are fully charged.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoVac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_vac",
                    Units = "psi",
                    Description = "Low value of the green arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiVac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_vac",
                    Units = "psi",
                    Description = "High value of the green arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoVac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_vac",
                    Units = "psi",
                    Description = "Low value of the yellow arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiVac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_vac",
                    Units = "psi",
                    Description = "High value of the yellow arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoVac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_vac",
                    Units = "psi",
                    Description = "Low value of the red arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiVac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_vac",
                    Units = "psi",
                    Description = "High value of the red arc for the vacuum pressure instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsMaxVac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/max_vac",
                    Units = "psi",
                    Description = "Vacuum pressure put out when the engine is running at the bottom of red line (max vacuum).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoN1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_N1",
                    Units = "percent",
                    Description = "Low value of the green arc for the N1 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiN1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_N1",
                    Units = "percent",
                    Description = "High value of the green arc for the N1 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoN1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_N1",
                    Units = "percent",
                    Description = "Low value of the yellow arc for the N1 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiN1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_N1",
                    Units = "percent",
                    Description = "High value of the yellow arc for the N1 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoN1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_N1",
                    Units = "percent",
                    Description = "Low value of the red arc for the N1 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiN1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_N1",
                    Units = "percent",
                    Description = "High value of the red arc for the N1 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenLoN2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_lo_N2",
                    Units = "percent",
                    Description = "Low value of the green arc for the N2 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsGreenHiN2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/green_hi_N2",
                    Units = "percent",
                    Description = "High value of the green arc for the N2 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowLoN2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_lo_N2",
                    Units = "percent",
                    Description = "Low value of the yellow arc for the N2 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsYellowHiN2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/yellow_hi_N2",
                    Units = "percent",
                    Description = "High value of the yellow arc for the N2 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedLoN2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_lo_N2",
                    Units = "percent",
                    Description = "Low value of the red arc for the N2 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftLimitsRedHiN2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/limits/red_hi_N2",
                    Units = "percent",
                    Description = "High value of the red arc for the N2 instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftPropAcfRevthrustEq
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_revthrust_eq",
                    Units = "???",
                    Description = "better organization to do it this way, NOTE : Used to be i8 in version 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftPropAcfReversedPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/prop/acf_reversed_pitch",
                    Units = "???",
                    Description = "in reverse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftBodiesAcfFuseCd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/bodies/acf_fuse_cd",
                    Units = "???",
                    Description = "cd for fuselage",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfRSCMingovPrp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_RSC_mingov_prp",
                    Units = "rad/sec",
                    Description = "Minimum prop speed with governor on, radians/second",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfRSCIdlespeedPrp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_RSC_idlespeed_prp",
                    Units = "rad/sec",
                    Description = "Prop idle speed radians/second",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfRSCRedlinePrp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_RSC_redline_prp",
                    Units = "rad/sec",
                    Description = "Max prop speed radians/second",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfTrqMaxEng
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_trq_max_eng",
                    Units = "newtonmeters",
                    Description = "????",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfTrqMaxPrp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_trq_max_prp",
                    Units = "newtonmeters",
                    Description = "NOTE : This is now the same as acf_trq_max_en in v7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfHstbTrimUp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_hstb_trim_up",
                    Units = "degrees",
                    Description = "This is the maximum degrees deflection up for a horizontal stabilizer that moves during trim",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfHstbTrimDn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_hstb_trim_dn",
                    Units = "degrees",
                    Description = "This is the maximum degrees deflection down for a horizontal stabilizer that moves during trim",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfTakeoffTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_takeoff_trim",
                    Units = "[-1..1]",
                    Description = "This is the trim position for takeoff expressed as a ratio, 1 = max up trim, -1 = max down trim.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfMinTrimElev
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_min_trim_elev",
                    Units = "[0..1]",
                    Description = "Maximum nose-down trim, expressed as a ratio of maximum nose-down elevator deflection",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfMaxTrimElev
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_max_trim_elev",
                    Units = "[0..1]",
                    Description = "Maximum nose-up trim, expressed as a ratio of maximum nose-up elevator deflection",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfElevTrimSpeedrat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_trim_speedrat",
                    Units = "ratio",
                    Description = "This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfElevTab
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_tab",
                    Units = "[-1..1]",
                    Description = "This is the amount of elevator deflection (as a ratio of max) induced by the aerodynamic effect of static trim tabs.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfMinTrimAiln
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_min_trim_ailn",
                    Units = "[0..1]",
                    Description = "Maximum aileron downward trim, expressed as a ratio of maximum aileron downward travel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfMaxTrimAiln
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_max_trim_ailn",
                    Units = "[0..1]",
                    Description = "Maximum aileron upward trim, expressed as a ratio of maximum aileron upward travel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfAilnTrimSpeedrat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ailn_trim_speedrat",
                    Units = "ratio",
                    Description = "This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfAilnTab
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ailn_tab",
                    Units = "[-1..1]",
                    Description = "This is the amount of aileron deflection (as a ratio of max) induced by the aerodynamic effect of static trim tabs.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfMinTrimRudd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_min_trim_rudd",
                    Units = "[0..1]",
                    Description = "Maximum rudder left trim, expressed as a ratio of maximum rudder left travel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfMaxTrimRudd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_max_trim_rudd",
                    Units = "[0..1]",
                    Description = "Maximum rudder right trim, expressed as a ratio of maximum rudder right travel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfRuddTrimSpeedrat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_trim_speedrat",
                    Units = "ratio",
                    Description = "This is the speed of trim time, expressed as a ratio, where 1.0 means it takes 20 seconds to fully move trim from one extreme to the other.  2.0 means trim is twice as fast.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfRuddTab
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_tab",
                    Units = "[0..1]",
                    Description = "This is the amount of rudder deflection (as a ratio of max) induced by the aerodynamic effect of static trim tabs.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfElevDefTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_def_time",
                    Units = "secs",
                    Description = "Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfAilnDefTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ailn_def_time",
                    Units = "secs",
                    Description = "Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfRuddDefTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_def_time",
                    Units = "secs",
                    Description = "Enter 0.0 to be able to deflect the controls as fast as the pilot can move the stick or the art stab system can command a deflection. If the plane has a hydraulic system and a max rate of control deflection, though, enter how long it takes to go from center to fully-deflected.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfElevTrimTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_elev_trim_time",
                    Units = "secs",
                    Description = "This is the total time taken for the elevator trim to go from one extreme to the other.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfAilnTrimTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_ailn_trim_time",
                    Units = "secs",
                    Description = "This is the total time taken for the aileron trim to go from one extreme to the other.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfRuddTrimTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_rudd_trim_time",
                    Units = "secs",
                    Description = "This is the total time taken for the rudder trim to go from one extreme to the other.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfSpeedbrakeExtTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_speedbrake_ext_time",
                    Units = "secs",
                    Description = "Speedbrake time to extend.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftControlsAcfSpeedbrakeRetTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/controls/acf_speedbrake_ret_time",
                    Units = "secs",
                    Description = "Speedbrake time to retract.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftGearAcfGearRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/gear/acf_gear_retract",
                    Units = "bool",
                    Description = "Are any of the gear on this plane retractable.  We strongly recommend you DO NOT write to this dataref.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftWeightAcfCgYOriginal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_cgY_original",
                    Units = "feet",
                    Description = "This is the ORIGINAL reference point in PM in _feet_.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftWeightAcfCgZOriginal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_cgZ_original",
                    Units = "feet",
                    Description = "This is the ORIGINAL reference point in PM in _feet_.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftWeightAcfMFuelTot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/weight/acf_m_fuel_tot",
                    Units = "lbs",
                    Description = "Weight of total fuel - appears to be in lbs.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftVtolcontrolsAcfRotorTrimMaxFwd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_rotor_trim_max_fwd",
                    Units = "degrees",
                    Description = "max rotor trim aft when stick fully forward",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftVtolcontrolsAcfRotorTrimMaxAft
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/vtolcontrols/acf_rotor_trim_max_aft",
                    Units = "degrees",
                    Description = "max rotor trim aft when stick fully aft",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfStabDelincToVne
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_stab_delinc_to_Vne",
                    Units = "degree",
                    Description = "amount the stab moves in trim automatically as you go to redline (zero at zero airspeed)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfVyse
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_Vyse",
                    Units = "???",
                    Description = "v-speeds",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfFlapArm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flap_arm",
                    Units = "???",
                    Description = "flapping hinge arm",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfCgZAft
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_cgZ_aft",
                    Units = "???",
                    Description = "cg limits",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfRefuelZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_refuel_Z",
                    Units = "???",
                    Description = "refueling port location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfPuffZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_puffZ",
                    Units = "???",
                    Description = "manuevering rocket forces",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfVle
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_Vle",
                    Units = "???",
                    Description = "Vle",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfAShHiRate
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_ASh_hi_rate",
                    Units = "???",
                    Description = "astab stuff i should have had in there the first time!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfElevflaps
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_elevflaps",
                    Units = "???",
                    Description = "elevator align with flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfStallWarnAlpha
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_stall_warn_alpha",
                    Units = "???",
                    Description = "alpha of stall warning... user must specify since warning different for different planes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfMassShift
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_mass_shift",
                    Units = "???",
                    Description = "hang-gliders and wright gliders",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfMassShiftDx
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_mass_shift_dx",
                    Units = "???",
                    Description = "hang-gliders and wright gliders",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfMassShiftDz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_mass_shift_dz",
                    Units = "???",
                    Description = "hang-gliders and wright gliders",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfFeatheredPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_feathered_pitch",
                    Units = "???",
                    Description = "let people decide feathered pitch to get right for their plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfASmaxgHi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_ASmaxg_hi",
                    Units = "???",
                    Description = "astab stuff I should have had in there the first time!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfASgHiRate
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_ASg_hi_rate",
                    Units = "???",
                    Description = "astab stuff I should have had in there the first time!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfWingTiltPtch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_wing_tilt_ptch",
                    Units = "???",
                    Description = "wing-tilt steering",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfWingTiltRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_wing_tilt_roll",
                    Units = "???",
                    Description = "wing-tilt steering",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfMaxPressDiff
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_max_press_diff",
                    Units = "pascals",
                    Description = "max pressurization of the fuselage",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfDiffCollWithPtch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_diff_coll_with_ptch",
                    Units = "???",
                    Description = "used by x-19",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfFlapPtch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flap_ptch",
                    Units = "???",
                    Description = "flap actuation... like for really high-lift guys still manuevering at low speeds.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfDiffCyclWithHdngLat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_diff_cycl_with_hdng_lat",
                    Units = "???",
                    Description = "ch-47 chinook performance",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfPhaseTvectOutAt90
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_phase_tvect_out_at_90",
                    Units = "???",
                    Description = "phase thrust-vectoring maneuvering in as we go from 90 to 0, going from hover with puffers to f-22 dogfight",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfBrakeCo
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_brake_co",
                    Units = "???",
                    Description = "rolling and braking",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfDriveByWire
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_drive_by_wire",
                    Units = "???",
                    Description = "engine always runs at optimum mixture... like FADEC or auto conversions.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfIsGlossy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_is_glossy",
                    Units = "???",
                    Description = "plane has specularity lighting.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfNumTanks
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_num_tanks",
                    Units = "count",
                    Description = "number fuel tanks - as of 860, all planes have 9 tanks and ratios for each - ratio of 0.0 means tank is not used",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfHasRefuel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_refuel",
                    Units = "???",
                    Description = "refueling port",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfJettIsSlung
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_jett_is_slung",
                    Units = "???",
                    Description = "jettisonable load is slung now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfPhaseTvectOutAt00
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_phase_tvect_out_at_00",
                    Units = "???",
                    Description = "phase thrust-vectoring maneuvering out as we go from 90 to 0 deg tvec, going from maneuver-to-hover to regular thrust",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfAutoTrimEQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_auto_trimEQ",
                    Units = "boolean",
                    Description = "auto-trim out any flight loads... numerous planes have this.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfHasDCFd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_DC_fd",
                    Units = "???",
                    Description = "has dual-cue flight-dir",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfFlapsWithGearEQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flaps_with_gearEQ",
                    Units = "???",
                    Description = "the Jatviggen does flaps with gear automatically",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfRevOnTouchdown
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_rev_on_touchdown",
                    Units = "???",
                    Description = "viggen does this!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfFlapsWithVecEQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_flaps_with_vecEQ",
                    Units = "???",
                    Description = "bring in the flaps with thrust vector",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfWarn2EQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_warn2EQ",
                    Units = "???",
                    Description = "bitchin betty 2... for fighters",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfNumThrustpoints
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_num_thrustpoints",
                    Units = "???",
                    Description = "number props can be different than number of engines - * This can crash Xplane, use at your own risk.  Not writeable in v10.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfNosewheelK
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_nosewheel_k",
                    Units = "???",
                    Description = "tail wheel spring constant (per degree offset from centered)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfVectarmY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_vectarmY",
                    Units = "???",
                    Description = "prop needs offset in z and y from the pivot point... z for V-22, y for motorgliders",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfHidePropAt90Vect
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_hide_prop_at_90_vect",
                    Units = "???",
                    Description = "for those motorgliders or prop/jet combos or what have you that hide their props when not in use",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfHasFuelAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_fuel_all",
                    Units = "???",
                    Description = "Aircraft has option to draw from any tank",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowAcfHasFuelAny
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/acf_has_fuel_any",
                    Units = "boolean",
                    Description = "Aircraft has Fuel selector",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowHasHsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_hsi",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowHasYawdampBut
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_yawdamp_but",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowHasLitemapTex2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_litemap_tex_2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowHasTransonicAudio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_transonic_audio",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowHasPreRotate
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/has_pre_rotate",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCAltLoPRP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_alt_lo_PRP",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCHalfLoPRP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_half_lo_PRP",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCFullLoPRP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_full_lo_PRP",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCAltHiPRP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_alt_hi_PRP",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCHalfHiPRP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_half_hi_PRP",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCFullHiPRP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_full_hi_PRP",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowFfRatIdlePRP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/ff_rat_idle_PRP",
                    Units = "ratio",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCAltLoJET
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_alt_lo_JET",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCHalfLoJET
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_half_lo_JET",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCFullLoJET
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_full_lo_JET",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCAltHiJET
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_alt_hi_JET",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCHalfHiJET
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_half_hi_JET",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowSFCFullHiJET
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/SFC_full_hi_JET",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftOverflowFfRatIdleJET
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/overflow/ff_rat_idle_JET",
                    Units = "ratio",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement AircraftSystemsFdirNeededToEngageServos
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft/systems/fdir_needed_to_engage_servos",
                    Units = "boolean",
                    Description = "If this is true, commands to engage the AP servos will be ignored if the FD is not on.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotAutopilotMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/autopilot_mode",
                    Units = "enum",
                    Description = "The autopilot master mode (off=0, flight director=1, on=2)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotAirspeedMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/airspeed_mode",
                    Units = "enum",
                    Description = "Airspeed mode for the autopilot. DEPRECATED",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotHeadingMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading_mode",
                    Units = "enum",
                    Description = "Lateral navigation mode (GPS, heading, L-Nav approach). DEPRECATED",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotAltitudeMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/altitude_mode",
                    Units = "enum",
                    Description = "Vertical navigation (alt hold, VVI hold, V-Nav approach). DEPRECATED",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotBackcourseOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/backcourse_on",
                    Units = "boolean",
                    Description = "Back course selection",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotAltitude
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/altitude",
                    Units = "ftmsl",
                    Description = "Altitude dialed into the AP",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotCurrentAltitude
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/current_altitude",
                    Units = "ftmsl",
                    Description = "Currently held altitude (remembered until you hit flchg)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotVerticalVelocity
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/vertical_velocity",
                    Units = "fpm",
                    Description = "Vertical speed to hold",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotAirspeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/airspeed",
                    Units = "knots_mach",
                    Description = "Airspeed to hold, this changes from knots to a mach number",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading",
                    Units = "degt",
                    Description = "The heading to fly (true, legacy)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotHeadingMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading_mag",
                    Units = "degm",
                    Description = "The heading to fly (magnetic, preferred) pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotHeadingMag2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading_mag2",
                    Units = "degm",
                    Description = "The heading to fly (magnetic, preferred) copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotAirspeedIsMach
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/airspeed_is_mach",
                    Units = "boolean",
                    Description = "Is our airspeed a mach number (this is writable if the panel has the button, otherwise sim controls)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotFlightDirectorPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/flight_director_pitch",
                    Units = "degrees",
                    Description = "The recommended pitch from the Flight Director.  Use override_flightdir",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotFlightDirectorRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/flight_director_roll",
                    Units = "degrees",
                    Description = "The recommended roll from the Flight Director.  Use override_flightdir",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotAutopilotState
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/autopilot_state",
                    Units = "flags",
                    Description = "Various autopilot engage modes, etc.  See docs for flags",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotHeadingRollMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/heading_roll_mode",
                    Units = "enum",
                    Description = "Bank limit - 0 = auto, 1-6 = 5-30 degrees of bank",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotModeHnav
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/mode_hnav",
                    Units = "enum",
                    Description = "Localizer mode (off, armed, engaged). DEPRECATED",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotModeGls
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/mode_gls",
                    Units = "enum",
                    Description = "Glide-slope mode (off, armed, engaged). DEPRECATED",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotSynHoldDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/syn_hold_deg",
                    Units = "degrees",
                    Description = "The pitch held when in pitch-hold mode.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAutopilotNavSteerDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/autopilot/nav_steer_deg_mag",
                    Units = "degrees",
                    Description = "Heading to fly in nav mode - write this when override_nav_heading is set.  Useful for making a custom GPS that flies arcs.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAvidyneLftHil
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/lft_hil",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAvidyneRgtHil
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/rgt_hil",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAvidyneAltHil
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/alt_hil",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAvidyneHsiMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/hsi_mode",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitAvidyneMapRangeSel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/avidyne/map_range_sel",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalBatteryOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/battery_on",
                    Units = "bool",
                    Description = "Is the main battery on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalBatteryEQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/battery_EQ",
                    Units = "bool",
                    Description = "Does this cockpit have a battery switch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalAvionicsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/avionics_on",
                    Units = "bool",
                    Description = "Is there power to the avionics",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalAvionicsEQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/avionics_EQ",
                    Units = "bool",
                    Description = "Does this cockpit have an avionics switch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalGeneratorEQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/generator_EQ",
                    Units = "bool",
                    Description = "Does this cockpit have generator switches?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalGeneratorApuOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/generator_apu_on",
                    Units = "bool",
                    Description = "Is the APU Generator on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalGpuOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/gpu_on",
                    Units = "bool",
                    Description = "Is the GPU on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalGeneratorApuAmps
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/generator_apu_amps",
                    Units = "amps",
                    Description = "APU Generator amps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalGpuAmps
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/gpu_amps",
                    Units = "amps",
                    Description = "GPU Amps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalHUDOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/HUD_on",
                    Units = "bool",
                    Description = "Is the HUD on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalHUDBrightness
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/HUD_brightness",
                    Units = "ratio",
                    Description = "HUD brightness level (0-1)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalBeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/beacon_lights_on",
                    Units = "bool",
                    Description = "Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalLandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/landing_lights_on",
                    Units = "bool",
                    Description = "Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalNavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/nav_lights_on",
                    Units = "bool",
                    Description = "Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalStrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/strobe_lights_on",
                    Units = "bool",
                    Description = "Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalTaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/taxi_light_on",
                    Units = "bool",
                    Description = "Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalCockpitLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/cockpit_lights_on",
                    Units = "bool",
                    Description = "Are cockpit lights on.  (NOTE - previous docs were wrong, this is always read-only)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalCockpitLights
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/cockpit_lights",
                    Units = "ratio",
                    Description = "Cockpit light level",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalInstrumentBrightness
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/instrument_brightness",
                    Units = "ratio",
                    Description = "Instrument LED lighting level",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalSunglassesOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/sunglasses_on",
                    Units = "bool",
                    Description = "Sunglasses on?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalNightVisionOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/night_vision_on",
                    Units = "bool",
                    Description = "Night vision goggles on?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitElectricalAhBar
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/electrical/ah_bar",
                    Units = "???",
                    Description = "Cockpit light rheostat - this appears to be legacy and no longer used.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitEngineInverterEq
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/engine/inverter_eq",
                    Units = "bool",
                    Description = "Does this cockpit have inverter switches?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitEngineFuelTankSelector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/engine/fuel_tank_selector",
                    Units = "???",
                    Description = "Which fuel tank is open for flight",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitEngineFuelTankTransfer
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/engine/fuel_tank_transfer",
                    Units = "???",
                    Description = "Which fuel tank is open for transfers (destination)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitEngineFuelTankTransferFrom
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/engine/fuel_tank_transfer_from",
                    Units = "???",
                    Description = "Which fuel tank is open for transfers (source)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitEngineClutchEngage
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/engine/clutch_engage",
                    Units = "???",
                    Description = "Clutch engaged",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitEngineAPUSwitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/engine/APU_switch",
                    Units = "enum",
                    Description = "APU starter switch 0 = off, 1 = on, 2 = start",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitEngineAPURunning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/engine/APU_running",
                    Units = "boolean",
                    Description = "APU running - 1 = on, 0 = off.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitEngineAPUN1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/engine/APU_N1",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGpsCourse
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gps/course",
                    Units = "???",
                    Description = "The currently programmed GPS course (true degrees)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGpsDestinationType
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gps/destination_type",
                    Units = "???",
                    Description = "The current type of navaid we're flying to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGpsDestinationIndex
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gps/destination_index",
                    Units = "???",
                    Description = "The index of the navaid we're flying to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheVacIndDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_vac_ind_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the first vacuum instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheEleIndDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ele_ind_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the second vacuum instrument - dataref name is worng!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheIndDeg3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_deg3",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the first elect instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheIndDeg4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_deg4",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the second elect instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheIndVacPilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_vac_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the pilot's side, vacuum driven",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheIndVacCopilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_vac_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the copilot's side, vacuum driven",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheIndElecPilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_elec_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the pilot's side, electric",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheIndElecCopilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_elec_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the copilot's side, electric",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheIndAharsPilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_ahars_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the pilot's side, AHARS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosTheIndAharsCopilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/the_ind_ahars_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated pitch on the panel for the copilot's side, AHARS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiVacIndDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_vac_ind_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated heading on the panel for the first vacuum instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiEleIndDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ele_ind_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated heading on the panel for the second vacuum instrument - dataref name is worng!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiIndDegm3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_degm3",
                    Units = "degrees_magnetic",
                    Description = "The indicated heading on the panel for the first elect instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiIndDegm4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_degm4",
                    Units = "degrees_magnetic",
                    Description = "The indicated heading on the panel for the second elect instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiIndVacPilotDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_vac_pilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the pilot's side, vacuum driven",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiIndVacCopilotDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_vac_copilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the copilot's side, vacuum driven",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiIndElecPilotDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_elec_pilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the pilot's side, electric",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiIndElecCopilotDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_elec_copilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the copilot's side, electric",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiIndAharsPilotDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_ahars_pilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the pilot's side, AHARS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPsiIndAharsCopilotDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/psi_ind_ahars_copilot_degm",
                    Units = "degrees_magnetic",
                    Description = "The indicated magnetic heading on the panel for the copilot's side, AHARS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiVacIndDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_vac_ind_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the first vacuum instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiEleIndDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ele_ind_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the second vacuum instrument - dataref name is worng!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiIndDeg3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_deg3",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the first elect instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiIndDeg4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_deg4",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the second elect instrument",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiIndVacPilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_vac_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the pilot's side, vacuum driven",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiIndVacCopilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_vac_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the copilot's side, vacuum driven",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiIndElecPilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_elec_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the pilot's side, electric",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiIndElecCopilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_elec_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the copilot's side, electric",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiIndAharsPilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_ahars_pilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the pilot's side, AHARS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosPhiIndAharsCopilotDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/phi_ind_ahars_copilot_deg",
                    Units = "degrees",
                    Description = "The indicated roll on the panel for the copilot's side, AHARS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosDgDriftVacDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_vac_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for vacuum 1 powered DGs",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosDgDriftVac2Deg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_vac2_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for vacuum 2 powered DGs",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosDgDriftEleDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_ele_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for electric 1 powered DGs",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosDgDriftEle2Deg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_ele2_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for electric 2 powered DGs",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosDgDriftAharsDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_ahars_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for AHARS 1 powered DGs",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitGyrosDgDriftAhars2Deg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/gyros/dg_drift_ahars2_deg",
                    Units = "degrees",
                    Description = "A delta between the plane's heading and the DG for AHARS 2 powered DGs",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscOuterMarkerLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/outer_marker_lit",
                    Units = "???",
                    Description = "Is the outer marker beacon lit right now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscMiddleMarkerLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/middle_marker_lit",
                    Units = "???",
                    Description = "Is the middle marker beacon lit right now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscInnerMarkerLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/inner_marker_lit",
                    Units = "???",
                    Description = "Is the inner marker beacon lit right now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscOverOuterMarker
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/over_outer_marker",
                    Units = "???",
                    Description = "Are we over the outer marker beacon",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscOverMiddleMarker
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/over_middle_marker",
                    Units = "???",
                    Description = "Are we over the middle marker beacon",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscOverInnerMarker
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/over_inner_marker",
                    Units = "???",
                    Description = "Are we over the inner marker beacon",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscBarometerSetting
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/barometer_setting",
                    Units = "???",
                    Description = "The pilots altimeter setting",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscBarometerSetting2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/barometer_setting2",
                    Units = "???",
                    Description = "The copilots altimeter setting",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscRadioAltimeterMinimum
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/radio_altimeter_minimum",
                    Units = "Feet",
                    Description = "The decision height for the radio altimeter",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscShowPath
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/show_path",
                    Units = "???",
                    Description = "Show our path as we fly?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscVacuum
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/vacuum",
                    Units = "???",
                    Description = "Vacuum Ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscVacuum2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/vacuum2",
                    Units = "???",
                    Description = "Vacuum 2 Ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscAhAdjust
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/ah_adjust",
                    Units = "pixels",
                    Description = "Adjustment to the artificial horizon bars (pilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscAhAdjust2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/ah_adjust2",
                    Units = "pixels",
                    Description = "Adjustment to the artificial horizon bars (copilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscCompassIndicated
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/compass_indicated",
                    Units = "degm",
                    Description = "Indicated cockpit heading in magnetic degrees",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscHydraulicQuantity
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/hydraulic_quantity",
                    Units = "???",
                    Description = "Hydraulic Quantity 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitMiscHydraulicQuantity2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/misc/hydraulic_quantity2",
                    Units = "???",
                    Description = "Hydraulic Quantity 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureBleedAirOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/bleed_air_on",
                    Units = "bool",
                    Description = "Bleeding air is on (legacy)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureBleedAirMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/bleed_air_mode",
                    Units = "enum",
                    Description = "0=off,1=L,2=B,3=R,4=APU",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureCabinAltitudeSetMMsl
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_altitude_set_m_msl",
                    Units = "???",
                    Description = "The desired cabin altitude (BEFORE 730 this was incorrectly int type)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureCabinVviSetMMsec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_vvi_set_m_msec",
                    Units = "???",
                    Description = "The desired cabin altitude rate change (BEFORE 730 this was incorrectly int type)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureCabinPressureDifferentialPsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_pressure_differential_psi",
                    Units = "psi",
                    Description = "????",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureCabinAltitudeActualMMsl
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_altitude_actual_m_msl",
                    Units = "???",
                    Description = "The real cabin altitude (BEFORE 730 this was incorrectly int type)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureCabinVviActualMMsec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/cabin_vvi_actual_m_msec",
                    Units = "???",
                    Description = "The real cabin altitude rate change (BEFORE 730 this was incorrectly int type)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressurePressureTestTimeout
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/pressure_test_timeout",
                    Units = "???",
                    Description = "Timeout for some kind of pressure test/",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureMaxAllowableAltitude
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/max_allowable_altitude",
                    Units = "???",
                    Description = "Max altitude the plane can keep pressure at?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureDumpAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/dump_all",
                    Units = "bool",
                    Description = "Pressure dump switch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitPressureDumpToAlt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/pressure/dump_to_alt",
                    Units = "bool",
                    Description = "Pressure dump to altitude switch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1FreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the nav1 radio.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2FreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the nav2 radio.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosCom1FreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/com1_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the copm1 radio.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosCom2FreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/com2_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the com2 radio.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1FreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the first automatic direction finder.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2FreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the second automatic direction finder.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosDmeFreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/dme_freq_hz",
                    Units = "10Hz",
                    Description = "The current frequency of the standalone DME receiver.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1StdbyFreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2StdbyFreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosCom1StdbyFreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/com1_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosCom2StdbyFreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/com2_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1StdbyFreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2StdbyFreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosDmeStdbyFreqHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/dme_stdby_freq_hz",
                    Units = "10Hz",
                    Description = "The standby frequency for the radio mentioned above for flip/flop radios.<p>NOTE: X-Plane does not currently feature a flip-flop standalone DME instrument, but the data exists.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1ObsDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_obs_degt",
                    Units = "degt",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (true: legacy)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2ObsDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_obs_degt",
                    Units = "degt",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (true: legacy)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1ObsDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_obs_degm",
                    Units = "degm",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (mag: modern) pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1ObsDegm2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_obs_degm2",
                    Units = "degm",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 1. (mag: modern) copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2ObsDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_obs_degm",
                    Units = "degm",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (mag: modern) pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2ObsDegm2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_obs_degm2",
                    Units = "degm",
                    Description = "The 'obs' heading programmed into VOR and HSI gauges that follow nav radio 2. (mag: modern) copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1DirDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the beacon indicated by nav1.  Set override with override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2DirDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the beacon indicated by nav2.  Set override with override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1DirDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the beacon indicated by adf1.  Use override_adf to stg.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2DirDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the beacon indicated by adf2.  Use override_adf to stg.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsDirDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the GPS 1 destination.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2DirDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to the GPS 2 destination.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosDmeDirDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/dme_dir_degt",
                    Units = "deg",
                    Description = "The relative bearing to whatever becaon the standalone DME is programmed for.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1HdefDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_hdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1HdefDot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_hdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2HdefDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_hdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2HdefDot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_hdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsHdefDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_hdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsHdefDot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_hdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2HdefDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_hdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - pilot.  override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2HdefDot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_hdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in course in 'dots' on a VOR compass - copilot.  override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1VdefDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_vdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1VdefDot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_vdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2VdefDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_vdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2VdefDot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_vdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsVdefDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_vdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot. override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsVdefDot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_vdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot. override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2VdefDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_vdef_dot",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - pilot. override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2VdefDot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_vdef_dot2",
                    Units = "prcnt",
                    Description = "The deflection from the aircraft to the tuned in glide slope in dots on an ILS gauge - copilot. override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1Fromto
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_fromto",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav1 beacon - pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1Fromto2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_fromto2",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav1 beacon - copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2Fromto
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_fromto",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2Fromto2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_fromto2",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsFromto
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_fromto",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsFromto2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_fromto2",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2Fromto
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_fromto",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2Fromto2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_fromto2",
                    Units = "enum",
                    Description = "Whether we are heading to or from (or over) our nav2 beacon - copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1CDI
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_CDI",
                    Units = "bool",
                    Description = "Are we receiving an expected glide slope for nav1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2CDI
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_CDI",
                    Units = "bool",
                    Description = "Are we receiving an expected glide slope for nav2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1DmeDistM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on nav1.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2DmeDistM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on nav2.  override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1DmeDistM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on adf1.  override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2DmeDistM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on adf2.  override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsDmeDistM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on the GPS.  override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2DmeDistM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on the GPS.  override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosStandaloneDmeDistM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/standalone_dme_dist_m",
                    Units = "nautical_miles",
                    Description = "Our distance in nautical miles from the beacon tuned in on the standalone DME receiver. override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on nav1. override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on nav2. override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on adf1. override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on adf2. override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsDmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on the GPS. override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on the GPS. override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosStandaloneDmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/standalone_dme_speed_kts",
                    Units = "knots",
                    Description = "Our closing speed to the beacon tuned in on the standalone DME receiver. override_dme",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1DmeTimeSecs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on nav1. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2DmeTimeSecs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on nav2. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1DmeTimeSecs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on adf1. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2DmeTimeSecs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on adf2. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsDmeTimeSecs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on the GPS 1. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2DmeTimeSecs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on the GPS 2. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosStandaloneDmeTimeSecs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/standalone_dme_time_secs",
                    Units = "mins",
                    Description = "Our time to reach the beacon tuned in on the standalone DME. override_dme  (Dataref is labeled - this has always been minutes.)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1CourseDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_course_degm",
                    Units = "degm",
                    Description = "The localizer course for Nav1 or tuned in radial for a VOR. (Magnetic, new) - pilot use override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1CourseDegm2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_course_degm2",
                    Units = "degm",
                    Description = "The localizer course for Nav1 or tuned in radial for a VOR. (Magnetic, new) - copilot use override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2CourseDegm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_course_degm",
                    Units = "degm",
                    Description = "The localizer course for Nav2 or tuned in radial for a VOR. (Magnetic, new) - pilot use override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2CourseDegm2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_course_degm2",
                    Units = "degm",
                    Description = "The localizer course for Nav2 or tuned in radial for a VOR. (Magnetic, new) - copilot use override_navneedles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsCourseDegtm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_course_degtm",
                    Units = "degm",
                    Description = "The localizer course for GPS 1 or tuned in radial for a VOR (Magnetic, new) - pilot - use override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsCourseDegtm2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_course_degtm2",
                    Units = "degm",
                    Description = "The localizer course for GPS 1 or tuned in radial for a VOR (Magnetic, new) - copilot - use override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2CourseDegtm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_course_degtm",
                    Units = "degm",
                    Description = "The localizer course for GPS 2 or tuned in radial for a VOR (Magnetic, new) - pilot - use override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2CourseDegtm2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_course_degtm2",
                    Units = "degm",
                    Description = "The localizer course for GPS 2 or tuned in radial for a VOR (Magnetic, new) - copilot - use override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1SlopeDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_slope_degt",
                    Units = "deg",
                    Description = "The glide slope slope for nav1.  Writable with override_navneedles starting in 940.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2SlopeDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_slope_degt",
                    Units = "deg",
                    Description = "The glide slope slope for nav2.  Writable with override_navneedles starting in 940.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsSlopeDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_slope_degt",
                    Units = "deg",
                    Description = "The glide slope slope for the GPS 1.  Writable with override_gps.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2SlopeDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_slope_degt",
                    Units = "deg",
                    Description = "The glide slope slope for the GPS 1.  Writable with override_gps.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosTransponderCode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_code",
                    Units = "code",
                    Description = "Our transponder code.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosTransponderId
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_id",
                    Units = "bool",
                    Description = "Whether we are squawking ident right now.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosTransponderLight
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_light",
                    Units = "???",
                    Description = "Whether the transponder is lit",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosTransponderBrightness
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_brightness",
                    Units = "ratio",
                    Description = "Transponder light brightness ratio from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosTransponderMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/transponder_mode",
                    Units = "enum",
                    Description = "Transponder mode (off=0,stdby=1,on=2,test=3)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1CardinalDir
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_cardinal_dir",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for VOR 1 - pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1CardinalDir2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_cardinal_dir2",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for VOR 1 - copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2CardinalDir
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_cardinal_dir",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for VOR 2 - pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2CardinalDir2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_cardinal_dir2",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for VOR 2 - copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1CardinalDir
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_cardinal_dir",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for ADF 1 - pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1CardinalDir2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_cardinal_dir2",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for ADF 1 - copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2CardinalDir
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_cardinal_dir",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for ADF 2 - pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2CardinalDir2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_cardinal_dir2",
                    Units = "degm",
                    Description = "Magnetic heading of the compass card for ADF 2 - copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav1HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav1_has_dme",
                    Units = "bool",
                    Description = "Does this nav aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNav2HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav2_has_dme",
                    Units = "bool",
                    Description = "Does this nav aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf1HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf1_has_dme",
                    Units = "bool",
                    Description = "Does this adf aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosAdf2HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/adf2_has_dme",
                    Units = "bool",
                    Description = "Does this adf aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosDme5HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/dme5_has_dme",
                    Units = "bool",
                    Description = "Does this adf aid have DME?  Use override_dme to set",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosObsMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/obs_mag",
                    Units = "???",
                    Description = "OBS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGearAudioWorking
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gear_audio_working",
                    Units = "???",
                    Description = "Suppresses Gear Audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosMarkerAudioWorking
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/marker_audio_working",
                    Units = "???",
                    Description = "Suppresses Marker Audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosApSrc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/ap_src",
                    Units = "int",
                    Description = "autopilot source 0 is pilot, 1 is copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosNavComAdfMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/nav_com_adf_mode",
                    Units = "int",
                    Description = "for a multifunction receiver...0-5 for nav1,nav2,com1,com2,adf1,adf2.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGpsHasGlideslope
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps_has_glideslope",
                    Units = "int",
                    Description = "does the GPS 1 provide vertical guidance?  Write with override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitRadiosGps2HasGlideslope
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/radios/gps2_has_glideslope",
                    Units = "int",
                    Description = "does the GPS 2 provide vertical guidance?  Write with override_gps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesDMERadioSelector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/DME_radio_selector",
                    Units = "???",
                    Description = "Which nav radio is the slaved DME connected to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesDMEDistanceOrTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/DME_distance_or_time",
                    Units = "???",
                    Description = "Is the standalone DME showing distance or groundspeed/time",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesHSISelector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/HSI_selector",
                    Units = "???",
                    Description = "Is the HSI showing nav1, nav2, or GPS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesHSISelector2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/HSI_selector2",
                    Units = "???",
                    Description = "Is the HSI showing nav1, nav2, or GPS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesRMISelector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_selector",
                    Units = "???",
                    Description = "Is the RMI showing nav1, nav2, or GPS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesRMISelector2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_selector2",
                    Units = "???",
                    Description = "Is the RMI showing nav1, nav2, or GPS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesRMILVorAdfSelector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_l_vor_adf_selector",
                    Units = "???",
                    Description = "Is the left side of a VOR/ADF RMI showing the VOR or ADF",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesRMILVorAdfSelector2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_l_vor_adf_selector2",
                    Units = "???",
                    Description = "Is the left side of a VOR/ADF RMI showing the VOR or ADF",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesRMIRVorAdfSelector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_r_vor_adf_selector",
                    Units = "???",
                    Description = "Is the right side of a VOR/ADF RMI showing the VOR or ADF",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesRMIRVorAdfSelector2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/RMI_r_vor_adf_selector2",
                    Units = "???",
                    Description = "Is the right side of a VOR/ADF RMI showing the VOR or ADF",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISDme1Selector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_dme_1_selector",
                    Units = "???",
                    Description = "Is the first EFIS DME showing nothing, dist to VOR, or dist to ADF",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISDme2Selector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_dme_2_selector",
                    Units = "???",
                    Description = "Is the second EFIS DME showing nothing, dist to VOR, or dist to ADF",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesMarkerPanelOut
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/marker_panel_out",
                    Units = "???",
                    Description = "Settings for the marker beacon audio panel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAudioPanelOut
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/audio_panel_out",
                    Units = "???",
                    Description = "Settings for the com radio audio panel. 6=com1,7=com2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_on",
                    Units = "bool",
                    Description = "Is the anti-icing system on.  This turns on EVERY anti-ice system.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceInletHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_inlet_heat",
                    Units = "bool",
                    Description = "Turns on inlet heating for engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIcePropHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_prop_heat",
                    Units = "bool",
                    Description = "Turns on prop heat for prop 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceWindowHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_window_heat",
                    Units = "bool",
                    Description = "Turns on anti-icing fr the windshield",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesPitotHeatOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/pitot_heat_on",
                    Units = "bool",
                    Description = "Is the pitot heat on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesPitotHeatOn2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/pitot_heat_on2",
                    Units = "bool",
                    Description = "Is the backup pitot heat on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceAOAHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_AOA_heat",
                    Units = "bool",
                    Description = "Turns on anti-icing for alpha vane heater, pilot side",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceAOAHeat2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_AOA_heat2",
                    Units = "bool",
                    Description = "Turns on anti-icing for alpha vane heater, copilot side",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceSurfHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_surf_heat",
                    Units = "bool",
                    Description = "Turns on surface heat on the wings",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceSurfHeatLeft
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_surf_heat_left",
                    Units = "bool",
                    Description = "Turns on surface heat on the left wing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceSurfHeatRight
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_surf_heat_right",
                    Units = "bool",
                    Description = "Turns on surface heat on the right wing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceSurfBoot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_surf_boot",
                    Units = "bool",
                    Description = "Turns on the wing-surface anti-ice boot (knocks ice off I think).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAntiIceAutoIgnite
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/anti_ice_auto_ignite",
                    Units = "bool",
                    Description = "ignition source is turned on automatically on low N1 to prevent flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesIceDetect
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/ice_detect",
                    Units = "bool",
                    Description = "Turns on ice detect",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAutoBrakeSettings
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/auto_brake_settings",
                    Units = "???",
                    Description = "Settings for the autobrake control",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesAutoFeatherMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/auto_feather_mode",
                    Units = "???",
                    Description = "Settings for auto-feathering mode",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesYawDamperOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/yaw_damper_on",
                    Units = "???",
                    Description = "Is the yaw damper on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesArtStabOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/art_stab_on",
                    Units = "???",
                    Description = "Is the artificial stability system on?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesPreRotateLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/pre_rotate_level",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesParachuteOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/parachute_on",
                    Units = "???",
                    Description = "Is the parachute deployed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesJatoOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/jato_on",
                    Units = "???",
                    Description = "Are jatos on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesPropSyncOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/prop_sync_on",
                    Units = "???",
                    Description = "Is prop sync on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesPuffersOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/puffers_on",
                    Units = "???",
                    Description = "Are puffers on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesWaterScoop
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/water_scoop",
                    Units = "???",
                    Description = "Is water scoop active",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesArrestingGear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/arresting_gear",
                    Units = "???",
                    Description = "Is the arresting gear deployed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesCanopyReq
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/canopy_req",
                    Units = "???",
                    Description = "Is the canopy handle open",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesDumpingFuel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/dumping_fuel",
                    Units = "???",
                    Description = "Are we dumping fuel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesTotEnerAudio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/tot_ener_audio",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISMapMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_map_mode",
                    Units = "???",
                    Description = "Is the moving map showing the map or another HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISMapSubmode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_map_submode",
                    Units = "enum",
                    Description = "0=app,1=vor,2=map,3=nav,4=pln specific mode of the map (or HSI)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISMapRangeSelector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_map_range_selector",
                    Units = "???",
                    Description = "The display range for the moving map",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesECAMMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/ECAM_mode",
                    Units = "???",
                    Description = "The display mode for the ECAM",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesGearHandleStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/gear_handle_status",
                    Units = "boolean",
                    Description = "Gear handle is up or down?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFIFSShowsWeather
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIFS_shows_weather",
                    Units = "boolean",
                    Description = "Does the EFIS display show storms/weather? - legacy - origin dataref contained a typo",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISShowsWeather
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_weather",
                    Units = "boolean",
                    Description = "Does the EFIS display show storms/weather?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISWeatherAlpha
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_weather_alpha",
                    Units = "ratio",
                    Description = "Alpha level of EFIS weather from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISShowsTcas
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_tcas",
                    Units = "boolean",
                    Description = "Does the EFIS show other aircraft?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISShowsAirports
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_airports",
                    Units = "boolean",
                    Description = "Does the EFIS show other airports?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISShowsWaypoints
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_waypoints",
                    Units = "boolean",
                    Description = "Does the EFIS show waypoints?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISShowsVORs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_VORs",
                    Units = "boolean",
                    Description = "Does the EFIS show VORs?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesEFISShowsNDBs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/EFIS_shows_NDBs",
                    Units = "boolean",
                    Description = "Does the EFIS show NDBs?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesArgusMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/argus_mode",
                    Units = "enum",
                    Description = "What mode is the Argus 2000 in",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesNoSmoking
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/no_smoking",
                    Units = "boolean",
                    Description = "No Smoking",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitSwitchesFastenSeatBelts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/switches/fasten_seat_belts",
                    Units = "boolean",
                    Description = "Fasten Seat Belts",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsMasterCautionTimeout
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/master_caution_timeout",
                    Units = "seconds",
                    Description = "Time master caution will go out.  (Use command-system instead of this dataref.)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsMasterCautionOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/master_caution_on",
                    Units = "boolean",
                    Description = "Master caution is enabled for being lit (because it is not pressed)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsMasterWarningOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/master_warning_on",
                    Units = "boolean",
                    Description = "Master warning is enabled for being lit (because it is not pressed)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsMasterAcceptOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/master_accept_on",
                    Units = "boolean",
                    Description = "Master accept is enabled for being lit (because it is not pressed)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorTestTimeout
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciator_test_timeout",
                    Units = "seconds",
                    Description = "Time annunciator test will end (use annunciator_test_pressed instead)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorTestPressed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciator_test_pressed",
                    Units = "boolean",
                    Description = "True if the annunciator test button is pressed now.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAutopilotTestBeeping
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/autopilot_test_beeping",
                    Units = "boolean",
                    Description = "The autopilot is beeping as part of its self-test",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAutopilotTestModesLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/autopilot_test_modes_lit",
                    Units = "boolean",
                    Description = "The autopilot mode lights are on as part of its self test",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAutopilotTestTrimLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/autopilot_test_trim_lit",
                    Units = "boolean",
                    Description = "The autopilot trim lights are on as part of its self test",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAutopilotTestApLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/autopilot_test_ap_lit",
                    Units = "boolean",
                    Description = "The autopilot engaged lights are on as part of their self test",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsMasterCaution
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/master_caution",
                    Units = "boolean",
                    Description = "Master caution light on/off",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsMasterWarning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/master_warning",
                    Units = "boolean",
                    Description = "Master warning",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsMasterAccept
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/master_accept",
                    Units = "boolean",
                    Description = "Master accept light on/off",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAutopilotDisconnect
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_disconnect",
                    Units = "boolean",
                    Description = "autopilot has been disconnected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsLowVacuum
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/low_vacuum",
                    Units = "boolean",
                    Description = "low vacuum pressure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsLowVoltage
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/low_voltage",
                    Units = "boolean",
                    Description = "low battery voltage",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsFuelQuantity
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/fuel_quantity",
                    Units = "boolean",
                    Description = "running out of fuel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsHydraulicPressure
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/hydraulic_pressure",
                    Units = "boolean",
                    Description = "hydraulic pressure low",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsSpeedbrake
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/speedbrake",
                    Units = "boolean",
                    Description = "speedbrakes deployed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsGPWS
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/GPWS",
                    Units = "boolean",
                    Description = "GPWS failed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsIce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/ice",
                    Units = "boolean",
                    Description = "ice detected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsLoRotor
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/lo_rotor",
                    Units = "boolean",
                    Description = "low rotor speed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsHiRotor
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/hi_rotor",
                    Units = "boolean",
                    Description = "high rotor speed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsPitotHeatOff
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/pitot_heat_off",
                    Units = "boolean",
                    Description = "pitot heat off",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsTransonic
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/transonic",
                    Units = "boolean",
                    Description = "transonic",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsSlats
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/slats",
                    Units = "boolean",
                    Description = "slats deployed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsFlightDirector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/flight_director",
                    Units = "boolean",
                    Description = "flight director failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAutopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot",
                    Units = "boolean",
                    Description = "autopilot failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsYawDamper
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/yaw_damper",
                    Units = "boolean",
                    Description = "yaw damper failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsHvac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/hvac",
                    Units = "boolean",
                    Description = "duct overheated",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsBatteryChargeHi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/battery_charge_hi",
                    Units = "boolean",
                    Description = "battery is charging too rapidly - may overheat",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsCabinAltitude12500
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/cabin_altitude_12500",
                    Units = "boolean",
                    Description = "cabin altitude at or above 12500",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAutopilotTrimFail
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_trim_fail",
                    Units = "boolean",
                    Description = "autopilot trim failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsElectricTrimOff
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/electric_trim_off",
                    Units = "boolean",
                    Description = "electric trim is off",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsCrossfeedOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/crossfeed_on",
                    Units = "boolean",
                    Description = "crossfeed on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsLandingTaxiLite
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/landing_taxi_lite",
                    Units = "boolean",
                    Description = "landing or taxiway light on but gear up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsCabinDoorOpen
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/cabin_door_open",
                    Units = "boolean",
                    Description = "cabin door is open",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsExternalPowerOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/external_power_on",
                    Units = "boolean",
                    Description = "external power is on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsPassengerOxyOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/passenger_oxy_on",
                    Units = "boolean",
                    Description = "passenger oxygen on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsGearUnsafe
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/gear_unsafe",
                    Units = "boolean",
                    Description = "gear is unsafe",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAutopilotTrimDown
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_trim_down",
                    Units = "boolean",
                    Description = "autopilot trimming down",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAutopilotTrimUp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_trim_up",
                    Units = "boolean",
                    Description = "autopilot trimming up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAutopilotBankLimit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_bank_limit",
                    Units = "boolean",
                    Description = "autopilot bank limit is turned ON, autopilot will keep bank below 12.5 degrees of bank",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAutopilotSoftRide
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/autopilot_soft_ride",
                    Units = "boolean",
                    Description = "autopilot soft ride is on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsNoInverters
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/no_inverters",
                    Units = "boolean",
                    Description = "no inverters are on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsFuelPressure
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/fuel_pressure",
                    Units = "bitfield",
                    Description = "fuel pressure low",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsOilPressure
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/oil_pressure",
                    Units = "bitfield",
                    Description = "oil pressure low",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsOilTemperature
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/oil_temperature",
                    Units = "bitfield",
                    Description = "oil temperature too high",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsGenerator
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/generator",
                    Units = "bitfield",
                    Description = "generators are off or broken",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsChipDetect
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/chip_detect",
                    Units = "bitfield",
                    Description = "a chip has been detected in, um, a prop or turbine?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsEngineFire
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/engine_fire",
                    Units = "bitfield",
                    Description = "yer engines are on fire, fer cryin out loud",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAutoIgnition
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/auto_ignition",
                    Units = "bitfield",
                    Description = "auto ignition ???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsReverse
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/reverse",
                    Units = "bitfield",
                    Description = "reversers deployed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsAfterburnersOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/afterburners_on",
                    Units = "bitfield",
                    Description = "afterburners on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWarningsAnnunciatorsInverter
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/warnings/annunciators/inverter",
                    Units = "bitfield",
                    Description = "inverters are off or broken",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsGunsArmed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/guns_armed",
                    Units = "???",
                    Description = "Are guns armed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsRocketsArmed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/rockets_armed",
                    Units = "???",
                    Description = "Are rockets armed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsMissilesArmed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/missiles_armed",
                    Units = "???",
                    Description = "Are missiles armed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsBombsArmed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/bombs_armed",
                    Units = "???",
                    Description = "Are bombs armed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsFiringMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/firing_mode",
                    Units = "???",
                    Description = "Firing mode (single, ripple, etc. for bombs)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsFiringRate
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/firing_rate",
                    Units = "???",
                    Description = "Firing rate (for bombs)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsPlaneTargetIndex
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/plane_target_index",
                    Units = "???",
                    Description = "Index of plane that is being targeted",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsChaffNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/chaff_now",
                    Units = "count",
                    Description = "Number of rounds left in the sum of all chaff weapons on aircraft. Missing in 11.00-11.05.  Writable in v10 and earlier.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsFlareNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/flare_now",
                    Units = "count",
                    Description = "Number of rounds left in all flare weapons on the aircraft.  Missing in 11.00-11.05.  Writable in v10 and earlier.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement CockpitWeaponsWpnSelConsole
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit/weapons/wpn_sel_console",
                    Units = "???",
                    Description = "INDIVIDUAL weapon selected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsSbrkrat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/sbrkrat",
                    Units = "[0..1.5]",
                    Description = "Actual speed brake deployment [0..1 = schedule for in-air, 1..1.5 = extra deployment when on ground]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsFlaprqst
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/flaprqst",
                    Units = "[0..1]",
                    Description = "Requested flap deployment, 0 = off, 1 = max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsTailLockRat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/tail_lock_rat",
                    Units = "ratio",
                    Description = "This is how locked the tail-wheel is ... 0 is free castoring, 1 is locked.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsAilTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/ail_trim",
                    Units = "[-1..1]",
                    Description = "Current Aileron Trim, -1 = max left, 1 = max right",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsDist
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/dist",
                    Units = "meters",
                    Description = "Distance Traveled",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsElvTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/elv_trim",
                    Units = "[-1..1]",
                    Description = "Elevation Trim, -1 = max nose down, 1 = max nose up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsFlaprat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/flaprat",
                    Units = "[0..1]",
                    Description = "Actual flap 1 deployment ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsFlap2rat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/flap2rat",
                    Units = "[0..1]",
                    Description = "Actual flap 2 deployment ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsLBrakeAdd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/l_brake_add",
                    Units = "[0..1]",
                    Description = "Left Brake - additional braking force (",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsRBrakeAdd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/r_brake_add",
                    Units = "[0..1]",
                    Description = "Right Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsLail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/lail1def",
                    Units = "degrees",
                    Description = "Deflection Left Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsLail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/lail2def",
                    Units = "degrees",
                    Description = "Deflection Left Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsRail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rail1def",
                    Units = "degrees",
                    Description = "Deflection Right Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsRail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rail2def",
                    Units = "degrees",
                    Description = "Deflection Right Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsLdruddef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/ldruddef",
                    Units = "degrees",
                    Description = "Deflection Left Rudder",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsRdruddef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rdruddef",
                    Units = "degrees",
                    Description = "Deflection Right Rudder",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsLsplrdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/lsplrdef",
                    Units = "degrees",
                    Description = "Deflection Left Spoiler",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsRsplrdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rsplrdef",
                    Units = "degrees",
                    Description = "Deflection Right Spoiler",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsSbrkrqst
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/sbrkrqst",
                    Units = "[-0.5..1]",
                    Description = "Speed Brake, -0.5 = armed, 0 = off, 1 = max deployment",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVectrqst
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vectrqst",
                    Units = "[0..1]",
                    Description = "Requested thrust vector",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsSwdi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/swdi",
                    Units = "[0..1]",
                    Description = "Actual wing sweep ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsSwdirqst
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/swdirqst",
                    Units = "[0..1]",
                    Description = "Requested sweep ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsSlatrat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/slatrat",
                    Units = "[0..1]",
                    Description = "Actual slat deployment ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsParkbrake
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/parkbrake",
                    Units = "[0..1]",
                    Description = "Parking Brake, 1 = max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsRotTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rot_trim",
                    Units = "[-1..1]",
                    Description = "Rotor Trim",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsRudTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/rud_trim",
                    Units = "[-1..1]",
                    Description = "Rudder Trim, -1 = max left, 1 = max right",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsIncidRqst
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/incid_rqst",
                    Units = "[0..1]",
                    Description = "Requested incidence",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsDihedRqst
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/dihed_rqst",
                    Units = "[0..1]",
                    Description = "Requested dihedral",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVectRat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vect_rat",
                    Units = "[0..1]",
                    Description = "Actual thrust vector",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsIncidRat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/incid_rat",
                    Units = "[0..1]",
                    Description = "Actual incidence",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsDihedRat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/dihed_rat",
                    Units = "[0..1]",
                    Description = "Actual dihedral",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsTailhookRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/tailhook_ratio",
                    Units = "ratio",
                    Description = "tailhook deployment ratio, 0 is up 1 is down",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsCanopyRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/canopy_ratio",
                    Units = "ratio",
                    Description = "canopy deployment ratio, 0 is down 1 is up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lAil1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lAil2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rAil1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rAil2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lAil1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lAil2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rAil1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rAil2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lAil1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lAil2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rAil1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rAil2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lAil1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lAil2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rAil1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_ail1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rAil2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_ail2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lSpo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lSpo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rSpo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rSpo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lSpo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lSpo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rSpo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rSpo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lSpo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lSpo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rSpo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rSpo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lSpo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lSpo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rSpo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_spo1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rSpo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_spo2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lFla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lFla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rFla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rFla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lFla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lFla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rFla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rFla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lFla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lFla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rFla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rFla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lFla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lFla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rFla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_fla1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rFla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_fla2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lYawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rYawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lYawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rYawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lYawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rYawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lYawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rYawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab1Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab1Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab2Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab2Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab1Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_rud1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab1Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_rud2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab2Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_rud1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab2Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_rud2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 1 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 2 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 3 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 4 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 5 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 6 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 7 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 8 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 9 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 10 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 11 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 12 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 13 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 14 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 15 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 16 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 17 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 18 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 19 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Ail1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_ail1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Aileron 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Ail2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_ail2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Aileron 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Spo1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_spo1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Spoiler 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Spo2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_spo2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Spoiler 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Fla1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_fla1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Flap 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Fla2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_fla2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Flap 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Yawbdef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_yawbdef",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Yaw Brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Elv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_elv1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Elv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_elv2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Rud1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_rud1def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Rudder 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Rud2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_rud2def",
                    Units = "degrees",
                    Description = "Deflection Misc Wing 20 Rudder 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_retract",
                    Units = "boolean",
                    Description = "Wing 1 Left Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_retract",
                    Units = "boolean",
                    Description = "Wing 1 Right Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_retract",
                    Units = "boolean",
                    Description = "Wing 2 Left Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_retract",
                    Units = "boolean",
                    Description = "Wing 2 Right Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_retract",
                    Units = "boolean",
                    Description = "Wing 3 Left Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_retract",
                    Units = "boolean",
                    Description = "Wing 3 Right Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_retract",
                    Units = "boolean",
                    Description = "Wing 4 Left Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rRetract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_retract",
                    Units = "boolean",
                    Description = "Wing 4 Right Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab1Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_retract",
                    Units = "boolean",
                    Description = "Horiz Stab Left Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab2Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_retract",
                    Units = "boolean",
                    Description = "Horiz Stab Right Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab1Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_retract",
                    Units = "boolean",
                    Description = "Vert Stab 1 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab2Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_retract",
                    Units = "boolean",
                    Description = "Vert Stab 2 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_retract",
                    Units = "boolean",
                    Description = "Misc Wing 1 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_retract",
                    Units = "boolean",
                    Description = "Misc Wing 2 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_retract",
                    Units = "boolean",
                    Description = "Misc Wing 3 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_retract",
                    Units = "boolean",
                    Description = "Misc Wing 4 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_retract",
                    Units = "boolean",
                    Description = "Misc Wing 5 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_retract",
                    Units = "boolean",
                    Description = "Misc Wing 6 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_retract",
                    Units = "boolean",
                    Description = "Misc Wing 7 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_retract",
                    Units = "boolean",
                    Description = "Misc Wing 8 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_retract",
                    Units = "boolean",
                    Description = "Misc Wing 9 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_retract",
                    Units = "boolean",
                    Description = "Misc Wing 10 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_retract",
                    Units = "boolean",
                    Description = "Misc Wing 11 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_retract",
                    Units = "boolean",
                    Description = "Misc Wing 12 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_retract",
                    Units = "boolean",
                    Description = "Misc Wing 13 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_retract",
                    Units = "boolean",
                    Description = "Misc Wing 14 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_retract",
                    Units = "boolean",
                    Description = "Misc Wing 15 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_retract",
                    Units = "boolean",
                    Description = "Misc Wing 16 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_retract",
                    Units = "boolean",
                    Description = "Misc Wing 17 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_retract",
                    Units = "boolean",
                    Description = "Misc Wing 18 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_retract",
                    Units = "boolean",
                    Description = "Misc Wing 19 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20Retract
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_retract",
                    Units = "boolean",
                    Description = "Misc Wing 20 Retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lRetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_retract_now",
                    Units = "ratio",
                    Description = "Wing 1 Left Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rRetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_retract_now",
                    Units = "ratio",
                    Description = "Wing 1 Right Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lRetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_retract_now",
                    Units = "ratio",
                    Description = "Wing 2 Left Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rRetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_retract_now",
                    Units = "ratio",
                    Description = "Wing 2 Right Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lRetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_retract_now",
                    Units = "ratio",
                    Description = "Wing 3 Left Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rRetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_retract_now",
                    Units = "ratio",
                    Description = "Wing 3 Right Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lRetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_retract_now",
                    Units = "ratio",
                    Description = "Wing 4 Left Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rRetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_retract_now",
                    Units = "ratio",
                    Description = "Wing 4 Right Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab1RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_retract_now",
                    Units = "ratio",
                    Description = "Horiz Stab Left Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab2RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_retract_now",
                    Units = "ratio",
                    Description = "Horiz Stab Right Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab1RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_retract_now",
                    Units = "ratio",
                    Description = "Vert Stab 1 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab2RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_retract_now",
                    Units = "ratio",
                    Description = "Vert Stab 2 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 1 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 2 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 3 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 4 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 5 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 6 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 7 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 8 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 9 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 10 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 11 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 12 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 13 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 14 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 15 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 16 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 17 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 18 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 19 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20RetractNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_retract_now",
                    Units = "ratio",
                    Description = "Misc Wing 20 Retract Now",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lRetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_retract_max",
                    Units = "ratio",
                    Description = "Wing 1 Left Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rRetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_retract_max",
                    Units = "ratio",
                    Description = "Wing 1 Right Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lRetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_retract_max",
                    Units = "ratio",
                    Description = "Wing 2 Left Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rRetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_retract_max",
                    Units = "ratio",
                    Description = "Wing 2 Right Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lRetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_retract_max",
                    Units = "ratio",
                    Description = "Wing 3 Left Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rRetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_retract_max",
                    Units = "ratio",
                    Description = "Wing 3 Right Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lRetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_retract_max",
                    Units = "ratio",
                    Description = "Wing 4 Left Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rRetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_retract_max",
                    Units = "ratio",
                    Description = "Wing 4 Right Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab1RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab1_retract_max",
                    Units = "ratio",
                    Description = "Horiz Stab Left Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsHstab2RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/hstab2_retract_max",
                    Units = "ratio",
                    Description = "Horiz Stab Right Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab1RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab1_retract_max",
                    Units = "ratio",
                    Description = "Vert Stab 1 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsVstab2RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/vstab2_retract_max",
                    Units = "ratio",
                    Description = "Vert Stab 2 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing01RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing01_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 1 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing02RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing02_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 2 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing03RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing03_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 3 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing04RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing04_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 4 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing05RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing05_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 5 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing06RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing06_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 6 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing07RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing07_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 7 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing08RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing08_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 8 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing09RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing09_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 9 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing10RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing10_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 10 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing11RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing11_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 11 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing12RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing12_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 12 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing13RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing13_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 13 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing14RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing14_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 14 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing15RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing15_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 15 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing16RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing16_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 16 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing17RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing17_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 17 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing18RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing18_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 18 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing19RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing19_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 19 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsMwing20RetractMax
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/mwing20_retract_max",
                    Units = "ratio",
                    Description = "Misc Wing 20 Retract Max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lElv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1lElv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1l_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Left Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rElv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing1rElv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing1r_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 1 Right Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lElv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2lElv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2l_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Left Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rElv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing2rElv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing2r_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 2 Right Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lElv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3lElv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3l_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Left Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rElv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing3rElv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing3r_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 3 Right Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lElv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4lElv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4l_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Left Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rElv1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_elv1def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Elevator 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelControlsWing4rElv2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/controls/wing4r_elv2def",
                    Units = "degrees",
                    Description = "Deflection Wing 4 Right Elevator 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelEngineENGNThroOverride
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/engine/ENGN_thro_override",
                    Units = "ratio",
                    Description = "An override from 0.0 to max fwd thrust for overriding all throttles.  Set to -2.0 to disengage.  DEPRECATED",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelEngineBurnerEnabled
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/engine/burner_enabled",
                    Units = "boolean",
                    Description = "Burner is on or off",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelEngineBurnerLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/engine/burner_level",
                    Units = "boolean",
                    Description = "Burner is high or low",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresFrmIce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/frm_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on wings/airframe - left wing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresFrmIce2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/frm_ice2",
                    Units = "ratio",
                    Description = "Ratio of icing on wings/airframe - right wing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresPitotIce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/pitot_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on pitot tube",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresPitotIce2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/pitot_ice2",
                    Units = "ratio",
                    Description = "Ratio of icing on pitot tube2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresPropIce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/prop_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on the prop - first prop",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresInletIce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/inlet_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on the air inlets - first engine",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresWindowIce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/window_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on the windshield",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresAoaIce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/aoa_ice",
                    Units = "ratio",
                    Description = "Ratio of icing on alpha vane - pilot AoA",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresAoaIce2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/aoa_ice2",
                    Units = "ratio",
                    Description = "Ratio of icing on alpha vane - copilot AoA",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresStallwarning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/stallwarning",
                    Units = "???",
                    Description = "Stall Warning",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresOverG
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/over_g",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresOverVne
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/over_vne",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresOverVfe
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/over_vfe",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresOverVle
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/over_vle",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresOngroundAny
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/onground_any",
                    Units = "???",
                    Description = "User Aircraft is on the ground when this is set to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresOngroundAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/onground_all",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresSmoking
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/smoking",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelFailuresLoRotorWarning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/failures/lo_rotor_warning",
                    Units = "???",
                    Description = "Lo Rotor Warning",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFsideAero
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_aero",
                    Units = "Newtons",
                    Description = "Aerodynamic forces - sideways - ACF X",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFnrmlAero
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_aero",
                    Units = "Newtons",
                    Description = "Aerodynamic forces - upward - ACF Y",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFaxilAero
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_aero",
                    Units = "Newtons",
                    Description = "Aerodynamic forces - backward - ACF Z",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFsideProp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_prop",
                    Units = "Newtons",
                    Description = "force sideways by all engines on the ACF.  Override with override_engines",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFnrmlProp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_prop",
                    Units = "Newtons",
                    Description = "force upward by all engines on the ACF.  Override with override_engines  Writable in v10 only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFaxilProp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_prop",
                    Units = "Newtons",
                    Description = "force backward by all engines on the ACF (usually this is a negative number).  Override with override_engines",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFsideGear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_gear",
                    Units = "Newtons",
                    Description = "Gear/ground forces - sideways - ACF X",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFnrmlGear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_gear",
                    Units = "Newtons",
                    Description = "Gear/ground forces - upward - ACF Y",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFaxilGear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_gear",
                    Units = "Newtons",
                    Description = "Gear/ground forces - backward - ACF Z",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFsideTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_total",
                    Units = "Newtons",
                    Description = "total/ground forces - ACF X axis.  Override with override_forces",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFnrmlTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_total",
                    Units = "Newtons",
                    Description = "Total/ground forces - ACF Y axis.  Override with override_forces",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFaxilTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_total",
                    Units = "Newtons",
                    Description = "total/ground forces - ACF Z axis.  Override with override_forces",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesLAero
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_aero",
                    Units = "NM",
                    Description = "The roll moment due to aerodynamic forces - positive = right roll.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesMAero
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_aero",
                    Units = "NM",
                    Description = "The pitch moment due to aerodynamic forces - positive = pitch up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesNAero
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_aero",
                    Units = "NM",
                    Description = "The yaw moment due to aerodynamic forces - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesLProp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_prop",
                    Units = "NM",
                    Description = "The roll moment due to prop forces. Override with override_engines - positive = right roll.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesMProp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_prop",
                    Units = "NM",
                    Description = "The pitch moment due to prop forces. Override with override_engines - positive = pitch up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesNProp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_prop",
                    Units = "NM",
                    Description = "The yaw moment due to prop forces. Override with override_engines - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesLGear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_gear",
                    Units = "NM",
                    Description = "The roll moment due to gear forces - positive = right roll.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesMGear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_gear",
                    Units = "NM",
                    Description = "The pitch moment due to gear forces - positive = pitch up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesNGear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_gear",
                    Units = "NM",
                    Description = "The yaw moment due to gear forces positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesLMass
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_mass",
                    Units = "NM",
                    Description = "The roll moment due to asymmetric loading - positive = right roll.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesMMass
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_mass",
                    Units = "NM",
                    Description = "The pitch moment due to asymmetric loading - positive = pitch up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesNMass
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_mass",
                    Units = "NM",
                    Description = "The yaw moment due to asymmetric loading - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesLTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_total",
                    Units = "NM",
                    Description = "The roll moment total.  Override with override_force - positive = right roll.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesMTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_total",
                    Units = "NM",
                    Description = "The pitch moment total.  Override with override_force - positive = pitch up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesNTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_total",
                    Units = "NM",
                    Description = "The yaw moment total.  Override with override_forces - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFsidePlugAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fside_plug_acf",
                    Units = "Newtons",
                    Description = "Extra plugin-provided sideways force (ACF X axis, positive pushes airplane to the right). ADD to this dataref to apply extra force.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFnrmlPlugAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/fnrml_plug_acf",
                    Units = "Newtons",
                    Description = "Extra plugin-provided upward force (ACF Y axis, positive pushes airplane up). ADD to this dataref to apply extra force.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesFaxilPlugAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/faxil_plug_acf",
                    Units = "Newtons",
                    Description = "Extra plugin-provided forward force.  (ACF Z axis, positive pushes airplane backward). ADD to this dataref to apply extra force.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesLPlugAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/L_plug_acf",
                    Units = "NM",
                    Description = "Extra plugin-provided roll moment - ADD to this dataref to apply extra force - positive = right roll.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesMPlugAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/M_plug_acf",
                    Units = "NM",
                    Description = "Extra plugin-provided pitch moment - ADD to this dataref to apply extra force - positive = pitch up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesNPlugAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/N_plug_acf",
                    Units = "NM",
                    Description = "Extra plugin-provided yaw moment - ADD to this dataref to apply extra force - positive = yaw right/clockwise.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesGNrml
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/g_nrml",
                    Units = "Gs",
                    Description = "Total g-forces on the plane as a multiple, downward",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesGAxil
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/g_axil",
                    Units = "Gs",
                    Description = "Total g-forces on the plane as a multiple, along the plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesGSide
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/g_side",
                    Units = "Gs",
                    Description = "Total g-forces on the plane as a multiple, sideways",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesVxAirOnAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vx_air_on_acf",
                    Units = "mtr/sec",
                    Description = "Velocity of air relative to airplane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesVyAirOnAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vy_air_on_acf",
                    Units = "mtr/sec",
                    Description = "Velocity of air relative to airplane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesVzAirOnAcf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vz_air_on_acf",
                    Units = "mtr/sec",
                    Description = "Velocity of air relative to airplane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesVxAcfAxis
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vx_acf_axis",
                    Units = "mtr/sec",
                    Description = "Velocity of aircraft in its own coordinate system",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesVyAcfAxis
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vy_acf_axis",
                    Units = "mtr/sec",
                    Description = "Velocity of aircraft in its own coordinate system",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesVzAcfAxis
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/vz_acf_axis",
                    Units = "mtr/sec",
                    Description = "Velocity of aircraft in its own coordinate system",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesLiftPathAxis
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/lift_path_axis",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesDragPathAxis
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/drag_path_axis",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelForcesSidePathAxis
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/forces/side_path_axis",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscEttSize
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/ett_size",
                    Units = "???",
                    Description = "??? Slung/jettisonable load size (this should read JETT size but has a typo)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscJettSize
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/jett_size",
                    Units = "???",
                    Description = "??? Slung/jettisonable load size - this fixes the typo above.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscJettLen
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/jett_len",
                    Units = "???",
                    Description = "??? slung jettisonable load length (length of cable??!)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscGTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/g_total",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscNosewheelSpeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/nosewheel_speed",
                    Units = "???",
                    Description = "[GEAR]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscWingTiltPtch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/wing_tilt_ptch",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscWingTiltRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/wing_tilt_roll",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscJatoLeft
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/jato_left",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscDisplaceRat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/displace_rat",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscHInd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/h_ind",
                    Units = "meters",
                    Description = "Indicated barometric altitude, quite probably in feet actually.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscHInd2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/h_ind2",
                    Units = "meters",
                    Description = "Indicated barometric altitude, quite probably in feet actually.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscHIndCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/h_ind_copilot",
                    Units = "meters",
                    Description = "Indicated barometric altitude, quite probably in feet actually.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscHIndCopilot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/h_ind_copilot2",
                    Units = "meters",
                    Description = "Indicated barometric altitude, quite probably in feet actually.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscMachno
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/machno",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscQstatic
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/Qstatic",
                    Units = "psf",
                    Description = "Ambient Q",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscTurnrateRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/turnrate_roll",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscTurnrateRoll2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/turnrate_roll2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscTurnrateNoroll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/turnrate_noroll",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscTurnrateNoroll2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/turnrate_noroll2",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscSlip
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/slip",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscRocketMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/rocket_mode",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscRocketTimeout
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/rocket_timeout",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscPropOspeedTestTimeout
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/prop_ospeed_test_timeout",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscBlownFlapEngageRat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/blown_flap_engage_rat",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscLiftFanTotalPower
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/lift_fan_total_power",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscStabPtchTest
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/stab_ptch_test",
                    Units = "???",
                    Description = "Computed stability derivative - pitch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscStabHdngTest
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/stab_hdng_test",
                    Units = "???",
                    Description = "Computed Stability drivative - heading",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscCgzRefToDefault
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/cgz_ref_to_default",
                    Units = "meters",
                    Description = "Center of Gravity",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscCM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/C_m",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscCN
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/C_n",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscClOverall
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/cl_overall",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscCdOverall
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/cd_overall",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscLOD
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/l_o_d",
                    Units = "???",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscActFrcPtchLb
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_ptch_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on yoke by ACF due to pitch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscActFrcRollLb
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_roll_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on yoke by ACF due to roll",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscActFrcHdngLb
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_hdng_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on pedals by ACF due to heading",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscActFrcLbrkLb
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_lbrk_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on pedals by ACF due to left brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscActFrcRbrkLb
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/act_frc_rbrk_lb",
                    Units = "lbs",
                    Description = "Force feedback: total pounds on pedals by ACF due to right brake",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscSlungLoadX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/slung_load_x",
                    Units = "meters",
                    Description = "Global location of slung load, meters, x coordinate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscSlungLoadY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/slung_load_y",
                    Units = "meters",
                    Description = "Global location of slung load, meters, y coordinate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMiscSlungLoadZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/misc/slung_load_z",
                    Units = "meters",
                    Description = "Global location of slung load, meters, z coordinate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMovingpartsGear1def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear1def",
                    Units = "???",
                    Description = "landing gear1 def",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMovingpartsGear2def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear2def",
                    Units = "???",
                    Description = "landing gear2 def",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMovingpartsGear3def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear3def",
                    Units = "???",
                    Description = "landing gear3 def",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMovingpartsGear4def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear4def",
                    Units = "???",
                    Description = "landing gear4 def",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelMovingpartsGear5def
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/movingparts/gear5def",
                    Units = "???",
                    Description = "landing gear5 def",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_x",
                    Units = "meters",
                    Description = "The location of the plane in OpenGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_y",
                    Units = "meters",
                    Description = "The location of the plane in OpenGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_z",
                    Units = "meters",
                    Description = "The location of the plane in OpenGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLatRef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/lat_ref",
                    Units = "degrees",
                    Description = "The latitude of the point 0,0,0 in OpenGL coordinates (Writing NOT recommended!!)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLonRef
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/lon_ref",
                    Units = "degrees",
                    Description = "The longitude of the point 0,0,0 in OpenGL coordinates.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLatitude
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/latitude",
                    Units = "degrees",
                    Description = "The latitude of the aircraft",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLongitude
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/longitude",
                    Units = "degrees",
                    Description = "The longitude of the aircraft",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionElevation
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/elevation",
                    Units = "meters",
                    Description = "The elevation above MSL of the aircraft",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionTheta
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/theta",
                    Units = "degrees",
                    Description = "The pitch relative to the plane normal to the Y axis in degrees - OpenGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionPhi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/phi",
                    Units = "degrees",
                    Description = "The roll of the aircraft in degrees - OpenGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionPsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/psi",
                    Units = "degrees",
                    Description = "The true heading of the aircraft in degrees from the Z axis - OpenGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionMagpsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/magpsi",
                    Units = "degrees",
                    Description = "DO NOT USE THIS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionTrueTheta
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/true_theta",
                    Units = "degrees",
                    Description = "The pitch of the aircraft relative to the earth precisely below the aircraft",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionTruePhi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/true_phi",
                    Units = "degrees",
                    Description = "The roll of the aircraft relative to the earth precisely below the aircraft",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionTruePsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/true_psi",
                    Units = "degrees",
                    Description = "The heading of the aircraft relative to the earth precisely below the aircraft - true degrees north, always",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionMagPsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/mag_psi",
                    Units = "degrees",
                    Description = "The real magnetic heading of the aircraft - the old magpsi dataref was FUBAR",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalVx
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_vx",
                    Units = "mtr/sec",
                    Description = "The velocity in local OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalVy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_vy",
                    Units = "mtr/sec",
                    Description = "The velocity in local OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalVz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_vz",
                    Units = "mtr/sec",
                    Description = "The velocity in local OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalAx
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_ax",
                    Units = "mtr/sec2",
                    Description = "The acceleration in local OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalAy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_ay",
                    Units = "mtr/sec2",
                    Description = "The acceleration in local OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionLocalAz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/local_az",
                    Units = "mtr/sec2",
                    Description = "The acceleration in local OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionAlpha
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/alpha",
                    Units = "degrees",
                    Description = "The pitch relative to the flown path (angle of attack)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionBeta
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/beta",
                    Units = "degrees",
                    Description = "The heading relative to the flown path (yaw)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionVpath
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/vpath",
                    Units = "degrees",
                    Description = "The pitch the aircraft actually flies.  (vpath+alpha=theta)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionHpath
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/hpath",
                    Units = "degrees",
                    Description = "The heading the aircraft actually flies.  (hpath+beta=psi)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionGroundspeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/groundspeed",
                    Units = "meters/sec",
                    Description = "The ground speed of the aircraft",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionIndicatedAirspeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/indicated_airspeed",
                    Units = "kias",
                    Description = "Air speed indicated - this takes into account air density and wind direction",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionIndicatedAirspeed2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/indicated_airspeed2",
                    Units = "kias",
                    Description = "Air speed indicated - this takes into account air density and wind direction",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionTrueAirspeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/true_airspeed",
                    Units = "meters/sec",
                    Description = "Air speed true - this does not take into account air density at altitude!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionMagneticVariation
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/magnetic_variation",
                    Units = "degrees",
                    Description = "The local magnetic variation",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/M",
                    Units = "NM",
                    Description = "The angular momentum of the aircraft (relative to flight axis).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionN
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/N",
                    Units = "NM",
                    Description = "The angular momentum of the aircraft (relative to flight axis)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/L",
                    Units = "NM",
                    Description = "The angular momentum of the aircraft (relative to flight axis)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/P",
                    Units = "deg/sec",
                    Description = "The roll rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionQ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/Q",
                    Units = "deg/sec",
                    Description = "The pitch rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/R",
                    Units = "deg/sec",
                    Description = "The yaw rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionPDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/P_dot",
                    Units = "deg/sec2",
                    Description = "The roll angular acceleration (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionQDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/Q_dot",
                    Units = "deg/sec2",
                    Description = "The pitch angular acceleration (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionRDot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/R_dot",
                    Units = "deg/sec2",
                    Description = "The yaw angular acceleration rates (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionPrad
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/Prad",
                    Units = "rad/sec",
                    Description = "The roll rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionQrad
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/Qrad",
                    Units = "rad/sec",
                    Description = "The pitch rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionRrad
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/Rrad",
                    Units = "rad/sec",
                    Description = "The yaw rotation rates (relative to the flight)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionVhInd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/vh_ind",
                    Units = "meters/second",
                    Description = "VVI (vertical velocity in meters per second)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionVhIndFpm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/vh_ind_fpm",
                    Units = "fpm",
                    Description = "VVI (vertical velocity in feet per second)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionVhIndFpm2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/vh_ind_fpm2",
                    Units = "fpm",
                    Description = "VVI (vertical velocity in feet per second)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelPositionYAgl
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/position/y_agl",
                    Units = "meters",
                    Description = "AGL",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelTransmissionsXmsnPress
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/transmissions/xmsn_press",
                    Units = "???",
                    Description = "transmission pressure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelTransmissionsXmsnTemp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/transmissions/xmsn_temp",
                    Units = "???",
                    Description = "transmission temperature",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelWeightMFixed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fixed",
                    Units = "kgs",
                    Description = "Payload Weight",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelWeightMTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_total",
                    Units = "kgs",
                    Description = "Total Weight",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelWeightMFuel1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel1",
                    Units = "kgs",
                    Description = "Fuel Tank 1 Weight",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelWeightMFuel2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel2",
                    Units = "kgs",
                    Description = "Fuel Tank 2 Weight",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelWeightMFuel3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel3",
                    Units = "kgs",
                    Description = "Fuel Tank 3 Weight",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelWeightMJettison
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_jettison",
                    Units = "kgs",
                    Description = "Jettison",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement FlightmodelWeightMFuelTotal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel/weight/m_fuel_total",
                    Units = "kgs",
                    Description = "Fuel Total Weight",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationDrawObjectX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_object_x",
                    Units = "float",
                    Description = "X position in cartesian space of currently drawn object",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationDrawObjectY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_object_y",
                    Units = "float",
                    Description = "Y position in cartesian space of currently drawn object",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationDrawObjectZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_object_z",
                    Units = "float",
                    Description = "Z position in cartesian space of currently drawn object",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationDrawObjectPsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_object_psi",
                    Units = "float",
                    Description = "rotation in cartesian space of currently drawn object",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationDrawLightLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/draw_light_level",
                    Units = "float",
                    Description = "This is the default _LIT light level that the object is being drawn at, before ATTR_light_level is applied.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationAirportBeaconRotation
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/airport_beacon_rotation",
                    Units = "degrees",
                    Description = "angle this beacon is rotating (0-360)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationWindsockPsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/windsock_psi",
                    Units = "degrees",
                    Description = "windsock heading",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationWindsockThe
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/windsock_the",
                    Units = "degrees",
                    Description = "windsock pitch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationWindsockPhi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/windsock_phi",
                    Units = "degrees",
                    Description = "windsock roll",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationCranePsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/crane_psi",
                    Units = "ratio",
                    Description = "crane heading",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationBuoyHeight
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/buoy_height",
                    Units = "meters",
                    Description = "how high above MSL 0 is this buoy riding?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationPingPong2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/ping_pong_2",
                    Units = "ratio",
                    Description = "-1 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationSinWave2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/sin_wave_2",
                    Units = "ratio",
                    Description = "-1 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationObjWigwagBrightness
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/obj_wigwag_brightness",
                    Units = "ratio",
                    Description = "Brightness of the wig-wag lights - stays in sync with sim/graphics/animation/lights/wigwag",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationCarrierBlastDefLf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/carrier_blast_def_lf",
                    Units = "ratio",
                    Description = "Ratio of deployment of carrier blast door (left front)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationCarrierBlastDefRf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/carrier_blast_def_rf",
                    Units = "ratio",
                    Description = "Ratio of deployment of carrier blast door (right front)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationCarrierBlastDefLr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/carrier_blast_def_lr",
                    Units = "ratio",
                    Description = "Ratio of deployment of carrier blast door (left rear)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationCarrierBlastDefRr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/carrier_blast_def_rr",
                    Units = "ratio",
                    Description = "Ratio of deployment of carrier blast door (right rear)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationLevelCrossingGate
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/level_crossing_gate",
                    Units = "ratio",
                    Description = "Ratio of the position of all level crossing gates, 0 is up, 1 is down",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationBirdsWingFlapDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/birds/wing_flap_deg",
                    Units = "float",
                    Description = "degree of wing flap for the currently drawn bird",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationBirdsFeetRetractDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/birds/feet_retract_deg",
                    Units = "float",
                    Description = "angle the bird's feet are retracted for the flock of birds.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationDeerDeerRunCycle
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/deer/deer_run_cycle",
                    Units = "float",
                    Description = "ratio for deer running",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationDeerDeerTurnCycle
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/deer/deer_turn_cycle",
                    Units = "float",
                    Description = "ratio for deer turning",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationGroundTrafficTireSteerDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/tire_steer_deg",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationGroundTrafficTowbarHeadingDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/towbar_heading_deg",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationGroundTrafficTowbarPitchDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/towbar_pitch_deg",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsAnimationGroundTrafficBeltLoaderHeightMeters
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/animation/ground_traffic/belt_loader_height_meters",
                    Units = "TODOV11",
                    Description = "TODO",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscShowPanelClickSpots
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/show_panel_click_spots",
                    Units = "boolean",
                    Description = "Show the clickable parts of the panel?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscShowInstrumentDescriptions
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/show_instrument_descriptions",
                    Units = "boolean",
                    Description = "Show instrument descriptions on the panel?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscCockpitLightLevelR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/cockpit_light_level_r",
                    Units = "ratio",
                    Description = "The red level for the cockpit 'night' tinting, from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscCockpitLightLevelG
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/cockpit_light_level_g",
                    Units = "ratio",
                    Description = "The green level for the cockpit 'night' tinting, from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscCockpitLightLevelB
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/cockpit_light_level_b",
                    Units = "ratio",
                    Description = "The blue level for the cockpit 'night' tinting, from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscOutsideLightLevelR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/outside_light_level_r",
                    Units = "ratio",
                    Description = "The red level for the world, from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscOutsideLightLevelG
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/outside_light_level_g",
                    Units = "ratio",
                    Description = "The green level for the world, from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscOutsideLightLevelB
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/outside_light_level_b",
                    Units = "ratio",
                    Description = "The blue level for the world, from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscLightAttenuation
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/light_attenuation",
                    Units = "ratio",
                    Description = "Amount that artificial light is dimmed due to the sun's magnitude",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscUseProportionalFonts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/use_proportional_fonts",
                    Units = "boolean",
                    Description = "Set this to 1 to enable proportional fonts when available.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscKillMapFmsLine
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/kill_map_fms_line",
                    Units = "boolean",
                    Description = "If set to true, the map instruments won't draw the red FMS course line. SET THIS BACK TO 0 WHEN YOUR PLANE UNLOADS!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscRedFlashlightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/red_flashlight_on",
                    Units = "boolean",
                    Description = "Is the red flashlight on now.  Note that the flashlight is inop when HDR is off.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscWhiteFlashlightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/white_flashlight_on",
                    Units = "boolean",
                    Description = "Is the white flashlight on now.  Note that the flashlight is inop when HDR is off.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscDefaultScrollPos
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/default_scroll_pos",
                    Units = "pixels",
                    Description = "Default position for a scrolling plane panel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscCurrentScrollPos
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/current_scroll_pos",
                    Units = "pixels",
                    Description = "Current position of that panel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscDefaultScrollPosX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/default_scroll_pos_x",
                    Units = "pixels",
                    Description = "Default position for a scrolling plane panel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsMiscCurrentScrollPosX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/misc/current_scroll_pos_x",
                    Units = "pixels",
                    Description = "Current position of that panel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSceneryCurrentPlanet
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/current_planet",
                    Units = "enum",
                    Description = "What planet are we on?  (Earth = 0, mars = 1)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSceneryPercentLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/percent_lights_on",
                    Units = "percent",
                    Description = "what percentage of city lites are on as night hits",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsScenerySunPitchDegrees
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/sun_pitch_degrees",
                    Units = "degrees",
                    Description = "sun pitch from flat in OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsScenerySunHeadingDegrees
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/sun_heading_degrees",
                    Units = "degrees",
                    Description = "sun heading from true north in OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSceneryMoonPitchDegrees
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/moon_pitch_degrees",
                    Units = "degrees",
                    Description = "moon pitch from flat in OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSceneryMoonHeadingDegrees
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/moon_heading_degrees",
                    Units = "degrees",
                    Description = "moon heading from true north in OGL coordinates",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSceneryAirportLightLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/airport_light_level",
                    Units = "ratio",
                    Description = "Level of airport light illumination, 0 = off, 1 = max brightness",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSceneryAirportLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/airport_lights_on",
                    Units = "boolean",
                    Description = "Are the airport lites on?  set override_airport_lites to 1t o write this.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSceneryAsyncSceneryLoadInProgress
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/scenery/async_scenery_load_in_progress",
                    Units = "boolean",
                    Description = "True when some kind of asynchronous scenery load or unload is in progress.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSettingsRenderingRes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/settings/rendering_res",
                    Units = "int",
                    Description = "Texture Rendering Level",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSettingsDimGload
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/settings/dim_gload",
                    Units = "boolean",
                    Description = "dim under high g-load?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSettingsDrawForestfires
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/settings/draw_forestfires",
                    Units = "boolean",
                    Description = "draw forest fires?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSettingsNonProportionalVerticalFOV
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/settings/non_proportional_vertical_FOV",
                    Units = "boolean",
                    Description = "FOV is non proportional, use if sim/graphics/view/vertical_field_of_view_deg needs to be written to.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSettingsHDROn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/settings/HDR_on",
                    Units = "boolean",
                    Description = "True if HDR rendering is enabled.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsSettingsScatteringOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/settings/scattering_on",
                    Units = "boolean",
                    Description = "True if atmospheric scattering is enabled.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewViewType
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/view_type",
                    Units = "enum",
                    Description = "The current camera view",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelRenderType
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_render_type",
                    Units = "enum",
                    Description = "How to draw the panel?  0=2-d panel, 1=3-d, non-lit, 2=3-d, lit",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelRenderNewBlending
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_render_new_blending",
                    Units = "boolean",
                    Description = "True if modern correct RGBA blending is being used to draw panels; false if the legacy alpha-max equation is being used.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewWorldRenderType
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/world_render_type",
                    Units = "enum",
                    Description = "What kind of 3-d rendering pass are we on? 0=normal,1=reflections in water",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPlaneRenderType
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/plane_render_type",
                    Units = "enum",
                    Description = "What kind of rendering is being done during the xplm_Phase_Airplanes callback.  solid = 1, blended/alpha = 2 (0 = N/A, outside draw callback)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewViewIsExternal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/view_is_external",
                    Units = "boolean",
                    Description = "Is the view in the cockpit or outside?  Affects sound!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewViewX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/view_x",
                    Units = "OGLcoords",
                    Description = "The location of the camera, X coordinate (OpenGL)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewViewY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/view_y",
                    Units = "OGLcoords",
                    Description = "The location of the camera, Y coordinate (OpenGL)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewViewZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/view_z",
                    Units = "OGLcoords",
                    Description = "The location of the camera, Z coordinate (OpenGL)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewViewPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/view_pitch",
                    Units = "degrees",
                    Description = "The camera's pitch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewViewRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/view_roll",
                    Units = "degrees",
                    Description = "The camera's roll",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewViewHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/view_heading",
                    Units = "degrees",
                    Description = "the camera's heading, CW frmo true north",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewCockpitPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/cockpit_pitch",
                    Units = "degrees",
                    Description = "The cockpit's pitch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewCockpitRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/cockpit_roll",
                    Units = "degrees",
                    Description = "The cockpit's heading (the dataref name is wrong - this is really true heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewCockpitHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/cockpit_heading",
                    Units = "degrees",
                    Description = "the cockpit's roll (the dataref is name wrong - this is really roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewFieldOfViewDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_deg",
                    Units = "degrees",
                    Description = "horizontal field of view in degrees",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewVerticalFieldOfViewDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/vertical_field_of_view_deg",
                    Units = "degrees",
                    Description = "vertical field of view in degrees, see sim/graphics/settings/non_proportional_vertical_FOV.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewFieldOfViewVerticalDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_vertical_deg",
                    Units = "degrees",
                    Description = "pitch rotation for multi-monitor setup.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewFieldOfViewHorizontalDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_horizontal_deg",
                    Units = "degrees",
                    Description = "heading rotation for multi-monitor setup.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewFieldOfViewRollDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_roll_deg",
                    Units = "degrees",
                    Description = "Roll rotation for multi-monitor setup.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewFieldOfViewHorizontalRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/field_of_view_horizontal_ratio",
                    Units = "ratio",
                    Description = "horizontal frustum shift (xp 6,7,8,10) - 1 unit shifts frustum by screen width",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewWindowWidth
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/window_width",
                    Units = "pixels",
                    Description = "Size of rendering window",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewWindowHeight
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/window_height",
                    Units = "pixels",
                    Description = "Size of rendering window",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewVisibilityEffectiveM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/visibility_effective_m",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewVisibilityTerrainM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/visibility_terrain_m",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewVisibilityFramerateRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/visibility_framerate_ratio",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewVisibilityMathLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/visibility_math_level",
                    Units = "enum",
                    Description = "This used to indicate what level of 3-d force visualization was shown to the user in 3-d.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewCinemaVerite
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/cinema_verite",
                    Units = "boolean",
                    Description = "True if cinema verite camera is on.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelTotalPnlL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_pnl_l",
                    Units = "pixels",
                    Description = "This is the location of the left edge of the panel, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelTotalPnlB
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_pnl_b",
                    Units = "pixels",
                    Description = "This is the location of the bottom edge of the panel, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelTotalPnlR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_pnl_r",
                    Units = "pixels",
                    Description = "This is the location of the right edge of the panel, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelTotalPnlT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_pnl_t",
                    Units = "pixels",
                    Description = "This is the location of the top edge of the panel, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelVisiblePnlL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_pnl_l",
                    Units = "pixels",
                    Description = "This is the location of the left edge of the screen, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelVisiblePnlB
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_pnl_b",
                    Units = "pixels",
                    Description = "This is the location of the bottom edge of the screen, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelVisiblePnlR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_pnl_r",
                    Units = "pixels",
                    Description = "This is the location of the right edge of the screen, in the coordinate system used during panel drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelVisiblePnlT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_pnl_t",
                    Units = "pixels",
                    Description = "This is the location of the top edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelTotalWinL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_win_l",
                    Units = "pixels",
                    Description = "This is the location of the left edge of the panel, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelTotalWinB
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_win_b",
                    Units = "pixels",
                    Description = "This is the location of the bottom edge of the panel, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelTotalWinR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_win_r",
                    Units = "pixels",
                    Description = "This is the location of the right edge of the panel, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelTotalWinT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_total_win_t",
                    Units = "pixels",
                    Description = "This is the location of the top edge of the panel, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelVisibleWinL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_win_l",
                    Units = "pixels",
                    Description = "This is the location of the left edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelVisibleWinB
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_win_b",
                    Units = "pixels",
                    Description = "This is the location of the bottom edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelVisibleWinR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_win_r",
                    Units = "pixels",
                    Description = "This is the location of the right edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPanelVisibleWinT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/panel_visible_win_t",
                    Units = "pixels",
                    Description = "This is the location of the top edge of the screen, in the coordinate system used during plugin window drawing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPilotsHeadX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_x",
                    Units = "meters",
                    Description = "Position of pilot's head relative to CG, X",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPilotsHeadY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_y",
                    Units = "meters",
                    Description = "Position of pilot's head relative to CG, Y",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPilotsHeadZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_z",
                    Units = "meters",
                    Description = "Position of pilot's head relative to CG, Z",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPilotsHeadPsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_psi",
                    Units = "degrees",
                    Description = "Position of pilot's head heading",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPilotsHeadThe
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_the",
                    Units = "degrees",
                    Description = "Position of pilot's head pitch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewPilotsHeadPhi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/pilots_head_phi",
                    Units = "degrees",
                    Description = "Position of the pilot's head roll'",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewClick3dX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/click_3d_x",
                    Units = "0-1",
                    Description = "coordinates of the panel click in 3-d",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewClick3dY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/click_3d_y",
                    Units = "0-1",
                    Description = "as texture coords (E.g. 0-1)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewClick3dXPixels
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/click_3d_x_pixels",
                    Units = "0-1",
                    Description = "coordinates of the panel click in 3-d",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewClick3dYPixels
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/click_3d_y_pixels",
                    Units = "0-1",
                    Description = "as texture coords (E.g. 0-1)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewLocalMapL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/local_map_l",
                    Units = "pixels",
                    Description = "Bounds of the local map window during callbacks - left",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewLocalMapB
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/local_map_b",
                    Units = "pixels",
                    Description = "Bounds of the local map window during callbacks - bottom",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewLocalMapR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/local_map_r",
                    Units = "pixels",
                    Description = "Bounds of the local map window during callbacks - right",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewLocalMapT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/local_map_t",
                    Units = "pixels",
                    Description = "Bounds of the local map window during callbacks - top",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewDomeNumberOfPasses
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/dome_number_of_passes",
                    Units = "count",
                    Description = "This is the number of passes to render for a multi-dome setup.  This x-plane feature requires a level-3 USB KEY",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewEqTrackir
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/eq_trackir",
                    Units = "boolean",
                    Description = "Does the user have trackIR hardware enabled",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement GraphicsViewHideYoke
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/graphics/view/hide_yoke",
                    Units = "boolean",
                    Description = "Is the yoke visible in the 3-d cockpit?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickHasJoystick
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/has_joystick",
                    Units = "boolean",
                    Description = "Do we have a joystick?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickMouseIsJoystick
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/mouse_is_joystick",
                    Units = "boolean",
                    Description = "Is the mouse acting as a joystick?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickMouseCanBeJoystick
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/mouse_can_be_joystick",
                    Units = "boolean",
                    Description = "Can the mouse be used to fly?  False if there is any LEGIT hardware plugged in.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickYokePitchRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/yoke_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the joystick axis controlling pitch. Use override_joystick or override_joystick_pitch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickYolkPitchRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/yolk_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "Legacy - this spelling error is still present for",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickYokeRollRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/yoke_roll_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the joystick axis controlling roll. Use override_joystick or override_joystick_roll",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickYolkRollRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/yolk_roll_ratio",
                    Units = "[-1..1]",
                    Description = "Legacy - this spelling error is still present for backward compatibility with older plugins.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickYokeHeadingRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/yoke_heading_ratio",
                    Units = "[-1..1]",
                    Description = "The deflection of the joystick axis controlling yaw. Use override_joystick or override_joystick_heading",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickYolkHeadingRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/yolk_heading_ratio",
                    Units = "[-1..1]",
                    Description = "Legacy - this spelling error is still present for backward compatibility with older plugins.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickArtstabPitchRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/artstab_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "The artificial stability input modifications for pitch. Use override_artstab",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickArtstabRollRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/artstab_roll_ratio",
                    Units = "[-1..1]",
                    Description = "The artificial stability input modifications for roll. Use override_artstab",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickArtstabHeadingRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/artstab_heading_ratio",
                    Units = "[-1..1]",
                    Description = "The artificial stability input modifications for yaw. Use override_artstab",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickServoPitchRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/servo_pitch_ratio",
                    Units = "[-1..1]",
                    Description = "Servo input for pitch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickServoRollRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/servo_roll_ratio",
                    Units = "[-1..1]",
                    Description = "Servo input for roll",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickServoHeadingRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/servo_heading_ratio",
                    Units = "[-1..1]",
                    Description = "Servo input for yaw",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickFCHdng
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/FC_hdng",
                    Units = "[-1..1]",
                    Description = "Flight Control Heading (sum of yoke plus artificial stability)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickFCPtch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/FC_ptch",
                    Units = "[-1..1]",
                    Description = "Flight Control Pitch (sum of yoke plus artificial stability)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickFCRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/FC_roll",
                    Units = "[-1..1]",
                    Description = "Flight Control Roll (sum of yoke plus artificial stability)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickPitchNullzone
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_pitch_nullzone",
                    Units = "ratio",
                    Description = "The nullzone size for the pitch axis (as of 940, one null zone serves all 3 axes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickRollNullzone
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_roll_nullzone",
                    Units = "ratio",
                    Description = "The nullzone size for the roll axis",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickHeadingNullzone
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_heading_nullzone",
                    Units = "ratio",
                    Description = "The nullzone size for the heading axis",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickPitchCenter
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_pitch_center",
                    Units = "ratio",
                    Description = "Joystick center for pitch axis",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickRollCenter
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_roll_center",
                    Units = "ratio",
                    Description = "Joystick center for roll axis",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickHeadingCenter
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_heading_center",
                    Units = "ratio",
                    Description = "Joystick center for heading axis",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickPitchAugment
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_pitch_augment",
                    Units = "ratio",
                    Description = "Amount of artificial stability to add to the pitch.  This is AS set by user, not in Plane-Maker.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickRollAugment
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_roll_augment",
                    Units = "ratio",
                    Description = "Amount of artificial stability to add to the roll.  This is AS set by user, not in Plane-Maker.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickHeadingAugment
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_heading_augment",
                    Units = "ratio",
                    Description = "Amount of artificial stability to add to the heading.  This is AS set by user, not in Plane-Maker.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickPitchSensitivity
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_pitch_sensitivity",
                    Units = "ratio",
                    Description = "The sensitivity for the pitch axis (the power ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickRollSensitivity
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_roll_sensitivity",
                    Units = "ratio",
                    Description = "The sensitivity for the roll axis",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickJoystickHeadingSensitivity
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/joystick_heading_sensitivity",
                    Units = "ratio",
                    Description = "The sensitivity for the heading axis",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPedNobrk
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_ped_nobrk",
                    Units = "boolean",
                    Description = "Hardware settings: Pedal nobrk (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPedWibrk
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_ped_wibrk",
                    Units = "boolean",
                    Description = "Hardware settings: Pedal wlbrk (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPfcPedals
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_pedals",
                    Units = "boolean",
                    Description = "Equipment settings: PFC pedal (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPfcYoke
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_yoke",
                    Units = "boolean",
                    Description = "Equipment settings: PFC yoke (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPfcThrot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_throt",
                    Units = "boolean",
                    Description = "Equipment settings: PFC throttle (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPfcAvio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_avio",
                    Units = "boolean",
                    Description = "Equipment settings: PFC avionics (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPfcCentercon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_centercon",
                    Units = "boolean",
                    Description = "Equipment settings: PFC center console (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPfcElecTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_elec_trim",
                    Units = "boolean",
                    Description = "Equipment settings: PFC electric trim (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPfcBrakeTog
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_brake_tog",
                    Units = "boolean",
                    Description = "Equipment settings: PFC brake toggle (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickEqPfcDualCowl
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/eq_pfc_dual_cowl",
                    Units = "boolean",
                    Description = "Equipment settings: PFC dual cowl (writable since 930 to auto-set user preferences)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickFireKeyIsDown
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/fire_key_is_down",
                    Units = "boolean",
                    Description = "True if the fire key is held down",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickHasCertifiedRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/has_certified_roll",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the roll.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickHasCertifiedPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/has_certified_pitch",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the pitch.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickHasCertifiedHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/has_certified_heading",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the heading.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickHasCertifiedBrakes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/has_certified_brakes",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the brakes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickHasCertifiedThrottle
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/has_certified_throttle",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the throttle.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickHasCertifiedProp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/has_certified_prop",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the pitch.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement JoystickHasCertifiedMixture
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/joystick/has_certified_mixture",
                    Units = "boolean",
                    Description = "True if there is FAA-certified hardware controlling the mixture.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_x",
                    Units = "meters",
                    Description = "Plane 1 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_y",
                    Units = "meters",
                    Description = "Plane 1 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_z",
                    Units = "meters",
                    Description = "Plane 1 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_the",
                    Units = "degrees",
                    Description = "Plane 1 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_phi",
                    Units = "degrees",
                    Description = "Plane 1 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_psi",
                    Units = "degrees",
                    Description = "Plane 1 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 1 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 1 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1SlatRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_slat_ratio",
                    Units = "ratio",
                    Description = "Plane 1 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 1 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 1 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 1 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 1 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_x",
                    Units = "meters",
                    Description = "Plane 2 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_y",
                    Units = "meters",
                    Description = "Plane 2 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_z",
                    Units = "meters",
                    Description = "Plane 2 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_the",
                    Units = "degrees",
                    Description = "Plane 2 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_phi",
                    Units = "degrees",
                    Description = "Plane 2 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_psi",
                    Units = "degrees",
                    Description = "Plane 2 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 2 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 2 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 2 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 2 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 2 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 2 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 2 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 2 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_x",
                    Units = "meters",
                    Description = "Plane 3 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_y",
                    Units = "meters",
                    Description = "Plane 3 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_z",
                    Units = "meters",
                    Description = "Plane 3 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_the",
                    Units = "degrees",
                    Description = "Plane 3 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_phi",
                    Units = "degrees",
                    Description = "Plane 3 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_psi",
                    Units = "degrees",
                    Description = "Plane 3 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 3 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 3 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 3 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 3 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 3 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 3 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 3 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 3 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_x",
                    Units = "meters",
                    Description = "Plane 4 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_y",
                    Units = "meters",
                    Description = "Plane 4 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_z",
                    Units = "meters",
                    Description = "Plane 4 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_the",
                    Units = "degrees",
                    Description = "Plane 4 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_phi",
                    Units = "degrees",
                    Description = "Plane 4 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_psi",
                    Units = "degrees",
                    Description = "Plane 4 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 4 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 4 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 4 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 4 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 4 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 4 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 4 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 4 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_x",
                    Units = "meters",
                    Description = "Plane 5 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_y",
                    Units = "meters",
                    Description = "Plane 5 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_z",
                    Units = "meters",
                    Description = "Plane 5 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_the",
                    Units = "degrees",
                    Description = "Plane 5 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_phi",
                    Units = "degrees",
                    Description = "Plane 5 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_psi",
                    Units = "degrees",
                    Description = "Plane 5 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 5 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 5 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 5 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 5 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 5 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 5 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 5 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 5 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_x",
                    Units = "meters",
                    Description = "Plane 6 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_y",
                    Units = "meters",
                    Description = "Plane 6 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_z",
                    Units = "meters",
                    Description = "Plane 6 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_the",
                    Units = "degrees",
                    Description = "Plane 6 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_phi",
                    Units = "degrees",
                    Description = "Plane 6 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_psi",
                    Units = "degrees",
                    Description = "Plane 6 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 6 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 6 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 6 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 6 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 6 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 6 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 6 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 6 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_x",
                    Units = "meters",
                    Description = "Plane 7 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_y",
                    Units = "meters",
                    Description = "Plane 7 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_z",
                    Units = "meters",
                    Description = "Plane 7 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_the",
                    Units = "degrees",
                    Description = "Plane 7 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_phi",
                    Units = "degrees",
                    Description = "Plane 7 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_psi",
                    Units = "degrees",
                    Description = "Plane 7 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 7 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 7 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 7 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 7 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 7 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 7 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 7 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 7 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_x",
                    Units = "meters",
                    Description = "Plane 8 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_y",
                    Units = "meters",
                    Description = "Plane 8 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_z",
                    Units = "meters",
                    Description = "Plane 8 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_the",
                    Units = "degrees",
                    Description = "Plane 8 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_phi",
                    Units = "degrees",
                    Description = "Plane 8 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_psi",
                    Units = "degrees",
                    Description = "Plane 8 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 8 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 8 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 8 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 8 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 8 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 8 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 8 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 8 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_x",
                    Units = "meters",
                    Description = "Plane 9 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_y",
                    Units = "meters",
                    Description = "Plane 9 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_z",
                    Units = "meters",
                    Description = "Plane 9 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_the",
                    Units = "degrees",
                    Description = "Plane 9 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_phi",
                    Units = "degrees",
                    Description = "Plane 9 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_psi",
                    Units = "degrees",
                    Description = "Plane 9 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 9 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 1 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 9 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 9 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 9 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 9 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 9 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 9 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 9 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_lat",
                    Units = "degs",
                    Description = "Plane 1 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_v_x",
                    Units = "m/s",
                    Description = "Plane 1 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_lat",
                    Units = "degs",
                    Description = "Plane 2 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_v_x",
                    Units = "m/s",
                    Description = "Plane 2 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_lat",
                    Units = "degs",
                    Description = "Plane 3 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_v_x",
                    Units = "m/s",
                    Description = "Plane 3 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_lat",
                    Units = "degs",
                    Description = "Plane 4 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_v_x",
                    Units = "m/s",
                    Description = "Plane 4 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_lat",
                    Units = "degs",
                    Description = "Plane 5 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_v_x",
                    Units = "m/s",
                    Description = "Plane 5 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_lat",
                    Units = "degs",
                    Description = "Plane 6 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_v_x",
                    Units = "m/s",
                    Description = "Plane 6 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_lat",
                    Units = "degs",
                    Description = "Plane 7 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_v_x",
                    Units = "m/s",
                    Description = "Plane 7 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_lat",
                    Units = "degs",
                    Description = "Plane 8 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_v_x",
                    Units = "m/s",
                    Description = "Plane 8 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_lat",
                    Units = "degs",
                    Description = "Plane 9 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_v_x",
                    Units = "m/s",
                    Description = "Plane 9 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 1 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 1 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 1 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 1 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane1TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane1_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 1 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 2 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 2 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 2 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 2 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane2TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane2_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 2 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 3 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 3 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 3 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 3 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane3TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane3_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 3 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 4 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 4 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 4 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 4 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane4TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane4_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 4 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 5 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 5 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 5 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 5 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane5TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane5_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 5 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 6 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 6 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 6 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 6 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane6TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane6_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 6 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 7 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 7 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 7 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 7 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane7TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane7_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 7 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 8 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 8 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 8 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 8 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane8TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane8_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 8 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 9 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 9 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 9 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 9 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane9TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane9_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 9 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 10 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 10 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 10 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 10 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 10 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 11 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 11 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 11 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 11 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 11 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 12 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 12 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 12 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 12 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 12 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 13 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 13 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 13 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 13 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 13 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 14 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 14 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 14 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 14 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 14 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 15 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 15 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 15 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 15 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 15 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 16 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 16 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 16 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 16 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 16 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 17 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 17 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 17 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 17 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 17 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 18 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 18 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 18 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 18 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 18 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19BeaconLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_beacon_lights_on",
                    Units = "bool",
                    Description = "Plane 19 Beacon Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19LandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_landing_lights_on",
                    Units = "bool",
                    Description = "Plane 19 Landing Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19NavLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_nav_lights_on",
                    Units = "bool",
                    Description = "Plane 19 Navigation Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19StrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_strobe_lights_on",
                    Units = "bool",
                    Description = "Plane 19 Strobe Light",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19TaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_taxi_light_on",
                    Units = "bool",
                    Description = "Plane 19 Taxi Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_x",
                    Units = "meters",
                    Description = "Plane 10 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_y",
                    Units = "meters",
                    Description = "Plane 10 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_z",
                    Units = "meters",
                    Description = "Plane 10 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_the",
                    Units = "degrees",
                    Description = "Plane 10 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_phi",
                    Units = "degrees",
                    Description = "Plane 10 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_psi",
                    Units = "degrees",
                    Description = "Plane 10 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 10 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 10 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 10 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 10 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 10 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 10 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 10 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 10 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 10 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_lat",
                    Units = "degs",
                    Description = "Plane 10 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_v_x",
                    Units = "m/s",
                    Description = "Plane 10 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane10VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane10_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_x",
                    Units = "meters",
                    Description = "Plane 11 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_y",
                    Units = "meters",
                    Description = "Plane 11 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_z",
                    Units = "meters",
                    Description = "Plane 11 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_the",
                    Units = "degrees",
                    Description = "Plane 11 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_phi",
                    Units = "degrees",
                    Description = "Plane 11 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_psi",
                    Units = "degrees",
                    Description = "Plane 11 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 11 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 11 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 11 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 11 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 11 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 11 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 11 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 11 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 11 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_lat",
                    Units = "degs",
                    Description = "Plane 11 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_v_x",
                    Units = "m/s",
                    Description = "Plane 11 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane11VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane11_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_x",
                    Units = "meters",
                    Description = "Plane 12 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_y",
                    Units = "meters",
                    Description = "Plane 12 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_z",
                    Units = "meters",
                    Description = "Plane 12 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_the",
                    Units = "degrees",
                    Description = "Plane 12 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_phi",
                    Units = "degrees",
                    Description = "Plane 12 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_psi",
                    Units = "degrees",
                    Description = "Plane 12 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 12 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 12 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 12 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 12 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 12 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 12 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 12 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 12 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 12 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_lat",
                    Units = "degs",
                    Description = "Plane 12 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_v_x",
                    Units = "m/s",
                    Description = "Plane 12 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane12VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane12_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_x",
                    Units = "meters",
                    Description = "Plane 13 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_y",
                    Units = "meters",
                    Description = "Plane 13 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_z",
                    Units = "meters",
                    Description = "Plane 13 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_the",
                    Units = "degrees",
                    Description = "Plane 13 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_phi",
                    Units = "degrees",
                    Description = "Plane 13 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_psi",
                    Units = "degrees",
                    Description = "Plane 13 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 13 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 13 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 13 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 13 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 13 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 13 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 13 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 13 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 13 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_lat",
                    Units = "degs",
                    Description = "Plane 13 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_v_x",
                    Units = "m/s",
                    Description = "Plane 13 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane13VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane13_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_x",
                    Units = "meters",
                    Description = "Plane 14 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_y",
                    Units = "meters",
                    Description = "Plane 14 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_z",
                    Units = "meters",
                    Description = "Plane 14 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_the",
                    Units = "degrees",
                    Description = "Plane 14 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_phi",
                    Units = "degrees",
                    Description = "Plane 14 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_psi",
                    Units = "degrees",
                    Description = "Plane 14 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 14 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 14 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 14 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 14 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 14 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 14 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 14 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 14 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 14 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_lat",
                    Units = "degs",
                    Description = "Plane 14 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_v_x",
                    Units = "m/s",
                    Description = "Plane 14 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane14VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane14_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_x",
                    Units = "meters",
                    Description = "Plane 15 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_y",
                    Units = "meters",
                    Description = "Plane 15 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_z",
                    Units = "meters",
                    Description = "Plane 15 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_the",
                    Units = "degrees",
                    Description = "Plane 15 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_phi",
                    Units = "degrees",
                    Description = "Plane 15 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_psi",
                    Units = "degrees",
                    Description = "Plane 15 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 15 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 15 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 15 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 15 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 15 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 15 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 15 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 15 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 15 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_lat",
                    Units = "degs",
                    Description = "Plane 15 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_v_x",
                    Units = "m/s",
                    Description = "Plane 15 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane15VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane15_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_x",
                    Units = "meters",
                    Description = "Plane 16 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_y",
                    Units = "meters",
                    Description = "Plane 16 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_z",
                    Units = "meters",
                    Description = "Plane 16 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_the",
                    Units = "degrees",
                    Description = "Plane 16 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_phi",
                    Units = "degrees",
                    Description = "Plane 16 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_psi",
                    Units = "degrees",
                    Description = "Plane 16 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 16 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 16 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 16 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 16 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 16 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 16 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 16 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 16 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 16 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_lat",
                    Units = "degs",
                    Description = "Plane 16 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_v_x",
                    Units = "m/s",
                    Description = "Plane 16 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane16VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane16_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_x",
                    Units = "meters",
                    Description = "Plane 17 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_y",
                    Units = "meters",
                    Description = "Plane 17 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_z",
                    Units = "meters",
                    Description = "Plane 17 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_the",
                    Units = "degrees",
                    Description = "Plane 17 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_phi",
                    Units = "degrees",
                    Description = "Plane 17 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_psi",
                    Units = "degrees",
                    Description = "Plane 17 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 17 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 17 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 17 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 17 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 17 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 17 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 17 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 17 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 17 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_lat",
                    Units = "degs",
                    Description = "Plane 17 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_v_x",
                    Units = "m/s",
                    Description = "Plane 17 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane17VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane17_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_x",
                    Units = "meters",
                    Description = "Plane 18 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_y",
                    Units = "meters",
                    Description = "Plane 18 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_z",
                    Units = "meters",
                    Description = "Plane 18 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_the",
                    Units = "degrees",
                    Description = "Plane 18 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_phi",
                    Units = "degrees",
                    Description = "Plane 18 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_psi",
                    Units = "degrees",
                    Description = "Plane 18 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 18 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 18 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 18 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 18 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 18 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 18 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 18 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 18 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 18 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_lat",
                    Units = "degs",
                    Description = "Plane 18 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_v_x",
                    Units = "m/s",
                    Description = "Plane 18 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane18VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane18_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19X
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_x",
                    Units = "meters",
                    Description = "Plane 19 x location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19Y
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_y",
                    Units = "meters",
                    Description = "Plane 19 y location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19Z
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_z",
                    Units = "meters",
                    Description = "Plane 19 z location",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19The
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_the",
                    Units = "degrees",
                    Description = "Plane 19 theta (pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19Phi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_phi",
                    Units = "degrees",
                    Description = "Plane 19 phi (roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19Psi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_psi",
                    Units = "degrees",
                    Description = "Plane 19 psi (heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19FlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_flap_ratio",
                    Units = "ratio",
                    Description = "Plane 19 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19FlapRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_flap_ratio2",
                    Units = "ratio",
                    Description = "Plane 19 flap lowering 0 = clean, 1 = max flaps",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19SpoilerRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_spoiler_ratio",
                    Units = "ratio",
                    Description = "Plane 19 spoiler ratio (0 = clean, 1 = max spoilers)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19SpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_speedbrake_ratio",
                    Units = "ratio",
                    Description = "Plane 19 speed brake ratio (0 = clean, 1 = max speed brakes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19Sla1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_sla1_ratio",
                    Units = "ratio",
                    Description = "Plane 19 slat deployment ratio 0 = clean, 1 = max slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19WingSweep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_wing_sweep",
                    Units = "ratio",
                    Description = "Plane 19 wing sweep, 0 = normal, 1 = most sweep",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19YolkPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_yolk_pitch",
                    Units = "ratio",
                    Description = "Plane 19 Commanded pitch (Legacy for compatibility - use sim/multiplayer/controls/yoke_pitch_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19YolkRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_yolk_roll",
                    Units = "ratio",
                    Description = "Plane 19 Commanded roll (Legacy for compatibility - use sim/multiplayer/controls/yoke_roll_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19YolkYaw
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_yolk_yaw",
                    Units = "ratio",
                    Description = "Plane 19 Commanded yaw (Legacy for compatibility - use sim/multiplayer/controls/yoke_heading_ratio)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19Lat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_lat",
                    Units = "degs",
                    Description = "Plane 19 Lat lon and elevation.  NOTE: your plugin must set the plane's",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19Lon
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_lon",
                    Units = "degs",
                    Description = "position by writing x, y and z.  Also if another plugin is updating plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19El
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_el",
                    Units = "meters",
                    Description = "position then these will not be accurate unless the plane updates them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19VX
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_v_x",
                    Units = "m/s",
                    Description = "Plane 19 cartesian velocities.  These may not be accurate if another plugin",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19VY
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_v_y",
                    Units = "m/s",
                    Description = "is controlling the plane andn ot updating this data.  You cannot use these to",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement MultiplayerPositionPlane19VZ
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/multiplayer/position/plane19_v_z",
                    Units = "m/s",
                    Description = "manipulate the plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkDataoutNetworkDataRate
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/dataout/network_data_rate",
                    Units = "hz",
                    Description = "Rate to send data over UDP at",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkDataoutDumpPartsProps
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/dataout/dump_parts_props",
                    Units = "boolean",
                    Description = "Dump extra prop data to screen",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkDataoutDumpPartsWings
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/dataout/dump_parts_wings",
                    Units = "boolean",
                    Description = "Dump wing prop data to screen",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkDataoutDumpPartsVstabs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/dataout/dump_parts_vstabs",
                    Units = "boolean",
                    Description = "Dump vertical stabilizer prop data to screen",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkDataoutIsExternalVisual
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/dataout/is_external_visual",
                    Units = "boolean",
                    Description = "Is this machine running as an external visual for another X-Plane machine.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkDataoutIsMultiplayerSession
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/dataout/is_multiplayer_session",
                    Units = "boolean",
                    Description = "Is this machine part of an x-plane built-in multiplayer session?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkDataoutIsInstructorStation
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/dataout/is_instructor_station",
                    Units = "boolean",
                    Description = "Is this machine running in instructor-station mode?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkMiscOpentransportInited
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/misc/opentransport_inited",
                    Units = "boolean",
                    Description = "Has x-plane already inited Open Transport?  YOU SHOULD NEVER USE THIS DATAREF!!!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement NetworkMiscNetworkTimeSec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/network/misc/network_time_sec",
                    Units = "seconds",
                    Description = "The current elapsed time synched across the network",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsEarthMu
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/earth_mu",
                    Units = "m^3/s^2",
                    Description = "The earth's mass-gravity constant",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsEarthRadiusM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/earth_radius_m",
                    Units = "meters",
                    Description = "Earth's radius",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsEarthTempC
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/earth_temp_c",
                    Units = "celsius",
                    Description = "Average sea level temp, current planet",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsEarthPressureP
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/earth_pressure_p",
                    Units = "pascals",
                    Description = "average pressure at sea level, current planet",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsRhoSeaLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/rho_sea_level",
                    Units = "???",
                    Description = "rho at sea level, current planet",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsGSealevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/g_sealevel",
                    Units = "???",
                    Description = "gravitational acceleration of earth AT SEA LEVEL",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsRhoWater
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/rho_water",
                    Units = "???",
                    Description = "rho of water",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsMetricTemp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/metric_temp",
                    Units = "boolean",
                    Description = "Are we showing metric temperature indications",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement PhysicsMetricPress
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/physics/metric_press",
                    Units = "boolean",
                    Description = "Are we showing metric pressure indications",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresHydraulicPressureRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/hydraulic_pressure_ratio",
                    Units = "ratio",
                    Description = "Hydraulic pressure ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresHydraulicPressureRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/hydraulic_pressure_ratio2",
                    Units = "ratio",
                    Description = "Hydraulic pressure ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresEnableRandomFalures
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/enable_random_falures",
                    Units = "boolean",
                    Description = "Enable random failures based on mean time between failures",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresEnableRandomFailures
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/enable_random_failures",
                    Units = "boolean",
                    Description = "Enable random failures basde on mean time between failures",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresMeanTimeBetweenFailureHrs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/mean_time_between_failure_hrs",
                    Units = "hours",
                    Description = "Mean time between failures",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRamAirTurbineOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/ram_air_turbine_on",
                    Units = "boolean",
                    Description = "Ram air turbine is on?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelConlock
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_conlock",
                    Units = "failure_enum",
                    Description = "Controls locked",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelDoorOpen
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_door_open",
                    Units = "failure_enum",
                    Description = "Door Open",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelExPowerOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ex_power_on",
                    Units = "failure_enum",
                    Description = "External power is on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPassO2On
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pass_o2_on",
                    Units = "failure_enum",
                    Description = "Passenger oxygen on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelcap
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelcap",
                    Units = "failure_enum",
                    Description = "Fuel Cap left off",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelWater
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_water",
                    Units = "failure_enum",
                    Description = "Water in fuel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelType
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_type",
                    Units = "failure_enum",
                    Description = "Wrong fuel type - JetA for props or Avgas for jets!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block0",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block1",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block2",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block3",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block4",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block5",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block6",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block7",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelBlock8
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuel_block8",
                    Units = "failure_enum",
                    Description = "Fuel tank filter is blocked - tank 9",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelVasi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vasi",
                    Units = "failure_enum",
                    Description = "VASIs Inoperative",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRwyLites
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_rwy_lites",
                    Units = "failure_enum",
                    Description = "Runway lites Inoperative",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBirdStrike
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bird_strike",
                    Units = "failure_enum",
                    Description = "Bird has hit the plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWindShear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wind_shear",
                    Units = "failure_enum",
                    Description = "Wind shear/microburst",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSmokeCpit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_smoke_cpit",
                    Units = "failure_enum",
                    Description = "Smoke in cockpit",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBrownOut
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_brown_out",
                    Units = "failure_enum",
                    Description = "Induce dusty brown-out",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEsys
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 1)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEsys2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys2",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 2)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEsys3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys3",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 3)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEsys4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys4",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 4)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEsys5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys5",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 5)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEsys6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_esys6",
                    Units = "failure_enum",
                    Description = "Electrical System (Bus 6)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelInvert0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_invert0",
                    Units = "failure_enum",
                    Description = "Inverter 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelInvert1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_invert1",
                    Units = "failure_enum",
                    Description = "Inverter 2 (also in 740)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGen0Lo
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen0_lo",
                    Units = "failure_enum",
                    Description = "Generator 0 voltage low",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGen0Hi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen0_hi",
                    Units = "failure_enum",
                    Description = "Generator 0 voltage hi",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGen1Lo
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen1_lo",
                    Units = "failure_enum",
                    Description = "Generator 1 voltage low",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGen1Hi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen1_hi",
                    Units = "failure_enum",
                    Description = "Generator 1 voltage hi",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBat0Lo
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bat0_lo",
                    Units = "failure_enum",
                    Description = "Battery 0 voltage low",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBat0Hi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bat0_hi",
                    Units = "failure_enum",
                    Description = "Battery 0 voltage hi",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBat1Lo
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bat1_lo",
                    Units = "failure_enum",
                    Description = "Battery 1 voltage low",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBat1Hi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bat1_hi",
                    Units = "failure_enum",
                    Description = "Battery 1 voltage hi",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLitesNav
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_nav",
                    Units = "failure_enum",
                    Description = "Nav lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLitesStrobe
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_strobe",
                    Units = "failure_enum",
                    Description = "Strobe lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLitesBeac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_beac",
                    Units = "failure_enum",
                    Description = "Beacon lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLitesTaxi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_taxi",
                    Units = "failure_enum",
                    Description = "Taxi lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLitesLand
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_land",
                    Units = "failure_enum",
                    Description = "Landing Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLitesIns
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_ins",
                    Units = "failure_enum",
                    Description = "Instrument Lighting",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClights
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clights",
                    Units = "failure_enum",
                    Description = "Cockpit Lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLitesHud
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lites_hud",
                    Units = "failure_enum",
                    Description = "HUD lights",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStbaug
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_stbaug",
                    Units = "failure_enum",
                    Description = "Stability Augmentation",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelServoRudd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_servo_rudd",
                    Units = "failure_enum",
                    Description = "autopilot servos failed - rudder/yaw damper",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOtto
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_otto",
                    Units = "failure_enum",
                    Description = "AutoPilot (Computer)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAutoRunaway
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_auto_runaway",
                    Units = "failure_enum",
                    Description = "AutoPilot (Runaway!!!)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAutoServos
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_auto_servos",
                    Units = "failure_enum",
                    Description = "AutoPilot (Servos)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelServoAiln
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_servo_ailn",
                    Units = "failure_enum",
                    Description = "autopilot servos failed - ailerons",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelServoElev
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_servo_elev",
                    Units = "failure_enum",
                    Description = "autopilot servos failed - elevators",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelServoThro
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_servo_thro",
                    Units = "failure_enum",
                    Description = "autopilot servos failed - throttles",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcRudL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_rud_L",
                    Units = "failure_enum",
                    Description = "Yaw Left Control",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcRudR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_rud_R",
                    Units = "failure_enum",
                    Description = "Yaw Right control",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcAilL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_ail_L",
                    Units = "failure_enum",
                    Description = "Roll left control",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcAilR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_ail_R",
                    Units = "failure_enum",
                    Description = "Roll Right Control",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcElvU
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_elv_U",
                    Units = "failure_enum",
                    Description = "Pitch Up Control",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcElvD
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_elv_D",
                    Units = "failure_enum",
                    Description = "Pitch Down Control",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTrimRud
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_trim_rud",
                    Units = "failure_enum",
                    Description = "Yaw Trim",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTrimAil
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_trim_ail",
                    Units = "failure_enum",
                    Description = "roll trim",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTrimElv
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_trim_elv",
                    Units = "failure_enum",
                    Description = "Pitch Trim",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRudTrimRun
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_rud_trim_run",
                    Units = "failure_enum",
                    Description = "Yaw Trim Runaway",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAilTrimRun
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ail_trim_run",
                    Units = "failure_enum",
                    Description = "Pitch Trim Runaway",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelElvTrimRun
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_elv_trim_run",
                    Units = "failure_enum",
                    Description = "Elevator Trim Runaway",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcSlt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_slt",
                    Units = "failure_enum",
                    Description = "Slats",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFlapAct
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_flap_act",
                    Units = "failure_enum",
                    Description = "Flap Actuator",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcLFlp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_L_flp",
                    Units = "failure_enum",
                    Description = "Left flap activate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcRFlp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_R_flp",
                    Units = "failure_enum",
                    Description = "Right Flap activate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLFlpOff
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_L_flp_off",
                    Units = "failure_enum",
                    Description = "Left flap remove",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRFlpOff
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_R_flp_off",
                    Units = "failure_enum",
                    Description = "Right flap remove",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGearAct
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gear_act",
                    Units = "failure_enum",
                    Description = "Landing Gear actuator",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGearInd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gear_ind",
                    Units = "failure_enum",
                    Description = "Landing Gear indicator",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLbrakes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lbrakes",
                    Units = "failure_enum",
                    Description = "Left Brakes",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRbrakes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_rbrakes",
                    Units = "failure_enum",
                    Description = "Right Brakes",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLagear1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear1",
                    Units = "failure_enum",
                    Description = "Landing Gear 1 retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLagear2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear2",
                    Units = "failure_enum",
                    Description = "Landing Gear 2 retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLagear3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear3",
                    Units = "failure_enum",
                    Description = "Landing Gear 3 retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLagear4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear4",
                    Units = "failure_enum",
                    Description = "Landing Gear 4 retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLagear5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_lagear5",
                    Units = "failure_enum",
                    Description = "Landing Gear 5 retract",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse1",
                    Units = "failure_enum",
                    Description = "Landing gear 1 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse2",
                    Units = "failure_enum",
                    Description = "Landing gear 2 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse3",
                    Units = "failure_enum",
                    Description = "Landing gear 3 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse4",
                    Units = "failure_enum",
                    Description = "Landing gear 4 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse5",
                    Units = "failure_enum",
                    Description = "Landing gear 5 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse6",
                    Units = "failure_enum",
                    Description = "Landing gear 6 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse7",
                    Units = "failure_enum",
                    Description = "Landing gear 7 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse8
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse8",
                    Units = "failure_enum",
                    Description = "Landing gear 8 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse9
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse9",
                    Units = "failure_enum",
                    Description = "Landing gear 9 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCollapse10
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_collapse10",
                    Units = "failure_enum",
                    Description = "Landing gear 10 gear collapse",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTire1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire1",
                    Units = "failure_enum",
                    Description = "Landing gear 1 tire blowout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTire2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire2",
                    Units = "failure_enum",
                    Description = "Landing gear 2 tire blowout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTire3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire3",
                    Units = "failure_enum",
                    Description = "Landing gear 3 tire blowout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTire4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire4",
                    Units = "failure_enum",
                    Description = "Landing gear 4 tire blowout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTire5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_tire5",
                    Units = "failure_enum",
                    Description = "Landing gear 5 tire blowout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHVAC
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_HVAC",
                    Units = "failure_enum",
                    Description = "air conditioning failed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBleedAirLft
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bleed_air_lft",
                    Units = "failure_enum",
                    Description = "The left engine is not providing enough pressure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBleedAirRgt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_bleed_air_rgt",
                    Units = "failure_enum",
                    Description = "The right engine is not providing enough pressure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAPUPress
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_APU_press",
                    Units = "failure_enum",
                    Description = "APU is not providing bleed air for engine start or pressurization",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelDepresSlow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_depres_slow",
                    Units = "failure_enum",
                    Description = "Slow cabin leak - descend or black out",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelDepresFast
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_depres_fast",
                    Units = "failure_enum",
                    Description = "catastrophic decompression - yer dead",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmpEle
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp_ele",
                    Units = "failure_enum",
                    Description = "Hydraulic pump (electric)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp",
                    Units = "failure_enum",
                    Description = "Hydraulic System 1 (pump fail)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmp2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp2",
                    Units = "failure_enum",
                    Description = "Hydraulic System 2 (pump fail)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmp3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp3",
                    Units = "failure_enum",
                    Description = "Hydraulic System 3 (pump fail)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmp4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp4",
                    Units = "failure_enum",
                    Description = "Hydraulic System 4 (pump fail)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmp5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp5",
                    Units = "failure_enum",
                    Description = "Hydraulic System 5 (pump fail)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmp6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp6",
                    Units = "failure_enum",
                    Description = "Hydraulic System 6 (pump fail)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmp7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp7",
                    Units = "failure_enum",
                    Description = "Hydraulic System 7 (pump fail)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydpmp8
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydpmp8",
                    Units = "failure_enum",
                    Description = "Hydraulic System 8 (pump fail)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydleak
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydleak",
                    Units = "failure_enum",
                    Description = "Hydraulic System 1 (leak)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydleak2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydleak2",
                    Units = "failure_enum",
                    Description = "Hydraulic System 2 (leak)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydoverp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydoverp",
                    Units = "failure_enum",
                    Description = "Hydraulic System 1 (over pressure)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHydoverp2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hydoverp2",
                    Units = "failure_enum",
                    Description = "Hydraulic System 2 (over pressure)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelThrotLo
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_throt_lo",
                    Units = "failure_enum",
                    Description = "Throttle inop giving min thrust",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelThrotHi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_throt_hi",
                    Units = "failure_enum",
                    Description = "Throttle inop giving max thrust",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFcThr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fc_thr",
                    Units = "failure_enum",
                    Description = "Throttle failure at current position",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPropSync
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prop_sync",
                    Units = "failure_enum",
                    Description = "Prop sync",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFeather
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_feather",
                    Units = "failure_enum",
                    Description = "Autofeather system inop",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTrotor
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_trotor",
                    Units = "failure_enum",
                    Description = "Tail rotor transmission",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAntice
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_antice",
                    Units = "failure_enum",
                    Description = "Anti-ice",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceDetect
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_detect",
                    Units = "failure_enum",
                    Description = "Ice detector",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePitotHeat1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_pitot_heat1",
                    Units = "failure_enum",
                    Description = "Pitot heat 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePitotHeat2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_pitot_heat2",
                    Units = "failure_enum",
                    Description = "Pitot heat 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceStaticHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_static_heat",
                    Units = "failure_enum",
                    Description = "Static heat 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceStaticHeat2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_static_heat2",
                    Units = "failure_enum",
                    Description = "Static heat 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceAOAHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_AOA_heat",
                    Units = "failure_enum",
                    Description = "AOA indicator heat",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceAOAHeat2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_AOA_heat2",
                    Units = "failure_enum",
                    Description = "AOA indicator heat",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceWindowHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_window_heat",
                    Units = "failure_enum",
                    Description = "Window Heat",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceSurfBoot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_surf_boot",
                    Units = "failure_enum",
                    Description = "Surface Boot - Deprecated - Do Not Use",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceSurfHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_surf_heat",
                    Units = "failure_enum",
                    Description = "Surface Heat",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceSurfHeat2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_surf_heat2",
                    Units = "failure_enum",
                    Description = "Surface Heat",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceBrakeHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_brake_heat",
                    Units = "failure_enum",
                    Description = "Brakes anti-ice",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceAltAir1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_alt_air1",
                    Units = "failure_enum",
                    Description = "Alternate Air",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceAltAir2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_alt_air2",
                    Units = "failure_enum",
                    Description = "Alternate Air",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelVacuum
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vacuum",
                    Units = "failure_enum",
                    Description = "Vacuum System 1 - Pump Failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelVacuum2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vacuum2",
                    Units = "failure_enum",
                    Description = "Vacuum System 2 - Pump Failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPitot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pitot",
                    Units = "failure_enum",
                    Description = "Pitot 1 - Blockage",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPitot2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pitot2",
                    Units = "failure_enum",
                    Description = "Pitot 2 - Blockage",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStatic
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_static",
                    Units = "failure_enum",
                    Description = "Static 1 - Blockage",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStatic2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_static2",
                    Units = "failure_enum",
                    Description = "Static 2 - Blockage",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStatic1Err
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_static1_err",
                    Units = "failure_enum",
                    Description = "Static system 1 - Error",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStatic2Err
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_static2_err",
                    Units = "failure_enum",
                    Description = "Static system 2 - Error",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGOat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_oat",
                    Units = "failure_enum",
                    Description = "OAT",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGFuel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_fuel",
                    Units = "failure_enum",
                    Description = "fuel quantity",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSsAsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_asi",
                    Units = "failure_enum",
                    Description = "Airspeed Indicator (Pilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSsAhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_ahz",
                    Units = "failure_enum",
                    Description = "Artificial Horizon (Pilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSsAlt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_alt",
                    Units = "failure_enum",
                    Description = "Altimeter (Pilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSsTsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_tsi",
                    Units = "failure_enum",
                    Description = "Turn indicator (Pilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSsDgy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_dgy",
                    Units = "failure_enum",
                    Description = "Directional Gyro (Pilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSsVvi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ss_vvi",
                    Units = "failure_enum",
                    Description = "Vertical Velocity Indicator (Pilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCopAsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_asi",
                    Units = "failure_enum",
                    Description = "Airspeed Indicator (Copilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCopAhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_ahz",
                    Units = "failure_enum",
                    Description = "Artificial Horizon (Copilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCopAlt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_alt",
                    Units = "failure_enum",
                    Description = "Altimeter (Copilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCopTsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_tsi",
                    Units = "failure_enum",
                    Description = "Turn indicator (Copilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCopDgy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_dgy",
                    Units = "failure_enum",
                    Description = "Directional Gyro (Copilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCopVvi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_cop_vvi",
                    Units = "failure_enum",
                    Description = "Vertical Velocity Indicator (Copilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEfis1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_efis_1",
                    Units = "failure_enum",
                    Description = "Primary EFIS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEfis2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_efis_2",
                    Units = "failure_enum",
                    Description = "Secondary EFIS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAOA
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_AOA",
                    Units = "failure_enum",
                    Description = "AOA",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStallWarn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_stall_warn",
                    Units = "failure_enum",
                    Description = "Stall warning has failed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGearWarning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gear_warning",
                    Units = "failure_enum",
                    Description = "gear warning audio is broken",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelNavcom1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_navcom1",
                    Units = "failure_enum",
                    Description = "Nav and com 1 radio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelNavcom2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_navcom2",
                    Units = "failure_enum",
                    Description = "Nav and com 2 radio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelNav1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_nav1",
                    Units = "failure_enum",
                    Description = "Nav-1 radio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelNav2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_nav2",
                    Units = "failure_enum",
                    Description = "Nav-2 radio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCom1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_com1",
                    Units = "failure_enum",
                    Description = "Com-1 radio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCom2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_com2",
                    Units = "failure_enum",
                    Description = "Com-2 radio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAdf1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_adf1",
                    Units = "failure_enum",
                    Description = "ADF 1 (only one ADF failure in 830!)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAdf2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_adf2",
                    Units = "failure_enum",
                    Description = "ADF 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGps
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gps",
                    Units = "failure_enum",
                    Description = "GPS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGps2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gps2",
                    Units = "failure_enum",
                    Description = "GPS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_dme",
                    Units = "failure_enum",
                    Description = "DME",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelLoc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_loc",
                    Units = "failure_enum",
                    Description = "Localizer",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGls
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gls",
                    Units = "failure_enum",
                    Description = "Glide Slope",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gp",
                    Units = "failure_enum",
                    Description = "WAAS GPS receiver",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelXpndr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_xpndr",
                    Units = "failure_enum",
                    Description = "Transponder failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMarker
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_marker",
                    Units = "failure_enum",
                    Description = "Marker Beacons",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRPMInd0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_RPM_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - rpm engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRPMInd1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_RPM_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - rpm engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelN1Ind0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_N1_ind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - n1 engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelN1Ind1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_N1_ind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - n1 engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelN2Ind0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_N2_ind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - n2 engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelN2Ind1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_N2_ind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - n2 engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMPInd0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_MP_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - mp engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMPInd1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_MP_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - mp engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTRQind0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_TRQind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - trq engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelTRQind1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_TRQind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - trq engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEPRind0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_EPRind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - epr engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEPRind1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_EPRind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - epr engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCHTInd0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_CHT_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - cht engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelCHTInd1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_CHT_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - cht engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelITTind0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ITTind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - itt engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelITTind1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ITTind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - itt engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEGTInd0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_EGT_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - egt engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEGTInd1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_EGT_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - egt engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFFInd0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_FF_ind0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - ff engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFFInd1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_FF_ind1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - ff engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFpInd0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fp_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Fuel Pressure 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFpInd1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fp_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Fuel Pressure 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpInd0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilp_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Oil Pressure 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpInd1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilp_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Oil Pressure 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOiltInd0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilt_ind_0",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Oil Temperature 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOiltInd1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilt_ind_1",
                    Units = "failure_enum",
                    Description = "Panel Indicator Inop - Oil Temperature 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelG430Gps1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g430_gps1",
                    Units = "failure_enum",
                    Description = "G430 GPS 1 Inop",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelG430Gps2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g430_gps2",
                    Units = "failure_enum",
                    Description = "G430 GPS 2 Inop",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelG430Rad1Tune
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g430_rad1_tune",
                    Units = "failure_enum",
                    Description = "G430 Nav/Com Tuner 1 Inop",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelG430Rad2Tune
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g430_rad2_tune",
                    Units = "failure_enum",
                    Description = "G430 Nav/Com Tuner 2 Inop",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGGia1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gia1",
                    Units = "failure_enum",
                    Description = "GIA 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGGia2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gia2",
                    Units = "failure_enum",
                    Description = "GIA 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGGea
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gea",
                    Units = "failure_enum",
                    Description = "gea",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAdcComp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_adc_comp",
                    Units = "failure_enum",
                    Description = "air data computer",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGArthorz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_arthorz",
                    Units = "failure_enum",
                    Description = "AHRS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGAsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_asi",
                    Units = "failure_enum",
                    Description = "airspeed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGAlt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_alt",
                    Units = "failure_enum",
                    Description = "altimeter",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGMagmtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_magmtr",
                    Units = "failure_enum",
                    Description = "magnetometer",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGVvi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_vvi",
                    Units = "failure_enum",
                    Description = "vvi",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGNavrad1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_navrad1",
                    Units = "failure_enum",
                    Description = "nav radio 1 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_nav1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGNavrad2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_navrad2",
                    Units = "failure_enum",
                    Description = "nav radio 2 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_nav2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGComrad1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_comrad1",
                    Units = "failure_enum",
                    Description = "com radio 1 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_com1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGComrad2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_comrad2",
                    Units = "failure_enum",
                    Description = "com radio 2 - removed from 10.00 - 10.36, compatibility only in 10.40 - DO NOT USE - use rel_com2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGXpndr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_xpndr",
                    Units = "failure_enum",
                    Description = "transponder removed from 10.00 - 10.36, compatibility only in 10.40+ - DO NOT USE - use rel_xpndr",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGGen1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gen1",
                    Units = "failure_enum",
                    Description = "generator amperage 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGGen2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_gen2",
                    Units = "failure_enum",
                    Description = "generator amperage 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGBat1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_bat1",
                    Units = "failure_enum",
                    Description = "battery voltage 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGBat2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_bat2",
                    Units = "failure_enum",
                    Description = "battery voltage 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGBus1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_bus1",
                    Units = "failure_enum",
                    Description = "bus voltage 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGBus2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_bus2",
                    Units = "failure_enum",
                    Description = "bus voltage 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGMfd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_mfd",
                    Units = "failure_enum",
                    Description = "MFD screen failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGPfd
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_pfd",
                    Units = "failure_enum",
                    Description = "PFD screen failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGPfd2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_g_pfd2",
                    Units = "failure_enum",
                    Description = "PFD2 screen failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagLFT0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT0",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagLFT1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT1",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagLFT2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT2",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagLFT3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT3",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagLFT4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT4",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagLFT5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT5",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagLFT6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT6",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagLFT7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magLFT7",
                    Units = "failure_enum",
                    Description = "Left Magneto Fail - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagRGT0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT0",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagRGT1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT1",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagRGT2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT2",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagRGT3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT3",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagRGT4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT4",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagRGT5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT5",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagRGT6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT6",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMagRGT7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_magRGT7",
                    Units = "failure_enum",
                    Description = "Right Magneto Fail - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfir0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir0",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 1 Fire",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfir1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir1",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 2 Fire",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfir2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir2",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 3 Fire",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfir3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir3",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 4 Fire",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfir4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir4",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 5 Fire",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfir5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir5",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 6 Fire",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfir6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir6",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 7 Fire",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfir7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfir7",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 8 Fire",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfla0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla0",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 1 Flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfla1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla1",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 2 Flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfla2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla2",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 3 Flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfla3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla3",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 4 Flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfla4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla4",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 5 Flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfla5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla5",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 6 Flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfla6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla6",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 7 Flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfla7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfla7",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 8 Flameout",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfai0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai0",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 1 loss of power without smoke",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfai1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai1",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfai2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai2",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfai3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai3",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfai4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai4",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfai5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai5",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfai6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai6",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngfai7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engfai7",
                    Units = "failure_enum",
                    Description = "Engine Failure - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngsep0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep0",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngsep1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep1",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngsep2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep2",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngsep3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep3",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngsep4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep4",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngsep5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep5",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngsep6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep6",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngsep7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_engsep7",
                    Units = "failure_enum",
                    Description = "Engine Separation - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuepmp0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp0",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 1 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuepmp1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp1",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 2 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuepmp2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp2",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 3 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuepmp3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp3",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 4 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuepmp4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp4",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 5 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuepmp5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp5",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 6 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuepmp6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp6",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 7 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuepmp7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuepmp7",
                    Units = "failure_enum",
                    Description = "Fuel Pump Inop - engine 8 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEleFuepmp0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp0",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 1 (electric driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEleFuepmp1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp1",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 2 (electric driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEleFuepmp2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp2",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 3 (electric driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEleFuepmp3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp3",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 4 (electric driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEleFuepmp4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp4",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 5 (electric driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEleFuepmp5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp5",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 6 (electric driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEleFuepmp6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp6",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 7 (electric driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEleFuepmp7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ele_fuepmp7",
                    Units = "failure_enum",
                    Description = "Fuel Pump - engine 8 (electric driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngLo0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo0",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 1 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngLo1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo1",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 2 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngLo2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo2",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 3 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngLo3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo3",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 4 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngLo4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo4",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 5 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngLo5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo5",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 6 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngLo6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo6",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 7 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelEngLo7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_eng_lo7",
                    Units = "failure_enum",
                    Description = "Fuel Pump Low Pressure - engine 8 (engine driven)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAirres0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres0",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAirres1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres1",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAirres2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres2",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAirres3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres3",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAirres4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres4",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAirres5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres5",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAirres6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres6",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAirres7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_airres7",
                    Units = "failure_enum",
                    Description = "Airflow restricted - Engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelfl0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl0",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelfl1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl1",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelfl2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl2",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelfl3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl3",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelfl4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl4",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelfl5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl5",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelfl6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl6",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFuelfl7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fuelfl7",
                    Units = "failure_enum",
                    Description = "Fuel Flow Fluctuation - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelComsta0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta0",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelComsta1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta1",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelComsta2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta2",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelComsta3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta3",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelComsta4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta4",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelComsta5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta5",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelComsta6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta6",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelComsta7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_comsta7",
                    Units = "failure_enum",
                    Description = "Engine Compressor Stall - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStartr0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr0",
                    Units = "failure_enum",
                    Description = "Starter - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStartr1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr1",
                    Units = "failure_enum",
                    Description = "Starter - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStartr2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr2",
                    Units = "failure_enum",
                    Description = "Starter - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStartr3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr3",
                    Units = "failure_enum",
                    Description = "Starter - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStartr4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr4",
                    Units = "failure_enum",
                    Description = "Starter - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStartr5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr5",
                    Units = "failure_enum",
                    Description = "Starter - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStartr6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr6",
                    Units = "failure_enum",
                    Description = "Starter - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelStartr7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_startr7",
                    Units = "failure_enum",
                    Description = "Starter - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIgnitr0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr0",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIgnitr1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr1",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIgnitr2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr2",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIgnitr3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr3",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIgnitr4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr4",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIgnitr5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr5",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIgnitr6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr6",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIgnitr7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ignitr7",
                    Units = "failure_enum",
                    Description = "Ignitor - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHunsta0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta0",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHunsta1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta1",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHunsta2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta2",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHunsta3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta3",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHunsta4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta4",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHunsta5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta5",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHunsta6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta6",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHunsta7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hunsta7",
                    Units = "failure_enum",
                    Description = "Hung Start - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClonoz0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz0",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClonoz1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz1",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClonoz2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz2",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClonoz3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz3",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClonoz4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz4",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClonoz5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz5",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClonoz6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz6",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelClonoz7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_clonoz7",
                    Units = "failure_enum",
                    Description = "Hung start (clogged nozzles) - Engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHotsta0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta0",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHotsta1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta1",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHotsta2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta2",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHotsta3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta3",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHotsta4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta4",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHotsta5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta5",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHotsta6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta6",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHotsta7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hotsta7",
                    Units = "failure_enum",
                    Description = "Hot Start - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRunITT0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT0",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRunITT1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT1",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRunITT2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT2",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRunITT3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT3",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRunITT4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT4",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRunITT5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT5",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRunITT6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT6",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRunITT7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_runITT7",
                    Units = "failure_enum",
                    Description = "Runway Hot ITT - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenera0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera0",
                    Units = "failure_enum",
                    Description = "Generator - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenera1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera1",
                    Units = "failure_enum",
                    Description = "Generator - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenera2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera2",
                    Units = "failure_enum",
                    Description = "Generator - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenera3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera3",
                    Units = "failure_enum",
                    Description = "Generator - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenera4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera4",
                    Units = "failure_enum",
                    Description = "Generator - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenera5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera5",
                    Units = "failure_enum",
                    Description = "Generator - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenera6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera6",
                    Units = "failure_enum",
                    Description = "Generator - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenera7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_genera7",
                    Units = "failure_enum",
                    Description = "Generator - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBatter0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter0",
                    Units = "failure_enum",
                    Description = "Battery 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBatter1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter1",
                    Units = "failure_enum",
                    Description = "Battery 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBatter2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter2",
                    Units = "failure_enum",
                    Description = "Battery 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBatter3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter3",
                    Units = "failure_enum",
                    Description = "Battery 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBatter4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter4",
                    Units = "failure_enum",
                    Description = "Battery 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBatter5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter5",
                    Units = "failure_enum",
                    Description = "Battery 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBatter6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter6",
                    Units = "failure_enum",
                    Description = "Battery 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelBatter7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_batter7",
                    Units = "failure_enum",
                    Description = "Battery 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGovnr0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_0",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGovnr1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_1",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGovnr2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_2",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGovnr3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_3",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGovnr4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_4",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGovnr5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_5",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGovnr6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_6",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGovnr7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_govnr_7",
                    Units = "failure_enum",
                    Description = "Governor throttle fail - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFadec0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_0",
                    Units = "failure_enum",
                    Description = "Fadec - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFadec1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_1",
                    Units = "failure_enum",
                    Description = "Fadec - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFadec2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_2",
                    Units = "failure_enum",
                    Description = "Fadec - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFadec3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_3",
                    Units = "failure_enum",
                    Description = "Fadec - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFadec4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_4",
                    Units = "failure_enum",
                    Description = "Fadec - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFadec5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_5",
                    Units = "failure_enum",
                    Description = "Fadec - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFadec6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_6",
                    Units = "failure_enum",
                    Description = "Fadec - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelFadec7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_fadec_7",
                    Units = "failure_enum",
                    Description = "Fadec - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpmp0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp0",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpmp1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp1",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpmp2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp2",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpmp3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp3",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpmp4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp4",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpmp5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp5",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpmp6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp6",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelOilpmp7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_oilpmp7",
                    Units = "failure_enum",
                    Description = "Oil Pump - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelChipde0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde0",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelChipde1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde1",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelChipde2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde2",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelChipde3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde3",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelChipde4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde4",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelChipde5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde5",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelChipde6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde6",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelChipde7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_chipde7",
                    Units = "failure_enum",
                    Description = "Chip Detected - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpfin0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin0",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpfin1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin1",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpfin2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin2",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpfin3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin3",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpfin4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin4",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpfin5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin5",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpfin6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin6",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpfin7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpfin7",
                    Units = "failure_enum",
                    Description = "Prop governor fail to fine - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpcrs0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs0",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpcrs1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs1",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpcrs2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs2",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpcrs3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs3",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpcrs4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs4",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpcrs5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs5",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpcrs6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs6",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPrpcrs7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_prpcrs7",
                    Units = "failure_enum",
                    Description = "Prop governor fail to coarse - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPshaft0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft0",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPshaft1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft1",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPshaft2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft2",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPshaft3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft3",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPshaft4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft4",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPshaft5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft5",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPshaft6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft6",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPshaft7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pshaft7",
                    Units = "failure_enum",
                    Description = "Drive Shaft - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSeize0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_0",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSeize1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_1",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSeize2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_2",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSeize3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_3",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSeize4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_4",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSeize5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_5",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSeize6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_6",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelSeize7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_seize_7",
                    Units = "failure_enum",
                    Description = "Engine Seize - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevers0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers0",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevers1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers1",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevers2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers2",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevers3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers3",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevers4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers4",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevers5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers5",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevers6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers6",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevers7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revers7",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Inop - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevdep0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep0",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevdep1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep1",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevdep2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep2",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevdep3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep3",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevdep4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep4",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevdep5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep5",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevdep6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep6",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevdep7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revdep7",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Deploy - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevloc0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc0",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevloc1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc1",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevloc2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc2",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevloc3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc3",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevloc4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc4",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevloc5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc5",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevloc6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc6",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelRevloc7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_revloc7",
                    Units = "failure_enum",
                    Description = "Thrust Reversers Locked - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAftbur0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur0",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAftbur1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur1",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAftbur2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur2",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAftbur3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur3",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAftbur4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur4",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAftbur5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur5",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAftbur6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur6",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelAftbur7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_aftbur7",
                    Units = "failure_enum",
                    Description = "Afterburners - engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceInletHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceInletHeat2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat2",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceInletHeat3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat3",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceInletHeat4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat4",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceInletHeat5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat5",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceInletHeat6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat6",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceInletHeat7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat7",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIceInletHeat8
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_inlet_heat8",
                    Units = "failure_enum",
                    Description = "Inlet heat, engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePropHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePropHeat2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat2",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePropHeat3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat3",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePropHeat4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat4",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePropHeat5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat5",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 5",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePropHeat6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat6",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePropHeat7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat7",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 7",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelIcePropHeat8
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_ice_prop_heat8",
                    Units = "failure_enum",
                    Description = "Prop Heat, engine 8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWing1L
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing1L",
                    Units = "failure_enum",
                    Description = "Wing separations - left wing 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWing1R
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing1R",
                    Units = "failure_enum",
                    Description = "Wing separations - right wing 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWing2L
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing2L",
                    Units = "failure_enum",
                    Description = "Wing separations - left wing 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWing2R
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing2R",
                    Units = "failure_enum",
                    Description = "Wing separations - right wing 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWing3L
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing3L",
                    Units = "failure_enum",
                    Description = "Wing separations - left wing 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWing3R
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing3R",
                    Units = "failure_enum",
                    Description = "Wing separations - right wing 3",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWing4L
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing4L",
                    Units = "failure_enum",
                    Description = "Wing separations - left wing 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelWing4R
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_wing4R",
                    Units = "failure_enum",
                    Description = "Wing separations - right wing 4",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHstbL
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hstbL",
                    Units = "failure_enum",
                    Description = "Left horizontal stabilizer separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelHstbR
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_hstbR",
                    Units = "failure_enum",
                    Description = "Right horizontal stabilizer separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelVstb1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vstb1",
                    Units = "failure_enum",
                    Description = "Vertical stabilizer 1 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelVstb2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_vstb2",
                    Units = "failure_enum",
                    Description = "Vertical stabilizer 2 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMwing1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing1",
                    Units = "failure_enum",
                    Description = "Misc wing 1 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMwing2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing2",
                    Units = "failure_enum",
                    Description = "Misc wing 2 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMwing3
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing3",
                    Units = "failure_enum",
                    Description = "Misc wing 3 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMwing4
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing4",
                    Units = "failure_enum",
                    Description = "Misc wing 4 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMwing5
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing5",
                    Units = "failure_enum",
                    Description = "Misc wing 5 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMwing6
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing6",
                    Units = "failure_enum",
                    Description = "Misc wing 6 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMwing7
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing7",
                    Units = "failure_enum",
                    Description = "Misc wing 7 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelMwing8
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_mwing8",
                    Units = "failure_enum",
                    Description = "Misc wing 8 separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl1a
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl1a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 1a Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl2a
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl2a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 2a Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl3a
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl3a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 3a Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl4a
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl4a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 4a Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl5a
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl5a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 5a Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl6a
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl6a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 6a Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl7a
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl7a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 7a Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl8a
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl8a",
                    Units = "failure_enum",
                    Description = "Engine Pylon 8a Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl1b
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl1b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 1b Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl2b
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl2b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 2b Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl3b
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl3b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 3b Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl4b
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl4b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 4b Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl5b
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl5b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 5b Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl6b
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl6b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 6b Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl7b
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl7b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 7b Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelPyl8b
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_pyl8b",
                    Units = "failure_enum",
                    Description = "Engine Pylon 8b Separate",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenEsys
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen_esys",
                    Units = "failure_enum",
                    Description = "General electrical failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationFailuresRelGenAvio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/failures/rel_gen_avio",
                    Units = "failure_enum",
                    Description = "General avionics bus failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationMiscDebugNetwork
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/misc/debug_network",
                    Units = "boolean",
                    Description = "Enable logging of network data",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationMiscFrameRatePeriod
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/misc/frame_rate_period",
                    Units = "secs",
                    Description = "The frame rate period. Use the reciprocal to get the frame rate (e.g. 1/mnw.prd).  Writable via override_timestep in 11.10",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationMiscTimeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/misc/time_ratio",
                    Units = "secs",
                    Description = "This is how close XP time matches real time. Ideal ratio is 1.  NOTE: in 930 and later time ratio is always 1.0.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideJoystick
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_joystick",
                    Units = "boolean",
                    Description = "Override control of the joystick deflections (overrides stick, yoke, pedals, keys, mouse, and auto-coordination)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideArtstab
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_artstab",
                    Units = "boolean",
                    Description = "Override control of the artificial stability system",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideFlightcontrol
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_flightcontrol",
                    Units = "boolean",
                    Description = "Override all parts of the flight system at once",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideGearbrake
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_gearbrake",
                    Units = "boolean",
                    Description = "Override gear and brake status",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideNavneedles
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_navneedles",
                    Units = "boolean",
                    Description = "Override navcom radios",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideNav1Needles
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_nav1_needles",
                    Units = "boolean",
                    Description = "Override nav1 receiver",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideNav2Needles
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_nav2_needles",
                    Units = "boolean",
                    Description = "Override nav2 receiver",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideAdf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_adf",
                    Units = "boolean",
                    Description = "Override ADF radios",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_dme",
                    Units = "boolean",
                    Description = "Override DME distances",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideGps
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_gps",
                    Units = "boolean",
                    Description = "Override GPS computer",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideNavHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_nav_heading",
                    Units = "boolean",
                    Description = "Override raw heading flown by nav (for GPS that fly by roll commands)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideFlightdir
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_flightdir",
                    Units = "boolean",
                    Description = "Override flight director needles (both axes)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideFlightdirPtch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_flightdir_ptch",
                    Units = "boolean",
                    Description = "Override flight director needles (pitch only)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideFlightdirRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_flightdir_roll",
                    Units = "boolean",
                    Description = "Override flight director needles (roll only)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideCamera
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_camera",
                    Units = "boolean",
                    Description = "Override camera control.  NOTE: DO NOT USE, USE XPLMCAMERA!!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideAnnunciators
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_annunciators",
                    Units = "boolean",
                    Description = "Override annunciators",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideAutopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_autopilot",
                    Units = "boolean",
                    Description = "Override the autopilot's brains",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideJoystickHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_joystick_heading",
                    Units = "boolean",
                    Description = "Override just heading (yaw) control (disables auto-coordination). Use yoke_heading_ratio.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideJoystickPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_joystick_pitch",
                    Units = "boolean",
                    Description = "Override just pitch control. Use yoke_pitch_ratio.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideJoystickRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_joystick_roll",
                    Units = "boolean",
                    Description = "Override just roll control. Use yoke_roll_ratio.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideThrottles
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_throttles",
                    Units = "boolean",
                    Description = "Override the throttles. Use ENGN_thro_use to control them.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverridePropPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_prop_pitch",
                    Units = "boolean",
                    Description = "Override the prop pitch.  Use POINT_pitch_deg_use to edit.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverridePropMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_prop_mode",
                    Units = "boolean",
                    Description = "Override the prop mode.  Use ENGN_propmode to edit.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideMixture
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_mixture",
                    Units = "boolean",
                    Description = "Override the mixture controls.  Use ENGN_mixt to edit.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideFmsAdvance
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_fms_advance",
                    Units = "boolean",
                    Description = "Override the FMS going to the next waypoint.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideFuelFlow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_fuel_flow",
                    Units = "boolean",
                    Description = "overrides fuel flow variable sim/flightmodel/engine/ENGN_FF_",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideIttEgt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_itt_egt",
                    Units = "boolean",
                    Description = "overrides engine temp vars sim/flightmodel/engine/ENGN_EGT_c and ENGN_ITT_c",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideControlSurfaces
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_control_surfaces",
                    Units = "boolean",
                    Description = "overrides individual control surfaces, e.g. sim/flightmodel/controls/lail1def",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideEngines
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_engines",
                    Units = "boolean",
                    Description = "overrides all engine calculations - write to LMN and g_nrml/side/axil.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideForces
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_forces",
                    Units = "boolean",
                    Description = "overrides all force calculations - write to LMN and g_nrml/side/axil.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideClouds
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_clouds",
                    Units = "boolean",
                    Description = "overrides building and drawing of clouds as well as white-out-in-cloud effects",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideWheelSteer
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_wheel_steer",
                    Units = "boolean",
                    Description = "overrides the steering of individual gear from tiller/rudder.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideAirportLites
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_airport_lites",
                    Units = "boolean",
                    Description = "overrides when the airport lites go on and off.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideFuelSystem
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_fuel_system",
                    Units = "boolean",
                    Description = "this override turns off transfer and dump and lets the plugin decide if the engine gets fuel",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideTCAS
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_TCAS",
                    Units = "boolean",
                    Description = "this override lets third party add-ons write to the TCAS source data array",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideToeBrakes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_toe_brakes",
                    Units = "boolean",
                    Description = "this override gives plguins control of sim/flightmodel2/controls/left_brake_ratio and right_brake_ratio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideGroundTrucks
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_ground_trucks",
                    Units = "boolean",
                    Description = "set this override to disable Austin's trucks.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationOverrideOverrideTimestep
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/override/override_timestep",
                    Units = "boolean",
                    Description = "this overrides the sim's time step.  when enabled, xtim.prd_sim, sim/operation/misc/frame_rate_period is plugin-writable",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsStartupRunning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/startup_running",
                    Units = "boolean",
                    Description = "Start up with the plane running?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsWarnOverspeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_overspeed",
                    Units = "boolean",
                    Description = "Warn if we exceed max airframe speed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsWarnOvergforce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_overgforce",
                    Units = "boolean",
                    Description = "Warn if we exceed max g-forces on aircraft",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsWarnOverspeedFlaps
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_overspeed_flaps",
                    Units = "boolean",
                    Description = "Warn if we exceed max flap extended speed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsWarnOverspeedGear
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_overspeed_gear",
                    Units = "boolean",
                    Description = "Warn if we exceed max gear deployed speed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsResetOnCrash
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/reset_on_crash",
                    Units = "boolean",
                    Description = "On crash, do we reset the AC to the nearest airport? - gone in v11, read only dref returns false for compatibility.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsWarnNonobviousStuff
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/warn_nonobvious_stuff",
                    Units = "boolean",
                    Description = "Show text warning for otherwise hard to see things like carb-icing?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsTextOut
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/text_out",
                    Units = "boolean",
                    Description = "show text ATC messages?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsReplayMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/replay_mode",
                    Units = "enum",
                    Description = "Are we in replay mode?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsAiFliesAircraft
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/ai_flies_aircraft",
                    Units = "boolean",
                    Description = "Controls whether the AI controls the user's plane",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsMiscLanguage
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/misc/language",
                    Units = "enum",
                    Description = "Current language",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationPrefsMiscHasLuaAlloc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/prefs/misc/has_lua_alloc",
                    Units = "bool",
                    Description = "Returns true if the sim provides a low-mem lua allocator via inter-plugin messaging.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundHasSound
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/has_sound",
                    Units = "boolean",
                    Description = "Does this machine have sound hardware that X-Plane understands?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundHasSpeechSynth
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/has_speech_synth",
                    Units = "boolean",
                    Description = "Does this machine have speech synth capabilities?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundSoundOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/sound_on",
                    Units = "boolean",
                    Description = "Is sound on (set by user)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundSpeechOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/speech_on",
                    Units = "boolean",
                    Description = "Is speech synth on (set by user)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundExteriorVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/exterior_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundInteriorVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/interior_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundCopilotVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/copilot_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundRadioVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/radio_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for the com radios, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundEnviroVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/enviro_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundUiVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/ui_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundEngineVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/engine_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for engine sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundPropVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/prop_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for propeller sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundGroundVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/ground_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for ground contact effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundWeatherVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/weather_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for weather sound effects, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundWarningVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/warning_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for warning systems, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationSoundFanVolumeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/sound/fan_volume_ratio",
                    Units = "0-1",
                    Description = "Volume level for the avionics fan, ratio from 0 (silent) to 1 (max loudness)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement OperationWindowsSystemWindow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/operation/windows/system_window",
                    Units = "HWND",
                    Description = "This is X-Plane's system native window as an int (either an HWND or WindowRef pre 102)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TestTestFloat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/test/test_float",
                    Units = "ratio",
                    Description = "this test dataref is used internally for testing our models",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeTimerIsRunningSec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/timer_is_running_sec",
                    Units = "boolean",
                    Description = "Is the timer running?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeTotalRunningTimeSec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/total_running_time_sec",
                    Units = "seconds",
                    Description = "Total time the sim has been up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeTotalFlightTimeSec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/total_flight_time_sec",
                    Units = "seconds",
                    Description = "Total time since the flight got reset by something",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeTimerElapsedTimeSec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/timer_elapsed_time_sec",
                    Units = "seconds",
                    Description = "Total time elapsed on the timer",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeLocalTimeSec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/local_time_sec",
                    Units = "seconds",
                    Description = "Local time  (seconds since midnight??)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeZuluTimeSec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/zulu_time_sec",
                    Units = "seconds",
                    Description = "Zulu time  (seconds since midnight??)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeLocalDateDays
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/local_date_days",
                    Units = "days",
                    Description = "Date in days since January 1st",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeUseSystemTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/use_system_time",
                    Units = "boolean",
                    Description = "Use system date and time for local time",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimePaused
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/paused",
                    Units = "boolean",
                    Description = "Is the sim paused?  Use cmd keys to change this.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeSimSpeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/sim_speed",
                    Units = "ratio",
                    Description = "This is the multiplier for real-time...1 = realtime, 2 = 2x, 0 = paused, etc.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeSimSpeedActual
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/sim_speed_actual",
                    Units = "ratio",
                    Description = "The actual time-speed increase the sim has achieved - takes into account fps limiting.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeGroundSpeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/ground_speed",
                    Units = "ratio",
                    Description = "This is the multiplier on ground speed, for faster travel via double-distance",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeHobbsTime
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/hobbs_time",
                    Units = "seconds",
                    Description = "elapsed time on the Hobbs meter",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement TimeIsInReplay
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/time/is_in_replay",
                    Units = "boolean",
                    Description = "true if we are in replay mode, false if we are flying",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static StringDataRefElement VersionSimBuildString
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/version/sim_build_string",
                    Frequency = DefaultFrequency,
                    StringLenght = 256
                };
            }
        }
        public static StringDataRefElement VersionXplmBuildString
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/version/xplm_build_string",
                    Frequency = DefaultFrequency,
                    StringLenght = 256
                };
            }
        }
        public static FloatDataRefElement VersionXplaneeInternalVersion
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/version/xplanee_internal_version",
                    Units = "integer",
                    Description = "This is the internal build number - it is a unique integer that always increases and is unique with each beta.  For example, 10.51b5 might be 105105.  There is no guarantee that the build numbe (last 2 digits) are in sync with the official beta number.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement VersionXplaneInternalVersion
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/version/xplane_internal_version",
                    Units = "integer",
                    Description = "This is the internal build number - it is a unique integer that always increases and is unique with each beta.  For example, 10.51b5 might be 105105.  There is no guarantee that the build numbe (last 2 digits) are in sync with the official beta number.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeaponsWeaponCount
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weapons/weapon_count",
                    Units = "int",
                    Description = "This is the number of weapons available via datarefs.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeaponsShellIsAttached
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weapons/shell/is_attached",
                    Units = "V11TODO",
                    Description = "TODO",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeaponsShellThrustRat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weapons/shell/thrust_rat",
                    Units = "V11TODO",
                    Description = "TODO",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudType_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_type[0]",
                    Units = "Cloud",
                    Description = "enumeration",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudType_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_type[1]",
                    Units = "Cloud",
                    Description = "enumeration",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudType_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_type[2]",
                    Units = "Cloud",
                    Description = "enumeration",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudCoverage_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_coverage[0]",
                    Units = "Coverage",
                    Description = "0..6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudCoverage_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_coverage[1]",
                    Units = "Coverage",
                    Description = "0..6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudCoverage_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_coverage[2]",
                    Units = "Coverage",
                    Description = "0..6",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudBaseMslM_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_base_msl_m[0]",
                    Units = "meters",
                    Description = "MSL >= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudBaseMslM_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_base_msl_m[1]",
                    Units = "meters",
                    Description = "MSL >= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudBaseMslM_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_base_msl_m[2]",
                    Units = "meters",
                    Description = "MSL >= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudTopsMslM_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_tops_msl_m[0]",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudTopsMslM_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_tops_msl_m[1]",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherCloudTopsMslM_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/cloud_tops_msl_m[2]",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherVisibilityReportedM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/visibility_reported_m",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherRainPercent
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/rain_percent",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherThunderstormPercent
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/thunderstorm_percent",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindTurbulencePercent
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_turbulence_percent",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherBarometerSealevelInhg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/barometer_sealevel_inhg",
                    Units = "29.92",
                    Description = "+- ....",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherHasRealWeatherBool
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/has_real_weather_bool",
                    Units = "0,1",
                    Description = "Whether a real weather file has been located.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherUseRealWeatherBool
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/use_real_weather_bool",
                    Units = "0,1",
                    Description = "Whether a real weather file is in use.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherDownloadRealWeather
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/download_real_weather",
                    Units = "0,1",
                    Description = "If true, the sim will attempt to download real weather files when real weather is enabled.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherSigma
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/sigma",
                    Units = "???",
                    Description = "The atmospheric density as a ratio compared to sea level.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherRho
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/rho",
                    Units = "???",
                    Description = "The density of the air in kg/cubic meters.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherBarometerCurrentInhg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/barometer_current_inhg",
                    Units = "29.92+-....",
                    Description = "This is the barometric pressure at the point the current flight is at.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherGravityMss
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/gravity_mss",
                    Units = "meters/sec^2",
                    Description = "This is the acceleration of gravity for the current planet.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherSpeedSoundMs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/speed_sound_ms",
                    Units = "meters/sec",
                    Description = "This is the speed of sound in meters/second at the plane's location.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindAltitudeMslM_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_altitude_msl_m[0]",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindAltitudeMslM_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_altitude_msl_m[1]",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindAltitudeMslM_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_altitude_msl_m[2]",
                    Units = "meters",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindDirectionDegt_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_direction_degt[0]",
                    Units = "[0",
                    Description = "- 360)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindDirectionDegt_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_direction_degt[1]",
                    Units = "[0",
                    Description = "- 360)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindDirectionDegt_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_direction_degt[2]",
                    Units = "[0",
                    Description = "- 360)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindSpeedKt_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_speed_kt[0]",
                    Units = "kts",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindSpeedKt_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_speed_kt[1]",
                    Units = "kts",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindSpeedKt_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_speed_kt[2]",
                    Units = "kts",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherShearDirectionDegt_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/shear_direction_degt[0]",
                    Units = "[0",
                    Description = "- 360)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherShearDirectionDegt_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/shear_direction_degt[1]",
                    Units = "[0",
                    Description = "- 360)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherShearDirectionDegt_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/shear_direction_degt[2]",
                    Units = "[0",
                    Description = "- 360)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherShearSpeedKt_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/shear_speed_kt[0]",
                    Units = "kts",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherShearSpeedKt_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/shear_speed_kt[1]",
                    Units = "kts",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherShearSpeedKt_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/shear_speed_kt[2]",
                    Units = "kts",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherTurbulence_0
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/turbulence[0]",
                    Units = "[0",
                    Description = "- 10]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherTurbulence_1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/turbulence[1]",
                    Units = "[0",
                    Description = "- 10]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherTurbulence_2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/turbulence[2]",
                    Units = "[0",
                    Description = "- 10]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWaveAmplitude
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wave_amplitude",
                    Units = "meters",
                    Description = "Amplitude of waves in the water (height of waves)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWaveLength
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wave_length",
                    Units = "meters",
                    Description = "Length of a single wave in the water",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWaveSpeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wave_speed",
                    Units = "meters/second",
                    Description = "Speed of water waves",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWaveDir
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wave_dir",
                    Units = "degrees",
                    Description = "Direction of waves.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherTemperatureSealevelC
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/temperature_sealevel_c",
                    Units = "degreesC",
                    Description = "The temperature at sea level.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherTemperatureTropoC
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/temperature_tropo_c",
                    Units = "degreesC",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherTropoAltMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/tropo_alt_mtr",
                    Units = "meters",
                    Description = "???",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherDewpoiSealevelC
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/dewpoi_sealevel_c",
                    Units = "degrees",
                    Description = "C",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherTemperatureAmbientC
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/temperature_ambient_c",
                    Units = "degrees",
                    Description = "C",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherTemperatureLeC
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/temperature_le_c",
                    Units = "degrees",
                    Description = "C",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherThermalPercent
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/thermal_percent",
                    Units = "[0.0",
                    Description = "- 1.0]",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherThermalRateMs
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/thermal_rate_ms",
                    Units = "m/s",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherThermalAltitudeMslM
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/thermal_altitude_msl_m",
                    Units = "m",
                    Description = "MSL >= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherRunwayFriction
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/runway_friction",
                    Units = "0,1,2",
                    Description = "The friction constant for runways (how wet they are).  0 = good, 1 = fair, 2 = poor",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherRunwayIsPatchy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/runway_is_patchy",
                    Units = "Booelan",
                    Description = "0 = uniform conditions, 1 = patchy conditions",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindDirectionDegt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_direction_degt",
                    Units = "[0-359)",
                    Description = "The effective direction of the wind at the plane's location.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindSpeedKt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_speed_kt",
                    Units = "kts",
                    Description = ">= 0",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindNowXMsc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_now_x_msc",
                    Units = "meters/sec",
                    Description = "Wind direction vector in OpenGL coordinates, X component.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindNowYMsc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_now_y_msc",
                    Units = "meters/sec",
                    Description = "Wind direction vector in OpenGL coordinates, Y component.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherWindNowZMsc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/wind_now_z_msc",
                    Units = "meters/sec",
                    Description = "Wind direction vector in OpenGL coordinates, Z component.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WeatherPrecipitationOnAircraftRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/weather/precipitation_on_aircraft_ratio",
                    Units = "[0..1]",
                    Description = "The amount of rain on the airplane windshield as a ratio from 0 to 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatFrigateDeckHeightMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/frigate_deck_height_mtr",
                    Units = "meters",
                    Description = "Deck height of the frigate (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatFrigateILSOffsetXMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/frigate_ILS_offset_x_mtr",
                    Units = "meters",
                    Description = "X position of the frigate ILS transmitter (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatFrigateILSOffsetZMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/frigate_ILS_offset_z_mtr",
                    Units = "meters",
                    Description = "Z position of the frigate ILS transmitter (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierDeckHeightMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_deck_height_mtr",
                    Units = "meters",
                    Description = "Deck height of the carrier (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierILSOffsetXMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_ILS_offset_x_mtr",
                    Units = "meters",
                    Description = "X position of the carrier ILS transmitter (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierILSOffsetZMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_ILS_offset_z_mtr",
                    Units = "meters",
                    Description = "Z position of the carrier ILS transmitter (in coordinates of the OBJ model)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierApproachHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_approach_heading",
                    Units = "degrees(true)",
                    Description = "Relative heading of the approach path from the carrier's heading",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierCatshotHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_heading",
                    Units = "degrees(true)",
                    Description = "Relative heading of the catshot relative to the carrier's heading",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierCatshotStartXMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_start_x_mtr",
                    Units = "meters",
                    Description = "X position (in model coordinates) of the start of the cat-shot track",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierCatshotStartZMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_start_z_mtr",
                    Units = "meters",
                    Description = "Z position (in model coordinates) of the start of the cat-shot track",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierCatshotEndXMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_end_x_mtr",
                    Units = "meters",
                    Description = "X position (in model coordinates) of the end of the cat-shot track",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierCatshotEndZMtr
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_end_z_mtr",
                    Units = "meters",
                    Description = "Z position (in model coordinates) of the end of the cat-shot track",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldBoatCarrierCatshotStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/boat/carrier_catshot_status",
                    Units = "enum",
                    Description = "0=no cat shot set up,1=cat shot waiting to launch,2=in progress",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldWinchWinchRampUpTimeSec
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/winch/winch_ramp_up_time_sec",
                    Units = "seconds",
                    Description = "This is how long it takes the winch to reach maximum speed for a glider winch take-off.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldWinchWinchSpeedKnots
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/winch/winch_speed_knots",
                    Units = "knots",
                    Description = "This is how fast the winch moves at its maximum speed.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldWinchWinchInitialLength
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/winch/winch_initial_length",
                    Units = "meters",
                    Description = "This is the initial length of cable for a winch takeoff.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement WorldWinchWinchMaxBhp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/world/winch/winch_max_bhp",
                    Units = "bhp",
                    Description = "This is the maximum horsepower the winch can deliver reeling in the cable. Cable speed will decay with higher force on the cable to not exceed this limit.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Aircraft2EngineLowIdleRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft2/engine/low_idle_ratio",
                    Units = "multiplier",
                    Description = "This is the idle ratio for the engines at low idle.  1.0 provides default behavior; this can be any number greater than zero.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Aircraft2EngineHighIdleRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft2/engine/high_idle_ratio",
                    Units = "multiplier",
                    Description = "This is the idle ratio for the engines at high idle. 1.0 provides default behavior; this can be any number greater than zero.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Aircraft2EngineMaxPowerLimitedWatts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/aircraft2/engine/max_power_limited_watts",
                    Units = "watts",
                    Description = "This is the maximum power output of the engine at sea level.  Note that if the engine has a waste gate this is the same as max power at critical altitude.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsMasterCaution
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/master_caution",
                    Units = "boolean",
                    Description = "This goes off any time there is a major problem with the bird: like it is on fire or something    // array of annunciators... kept as array for UDP IO",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsMasterWarning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/master_warning",
                    Units = "boolean",
                    Description = "This goes off whenever there is some more moderate problem with the bird... maybe lo fuel pressure ot qty",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsMasterAccept
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/master_accept",
                    Units = "boolean",
                    Description = "Hit this button to CLEAR the master caution and warning: it says that you hear the buzzer and to shut it up already",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsAutopilotDisconnect
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_disconnect",
                    Units = "boolean",
                    Description = "This goes off for a few moments when the autopilot disconnects.. you wanna KNOW if otto just quit on you!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsLowVacuum
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/low_vacuum",
                    Units = "boolean",
                    Description = "The vacuum pressure, which drives the instruments in the old prop planes, is low: the artificial horizon may loose it is orientation!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsLowVoltage
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/low_voltage",
                    Units = "boolean",
                    Description = "The voltage os too high or low on one of the electrical buses",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsFuelQuantity
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/fuel_quantity",
                    Units = "boolean",
                    Description = "Fuel qty. no points for guessing if it is too high or too low to trigger this one",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsHydraulicPressure
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/hydraulic_pressure",
                    Units = "boolean",
                    Description = "Hydraulic pressure. should indicate if press is lo or hi",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsSpeedbrake
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/speedbrake",
                    Units = "boolean",
                    Description = "Speedbrake deployed: good to know so you do not forget it..",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsGPWS
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/GPWS",
                    Units = "boolean",
                    Description = "Ground proximity warning system: PULL UP! PULL UP! my lancair does this during my typical red-baron approaches!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsIce
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/ice",
                    Units = "boolean",
                    Description = "Ice detected on the plane.. most people agree this is NOT a good thing.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsLowRotor
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/low_rotor",
                    Units = "boolean",
                    Description = "Rotor rpm on the helo has dropped below normal operating: power availability will be reduced!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsHighRotor
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/high_rotor",
                    Units = "boolean",
                    Description = "Rotor rpm on the helo has exceeded normal operating: power availability will be reduced, and god knows if the blades will stay ON!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsPitotHeat
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/pitot_heat",
                    Units = "boolean",
                    Description = "Pitot heat is OFF (YUP! OFF!) turn it on to heat up the pitot tube, which measures air pressure to give you air speed.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsTransonic
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/transonic",
                    Units = "boolean",
                    Description = "You are about to break the speed of sound when accelerating, or drop below the speed of sound if decelerating! the handling of the plane will change!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsSlats
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/slats",
                    Units = "boolean",
                    Description = "slats deployed",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsFlightDirector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/flight_director",
                    Units = "boolean",
                    Description = "flight director failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsAutopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot",
                    Units = "boolean",
                    Description = "autopilot failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsYawDamper
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/yaw_damper",
                    Units = "boolean",
                    Description = "yaw damper failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsHvac
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/hvac",
                    Units = "boolean",
                    Description = "duct overheated",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsBatteryChargeHi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/battery_charge_hi",
                    Units = "boolean",
                    Description = "battery is charging too rapidly - may overheat",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsCabinAltitude12500
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/cabin_altitude_12500",
                    Units = "boolean",
                    Description = "cabin altitude at or above 12500",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsAutopilotTrimFail
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_trim_fail",
                    Units = "boolean",
                    Description = "autopilot trim failure",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsElectricTrimOff
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/electric_trim_off",
                    Units = "boolean",
                    Description = "electric trim is off",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsCrossfeedOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/crossfeed_on",
                    Units = "boolean",
                    Description = "crossfeed on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsLandingTaxiLite
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/landing_taxi_lite",
                    Units = "boolean",
                    Description = "landing or taxiway light on but gear up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsCabinDoorOpen
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/cabin_door_open",
                    Units = "boolean",
                    Description = "cabin door is open",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsExternalPowerOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/external_power_on",
                    Units = "boolean",
                    Description = "external power is on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsPassengerOxyOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/passenger_oxy_on",
                    Units = "boolean",
                    Description = "passenger oxygen on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsGearUnsafe
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/gear_unsafe",
                    Units = "boolean",
                    Description = "gear is unsafe",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsAutopilotTrimDown
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_trim_down",
                    Units = "boolean",
                    Description = "autopilot trimming down",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsAutopilotTrimUp
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_trim_up",
                    Units = "boolean",
                    Description = "autopilot trimming up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsAutopilotBankLimit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_bank_limit",
                    Units = "boolean",
                    Description = "autopilot bank limit is turned ON, autopilot will keep bank below 12.5 degrees of bank",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsAutopilotSoftRide
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/autopilot_soft_ride",
                    Units = "boolean",
                    Description = "autopilot soft ride is on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsNoInverters
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/no_inverters",
                    Units = "boolean",
                    Description = "no inverters are on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsFuelPressure
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/fuel_pressure",
                    Units = "bitfield",
                    Description = "Fuel pressure is lo, or maybe hi, for this engine    // x8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsOilPressure
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/oil_pressure",
                    Units = "bitfield",
                    Description = "Oil pressure is lo, or maybe hi, for this engine    // x8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsOilTemperature
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/oil_temperature",
                    Units = "bitfield",
                    Description = "Oil temperature hi for this engine    // x8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsGenerator
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/generator",
                    Units = "bitfield",
                    Description = "The generator has failed! the plane cannot charge up. this may happen at lo rpm and go away as the engine revs. happens with my plane    // x8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsChipDetect
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/chip_detect",
                    Units = "bitfield",
                    Description = "We detected chips of metal in the engine somewhere. most people agree this is not good.    // x8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsEngineFire
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/engine_fire",
                    Units = "bitfield",
                    Description = "The engine is on FIRE! this adds to excitement    // x8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsReverserDeployed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/reverser_deployed",
                    Units = "bitfield",
                    Description = "Thrust-reverse deployed!    // x8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsAfterburner
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/afterburner",
                    Units = "bitfield",
                    Description = "Afterburners on!    // x8",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsInverter
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/inverter",
                    Units = "bitfield",
                    Description = "The inverter has failed! the plane cannot convert ac from the generators to dc for the instruments.     // x2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsStallWarning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/stall_warning",
                    Units = "boolean",
                    Description = "Stall warning going off, yes or no.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsStallWarningRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/stall_warning_ratio",
                    Units = "0..1",
                    Description = "For aircraft with variable stall warnings, 0 = no stall, 1 = full stall",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsGearWarning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/gear_warning",
                    Units = "boolean",
                    Description = "Gear warning going off, yes or no.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsNoSmoking
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/no_smoking",
                    Units = "boolean",
                    Description = "No smoking alert on, yes or no.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AnnunciatorsFastenSeatbelt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/annunciators/fasten_seatbelt",
                    Units = "boolean",
                    Description = "Seatbelt sign on, yes or no.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAutopilotSource
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot_source",
                    Units = "enum",
                    Description = "Autopilot source system, pilots (0) or copilots (1).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAutothrottleEnabled
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autothrottle_enabled",
                    Units = "boolean",
                    Description = "Auto-throttle on, 0 or 1.  This is the switch.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAutothrottleOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autothrottle_on",
                    Units = "boolean",
                    Description = "Auto-throttle really working?  Takes into account failures, esys, etc.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotHeadingMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_mode",
                    Units = "enum",
                    Description = "Autopilot heading mode.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAltitudeMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_mode",
                    Units = "enum",
                    Description = "Autopilot altitude mode.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotBankAngleMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/bank_angle_mode",
                    Units = "enum",
                    Description = "Maximum bank angle mode, 0->6. Higher number is steeper allowable bank.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotFlightDirectorMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director_mode",
                    Units = "enum",
                    Description = "Flight director mode, 0 is off, 1 is on, 2 is on with autopilot servos.  Good for the FD swich.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAutopilotOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/autopilot_on",
                    Units = "boolean",
                    Description = "Is the autopilot really on? Takes into account electrical system, failures, etc.;",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotServosOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/servos_on",
                    Units = "boolean",
                    Description = "Are the servos on?  Takes into account FD mode and control-wheel-steering, failures, etc.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAirspeedIsMach
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/airspeed_is_mach",
                    Units = "boolean",
                    Description = "Autopilot airspeed is Mach number rather than knots.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAltVviIsShowingVvi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/alt_vvi_is_showing_vvi",
                    Units = "boolean",
                    Description = "Is the combined alt/vvi selector showing VVI?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotVnavArmed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/vnav_armed",
                    Units = "boolean",
                    Description = "Vnav is armed, 0 or 1 - this is different from the \"FMS\" button - it is used ONLY for a physical G1000 connected by ethernet.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAltitudeHoldArmed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_hold_armed",
                    Units = "boolean",
                    Description = "Altitude is armed, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotHnavArmed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/hnav_armed",
                    Units = "boolean",
                    Description = "Localizer is armed, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotGlideslopeArmed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/glideslope_armed",
                    Units = "boolean",
                    Description = "Glideslope is armed, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotBackcourseOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/backcourse_on",
                    Units = "boolean",
                    Description = "Back course is armed, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAirspeedDialKtsMach
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/airspeed_dial_kts_mach",
                    Units = "knots/mach",
                    Description = "Airspeed hold value, knots or Mach depending on km_is_mach.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAirspeedDialKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/airspeed_dial_kts",
                    Units = "Knots",
                    Description = "Airspeed hold bug, always in knots, even if the AP is in mach-hold mode.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotHeadingDialDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_dial_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Heading hold commanded, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotHeadingDialDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_dial_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Heading hold commanded, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotVviDialFpm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/vvi_dial_fpm",
                    Units = "feet/minute",
                    Description = "VVI commanded in FPM.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAltitudeDialFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_dial_ft",
                    Units = "feet",
                    Description = "VVI commanded in FPM.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAltitudeHoldFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_hold_ft",
                    Units = "feet",
                    Description = "Altitude hold commanded in feet indicated.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAltitudeVnavFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_vnav_ft",
                    Units = "feet",
                    Description = "Target altitude hold in VNAV mode.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotSyncHoldPitchDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/sync_hold_pitch_deg",
                    Units = "degrees",
                    Description = "Pitch-hold commanded in degrees up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotSyncHoldRollDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/sync_hold_roll_deg",
                    Units = "degrees",
                    Description = "Roll-hold commanded in degrees right.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotFlightDirectorPitchDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director_pitch_deg",
                    Units = "degrees",
                    Description = "Flight director pitch deflection in degrees, pos up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotFlightDirectorRollDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/flight_director_roll_deg",
                    Units = "degrees",
                    Description = "Flight director roll deflection in degrees, pos right.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotTOGAPitchDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/TOGA_pitch_deg",
                    Units = "degrees",
                    Description = "Nose-up pitch to hold when TOGA operations are in effect.  Set this back when your aircraft unloads!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotRollStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/roll_status",
                    Units = "enum",
                    Description = "Autopilot Roll-Hold Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotHeadingStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/heading_status",
                    Units = "enum",
                    Description = "Autopilot Heading Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotNavStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/nav_status",
                    Units = "enum",
                    Description = "Autopilot Nav Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotGpssStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/gpss_status",
                    Units = "enum",
                    Description = "Autopilot GPSS Status. 0=off, 2=active",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotBackcourseStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/backcourse_status",
                    Units = "enum",
                    Description = "Autopilot Back-course Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotTOGALateralStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/TOGA_lateral_status",
                    Units = "enum",
                    Description = "Autopilot Lateral TOGA mode: 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotPitchStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/pitch_status",
                    Units = "enum",
                    Description = "Autopilot Pitch-Hold Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotVviStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/vvi_status",
                    Units = "enum",
                    Description = "Autopilot VVI Status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotSpeedStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/speed_status",
                    Units = "enum",
                    Description = "Autopilot Speed-hold (via pitch) status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotAltitudeHoldStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/altitude_hold_status",
                    Units = "enum",
                    Description = "Autopilot Altitude hold status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotGlideslopeStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/glideslope_status",
                    Units = "enum",
                    Description = "Autopilot glideslope status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotVnavStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/vnav_status",
                    Units = "enum",
                    Description = "Autopilot VNAV status. 0=off,1=armed,2=captured - for a physical hardware g1000 connected by Ethernet only!!!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotFmsVnav
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/fms_vnav",
                    Units = "boolean",
                    Description = "Enables the FMS to take over vertical control of the autopilot.   This matches the command \"sim/autopilot/FMS\".\"",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotTOGAStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/TOGA_status",
                    Units = "enum",
                    Description = "Autopilot TOGA vertical (go-around) status. 0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2AutopilotApproachStatus
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/autopilot/approach_status",
                    Units = "enum",
                    Description = "Autopilot approach status.  0=off,1=armed,2=captured",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2CameraCameraOffsetPitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/camera/camera_offset_pitch",
                    Units = "degrees",
                    Description = "In-cockpit camera angular offset relative to airplane orientation (Pitch)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2CameraCameraOffsetHeading
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/camera/camera_offset_heading",
                    Units = "degrees",
                    Description = "In-cockpit camera angular offset relative to airplane orientation (Heading)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2CameraCameraOffsetRoll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/camera/camera_offset_roll",
                    Units = "degrees",
                    Description = "In-cockpit camera angular offset relative to airplane orientation (Roll)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2CameraCameraFieldOfView
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/camera/camera_field_of_view",
                    Units = "degrees",
                    Description = "In-cockpit camera field of view",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerElapsedTimeHours
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/elapsed_time_hours",
                    Units = "hours",
                    Description = "Elapsed time on the timer, hours",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerElapsedTimeMinutes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/elapsed_time_minutes",
                    Units = "minutes",
                    Description = "Elapsed time on the timer, minutes",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerElapsedTimeSeconds
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/elapsed_time_seconds",
                    Units = "seconds",
                    Description = "Elapsed time on the timer, seconds",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerZuluTimeHours
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/zulu_time_hours",
                    Units = "hours",
                    Description = "Zulu time, hours",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerZuluTimeMinutes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/zulu_time_minutes",
                    Units = "minutes",
                    Description = "Zulu time, minutes",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerZuluTimeSeconds
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/zulu_time_seconds",
                    Units = "seconds",
                    Description = "Zulu time, seconds",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerLocalTimeHours
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/local_time_hours",
                    Units = "hours",
                    Description = "Local time, hours",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerLocalTimeMinutes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/local_time_minutes",
                    Units = "minutes",
                    Description = "Local time, minutes",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerLocalTimeSeconds
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/local_time_seconds",
                    Units = "seconds",
                    Description = "Local time, seconds",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerHobbsTimeHours
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/hobbs_time_hours",
                    Units = "hours",
                    Description = "Hobbs meter time, hours",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerHobbsTimeMinutes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/hobbs_time_minutes",
                    Units = "minutes",
                    Description = "Hobbs meter time, minutes",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerHobbsTimeSeconds
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/hobbs_time_seconds",
                    Units = "seconds",
                    Description = "Hobbs meter time, seconds",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerTimerRunning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/timer_running",
                    Units = "boolean",
                    Description = "True if timer is running",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerTimerIsGMT
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/timer_is_GMT",
                    Units = "boolean",
                    Description = "True if time shown is GMT",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerDateIsShowing
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/date_is_showing",
                    Units = "boolean",
                    Description = "True if date is showing (date button pressed recently)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerCurrentDay
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/current_day",
                    Units = "day",
                    Description = "Numeric day of month",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerCurrentMonth
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/current_month",
                    Units = "month",
                    Description = "Numeric month of the year",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ClockTimerTimerMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/clock_timer/timer_mode",
                    Units = "enum",
                    Description = "TODO",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsYokePitchRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/yoke_pitch_ratio",
                    Units = "-1..1",
                    Description = "This is how much the yoke is deflected in the cockpit, in ratio, where -1.0 is full down, and 1.0 is full up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsYokeRollRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/yoke_roll_ratio",
                    Units = "-1..1",
                    Description = "This is how much the yoke is deflected in the cockpit, in ratio, where -1.0 is full left, and 1.0 is full right.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsYokeHeadingRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/yoke_heading_ratio",
                    Units = "-1..1",
                    Description = "This is how much the rudder is deflected in the cockpit, in ratio, where -1.0 is full left, and 1.0 is full right.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsSpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/speedbrake_ratio",
                    Units = "ratio",
                    Description = "This is how much the speebrake HANDLE is deflected, in ratio, where 0.0 is fully retracted, 0.5 is halfway down, and 1.0 is fully down, and -0.5 is speedbrakes ARMED.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsWingsweepRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/wingsweep_ratio",
                    Units = "ratio",
                    Description = "Requested sweep, in ratio. 0.0 is no sweep requested, 1 is max sweep requested.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsThrustVectorRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/thrust_vector_ratio",
                    Units = "ratio",
                    Description = "Requested thrust vector, in ratio. 0.0 is no thrust vector requested, 1 is max thrust vector requested.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsDihedralRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/dihedral_ratio",
                    Units = "ratio",
                    Description = "Requested dihedral, in ratio. 0.0 is no dihedral requested, 1 is max dihedral requested.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsIncidenceRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/incidence_ratio",
                    Units = "ratio",
                    Description = "Requested incidence, in ratio. 0.0 is no incidence requested, 1 is max incidence requested.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsWingRetractionRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/wing_retraction_ratio",
                    Units = "ratio",
                    Description = "Requested wing-retraction, in ratio. 0.0 is no wing-retraction requested, 1 is max wing-retraction requested.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsFlapRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/flap_ratio",
                    Units = "ratio",
                    Description = "This is the flap HANDLE location, in ratio, where 0.0 is handle fully retracted, and 1.0 is handle fully extended.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsParkingBrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/parking_brake_ratio",
                    Units = "ratio",
                    Description = "This is the overall brake requested by the parking brake button... 0.0 is none, 1.0 is complete.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsLeftBrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/left_brake_ratio",
                    Units = "ratio",
                    Description = "This is additional left brake requested by pedal deflection, 0.0 to 1.0.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsRightBrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/right_brake_ratio",
                    Units = "ratio",
                    Description = "This is additional right brake requested by pedal deflection, 0.0 to 1.0.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsGearHandleDown
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/gear_handle_down",
                    Units = "boolean",
                    Description = "Gear handle position. 0 is up. 1 is down.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsNosewheelSteerOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/nosewheel_steer_on",
                    Units = "boolean",
                    Description = "Is the nosewheel steering turned on? 0 or 1.  This must be off AND the tail wheel must be unlocked to free castor.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsTailwheelLockRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/tailwheel_lock_ratio",
                    Units = "ratio",
                    Description = "Tail-wheel lockig ratio. 0 for free-castoring, 1 for totally locked.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsAileronTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/aileron_trim",
                    Units = "-1..1",
                    Description = "Aileron trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the aileron trim is deflected enough to move the ailerons through 30% of their travel, then that is an aileron trim of 0.3. -1=left 1=right",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsElevatorTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/elevator_trim",
                    Units = "-1..1",
                    Description = "Elevator trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the elevator trim is deflected enough to move the elevators through 30% of their travel, then that is an elevator trim of 0.3. -1=down 1=up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsRudderTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/rudder_trim",
                    Units = "-1..1",
                    Description = "Rudder trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rudder trim is deflected enough to move the rudders through 30% of their travel, then that is an rudder trim of 0.3. -1=left 1=right",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsRotorTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/rotor_trim",
                    Units = "-1..1",
                    Description = "Rotor trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rotor trim is deflected enough to move the rotor through 30% of its travel, then that is a rotor trim of 0.3. -1=down 1=up",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsWaterRudderHandleRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/water_rudder_handle_ratio",
                    Units = "ratio",
                    Description = "Deployment of the water rudder, 0 is none, 1 is max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ControlsFlapHandleDeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/controls/flap_handle_deploy_ratio",
                    Units = "ratio",
                    Description = "This is how far the indicator of flap deployment has moved in the cockpit.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISMapMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/map_mode",
                    Units = "enum",
                    Description = "Map mode. 0=approach, 1=vor,2=map,3=nav,4=plan",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISMapModeIsHSI
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/map_mode_is_HSI",
                    Units = "boolean",
                    Description = "Map is in HSI mode, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISMapRange
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/map_range",
                    Units = "enum",
                    Description = "Map range, 1->6, where 6 is the longest range.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISArgusMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/argus_mode",
                    Units = "enum",
                    Description = "Argus mode, 7=departure,8=enroute,9=approach,10=radar_on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEcamMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/ecam_mode",
                    Units = "enum",
                    Description = "ECAM mode, 0=engine,1=fuel,2=controls,3=hydraulics,4=failures",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFISWeatherOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_weather_on",
                    Units = "boolean",
                    Description = "On the moving map, show the weather or not.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFISTcasOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_tcas_on",
                    Units = "boolean",
                    Description = "On the moving map, show the TCAS or not.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFISAirportOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_airport_on",
                    Units = "boolean",
                    Description = "On the moving map, show the airports or not.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFISFixOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_fix_on",
                    Units = "boolean",
                    Description = "On the moving map, show the fixes or not.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFISVorOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_vor_on",
                    Units = "boolean",
                    Description = "On the moving map, show the VORs or not.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFISNdbOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_ndb_on",
                    Units = "boolean",
                    Description = "On the moving map, show the NDBs or not.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFIS1SelectionPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_1_selection_pilot",
                    Units = "enum",
                    Description = "EFIS waypoint 1 is showing: 0=ADF1, 1=OFF, or 2=VOR1 -- Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFIS1SelectionCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_1_selection_copilot",
                    Units = "enum",
                    Description = "EFIS waypoint 2 is showing: 0=ADF1, 1=OFF, or 2=VOR1 -- Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFIS2SelectionPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_2_selection_pilot",
                    Units = "enum",
                    Description = "EFIS waypoint 1 is showing: 0=ADF2, 1=OFF, or 2=VOR2 -- Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EFISEFIS2SelectionCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/EFIS/EFIS_2_selection_copilot",
                    Units = "enum",
                    Description = "EFIS waypoint 2 is showing: 0=ADF2, 1=OFF, or 2=VOR2 -- Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalAPUGeneratorOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_generator_on",
                    Units = "boolean",
                    Description = "APU generator is turned on, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalAPUGeneratorAmps
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_generator_amps",
                    Units = "amps",
                    Description = "APU generator amperage.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalAPUStarterSwitch
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_starter_switch",
                    Units = "boolean",
                    Description = "APU power switch, 0 is off, 1 is on, 2 is start-er-up!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalAPUN1Percent
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_N1_percent",
                    Units = "percent",
                    Description = "N1 of the APU",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalAPURunning
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/APU_running",
                    Units = "boolean",
                    Description = "APU actually running, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalCrossTie
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/cross_tie",
                    Units = "boolean",
                    Description = "Switch to connect the two busses together - power from one feeds the other.  0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalDcVoltmeterSelection
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/dc_voltmeter_selection",
                    Units = "enum",
                    Description = "Volt-meter selection (0=external,1=ctr,2=lft,3=rgt,4=tpl,5=bat - use cmnds to set!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalDcVoltmeterValue
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/dc_voltmeter_value",
                    Units = "voltage",
                    Description = "volt-meter value",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalHUDBrightnessRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/HUD_brightness_ratio",
                    Units = "ratio",
                    Description = "Actual HUD brightness, taking into account failures",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalHUDBrightnessRatioAuto
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/HUD_brightness_ratio_auto",
                    Units = "ratio",
                    Description = "Actual HUD brightness, taking into account failures",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2ElectricalHUDBrightnessRatioManual
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/electrical/HUD_brightness_ratio_manual",
                    Units = "ratio",
                    Description = "Actual HUD brightness, taking into account failures",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EngineActuatorsThrottleRatioAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/throttle_ratio_all",
                    Units = "ratio",
                    Description = "Throttle position of the handle itself - this controls all the handles at once.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EngineActuatorsThrottleBetaRevRatioAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/throttle_beta_rev_ratio_all",
                    Units = "ratio",
                    Description = "Controls the throttle handle position, but includes beta and reverse.  -2..-1 is reverse, -1..0 is beta, 0..1 is alpha.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EngineActuatorsPropRotationSpeedRadSecAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_rotation_speed_rad_sec_all",
                    Units = "radians/second",
                    Description = "Prop handle position, this controls all props at once.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EngineActuatorsPropAngleDegreesAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_angle_degrees_all",
                    Units = "degrees",
                    Description = "Prop handle position, in degrees, set all at once.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EngineActuatorsPropRatioAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/prop_ratio_all",
                    Units = "ratio",
                    Description = "Prop handle position, in ratio. This controls all handles at once. NOTE: This is also used for helicopter collective!",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2EngineActuatorsMixtureRatioAll
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/engine/actuators/mixture_ratio_all",
                    Units = "ratio",
                    Description = "Mixture handle position, this controls all at once.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2FuelFuelTankSelectorLeft
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_selector_left",
                    Units = "enum",
                    Description = "This is the left-engine fuel-tank selector.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2FuelFuelTankSelectorRight
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_selector_right",
                    Units = "enum",
                    Description = "This is the right-engine fuel-tank selector.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2FuelFuelTankSelector
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_selector",
                    Units = "enum",
                    Description = "0=none,1=left,2=center,3=right,4=all",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2FuelFuelTankTransferTo
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_transfer_to",
                    Units = "enum",
                    Description = "0=none,1=left,2=center,3=right",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2FuelFuelTankTransferFrom
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_tank_transfer_from",
                    Units = "enum",
                    Description = "0=none,1=left,2=center,3=right",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2FuelShowingAux
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/showing_aux",
                    Units = "bool",
                    Description = "True if user is holding down the aux-tank button.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2FuelFuelTotalizerInitKg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_totalizer_init_kg",
                    Units = "kg",
                    Description = "Total fuel on board the fuel totalizer was initialized with",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2FuelFuelTotalizerSumKg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/fuel/fuel_totalizer_sum_kg",
                    Units = "kg",
                    Description = "Total accumulated fuel used by all engines since totalizer initialization",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesActuatorsBarometerSettingInHgPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/barometer_setting_in_hg_pilot",
                    Units = "inches_hg",
                    Description = "Barometric pressure setting, inches HG.  Pilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesActuatorsBarometerSettingInHgCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/barometer_setting_in_hg_copilot",
                    Units = "inches_hg",
                    Description = "Barometric pressure setting, inches HG.  Copilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesActuatorsRadioAltimeterBugFtPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/radio_altimeter_bug_ft_pilot",
                    Units = "feet",
                    Description = "Radio altitude bug entered into the radio altimeter. Pilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesActuatorsRadioAltimeterBugFtCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/radio_altimeter_bug_ft_copilot",
                    Units = "feet",
                    Description = "Radio altitude bug entered into the radio altimeter. Copilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesActuatorsArtificialHorizonAdjustDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/artificial_horizon_adjust_deg_pilot",
                    Units = "degrees",
                    Description = "Artificial horizon pitch-reference adjustment. Pilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesActuatorsArtificialHorizonAdjustDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/artificial_horizon_adjust_deg_copilot",
                    Units = "degrees",
                    Description = "Artificial horizon pitch-reference adjustment. Copilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesActuatorsAirspeedBugDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/actuators/airspeed_bug_deg",
                    Units = "degrees",
                    Description = "ASI bug location on the dial, in degrees, 0 straight up, positive clockwise.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsSlipDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/slip_deg",
                    Units = "degrees",
                    Description = "Slip indication, in degrees of ball deflection from centered.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsCompassHeadingDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/compass_heading_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated heading of the wet compass, in degrees.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_acceleration_kts_sec_pilot",
                    Units = "knots/second",
                    Description = "acceleration of airspeed (ASI trend)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsAirspeedAccelerationKtsSecCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_acceleration_kts_sec_copilot",
                    Units = "knots/second",
                    Description = "acceleration of airspeed (ASI trend)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsAirspeedKtsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_kts_pilot",
                    Units = "knots",
                    Description = "Indicated airspeed in knots, pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsAirspeedKtsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/airspeed_kts_copilot",
                    Units = "knots",
                    Description = "Indicated airspeed in knots, copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsAltitudeFtPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/altitude_ft_pilot",
                    Units = "feet",
                    Description = "Indicated height, MSL, in feet, primary system, based on pilots barometric pressure input.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsAltitudeFtCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/altitude_ft_copilot",
                    Units = "feet",
                    Description = "Indicated height, MSL, in feet, primary system, based on co-pilots barometric pressure input.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsVviFpmPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/vvi_fpm_pilot",
                    Units = "feet/minute",
                    Description = "Indicated vertical speed in feet per minute, pilot system.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsVviFpmCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/vvi_fpm_copilot",
                    Units = "feet/minute",
                    Description = "Indicated vertical speed in feet per minute, copilot system.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsTurnRateRollDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/turn_rate_roll_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated rate-of-turn, in degrees deflection, for newer roll-augmented turn-indicators.  Pilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsTurnRateRollDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/turn_rate_roll_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated rate-of-turn, in degrees deflection, for newer roll-augmented turn-indicators.  Copilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsTurnRateHeadingDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/turn_rate_heading_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated rate-of-turn, in degrees deflection, for old-style turn-indicators.  Pilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsTurnRateHeadingDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/turn_rate_heading_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated rate-of-turn, in degrees deflection, for old-style turn-indicators.  Copilot side.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsHeadingAHARSDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_AHARS_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: AHARS.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsHeadingAHARSDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_AHARS_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: AHARS.  Side: Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsHeadingElectricDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_electric_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: electric gyro.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsHeadingElectricDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_electric_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: electric gyro.  Side: Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsHeadingVacuumDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_vacuum_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: vacuum gyro.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsHeadingVacuumDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/heading_vacuum_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated magnetic heading, in degrees.  Source: vacuum gyro.  Side: Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsPitchAHARSDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: AHARS.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsPitchAHARSDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: AHARS.  Side: Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsPitchElectricDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_electric_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: electric gyro.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsPitchElectricDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_electric_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: electric gyro.  Side: Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsPitchVacuumDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: vacuum gyro.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsPitchVacuumDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/pitch_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated pitch, in degrees, positive up.  Source: vacuum gyro.  Side: Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRadioAltimeterHeightFtPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/radio_altimeter_height_ft_pilot",
                    Units = "feet",
                    Description = "Radio-altimeter indicated height in feet, pilot-side",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRadioAltimeterHeightFtCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/radio_altimeter_height_ft_copilot",
                    Units = "feet",
                    Description = "Radio-altimeter indicated height in feet, pilot-side",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRadioAltimeterDhLitPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/radio_altimeter_dh_lit_pilot",
                    Units = "boolean",
                    Description = "Radio-altimeter indicated height in feet, pilot-side",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRadioAltimeterDhLitCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/radio_altimeter_dh_lit_copilot",
                    Units = "boolean",
                    Description = "Radio-altimeter indicated height in feet, pilot-side",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRollAHARSDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: AHARS.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRollAHARSDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: AHARS.  Side: Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRollElectricDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_electric_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: electric gyro.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRollElectricDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_electric_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: electric gyro.  Side: Copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRollVacuumDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.  Source: vacuum gyro.  Side: Pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsRollVacuumDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/roll_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated roll, in degrees, positive right.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsWindHeadingDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/wind_heading_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Wind direction currently acting on the plane, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsWindSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/wind_speed_kts",
                    Units = "knots",
                    Description = "Wind speed currently acting on the plane, in knots true.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsSuction1Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/suction_1_ratio",
                    Units = "ratio",
                    Description = "Vacuum system 1 suction as ratio of max available in plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsSuction2Ratio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/suction_2_ratio",
                    Units = "ratio",
                    Description = "Vacuum system 2 suction as ratio of max available in plane.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsTotalEnergyFpm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/total_energy_fpm",
                    Units = "feet/minute",
                    Description = "Total energy in feet/minute",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsWaterRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/water_ratio",
                    Units = "ratio",
                    Description = "Ratio of releasable water still in the tank, 0..1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsSideslipDegrees
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/sideslip_degrees",
                    Units = "degrees",
                    Description = "Sideslip in degrees",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsPropSyncDegrees
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/prop_sync_degrees",
                    Units = "degrees",
                    Description = "Degrees difference between two prop.  Can be used for prop sync display.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsGroundTrackMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/ground_track_mag_pilot",
                    Units = "degrees",
                    Description = "The ground track of the aircraft in degrees magnetic",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsGroundTrackMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/ground_track_mag_copilot",
                    Units = "degrees",
                    Description = "The ground track of the aircraft in degrees magnetic",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsMaxMachNumberInKias
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/max_mach_number_in_kias",
                    Units = "knots",
                    Description = "For planes with a max mach number, this is the max mach number converted to KIAS for the current plane altitude, etc. - useful for adaptive needles and limit markers on tapes",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2GaugesIndicatorsMaxMachNumberOrSpeedKias
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/gauges/indicators/max_mach_number_or_speed_kias",
                    Units = "knots",
                    Description = "For planes with a max mach number, this is the lesser of the max mach number converted to KIAS for the current plane altitude and V-never-exceed.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2HydraulicsIndicatorsHydraulicPressure1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/hydraulics/indicators/hydraulic_pressure_1",
                    Units = "any",
                    Description = "Hydraulic system 1 pressure, units set by Plane-Maker.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2HydraulicsIndicatorsHydraulicPressure2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/hydraulics/indicators/hydraulic_pressure_2",
                    Units = "any",
                    Description = "Hydraulic system 2 pressure, units set by Plane-Maker.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2HydraulicsIndicatorsHydraulicFluidRatio1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/hydraulics/indicators/hydraulic_fluid_ratio_1",
                    Units = "ratio",
                    Description = "Hydraulic fluid quantity, ratio of max, system 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2HydraulicsIndicatorsHydraulicFluidRatio2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/hydraulics/indicators/hydraulic_fluid_ratio_2",
                    Units = "ratio",
                    Description = "Hydraulic fluid quantity, ratio of max, system 2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceAllOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_all_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceInletHeatOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_inlet_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - inlet heat. This switch turns on de-icing heat in the engine air inlet keep ice from choking your engine. Engine 1 only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIcePropHeatOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_prop_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - prop heat. This switch turns on de-icing of the propeller(s) to keep ice from building up on your prop. Engine 1 only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceWindowHeatOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_window_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - windshield heat. This switch turns on windshield de-icing to keep ice from blocking your vision.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIcePitotHeatOnPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_pitot_heat_on_pilot",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - pitot tube heat. This switch turns on de-icing heat in the pitot tube. If it freezes up your airspeed indicator and altimeter stop working. Airspeed and altitude related autopilot functions are also affected.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIcePitotHeatOnCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_pitot_heat_on_copilot",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  Pitot tube heat, co-pilot. This switch turns on de-icing heat in the co-pilot side pitot tube. If it freezes up your airspeed indicator and altimeter stop working. Airspeed and altitude related autopilot functions are also affected.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceAOAHeatOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_AOA_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  AOA sensor heat. This switch turns on de-icing heat for the AOA sensor. If it freezes up your AOA indicator stops working. AOA sensor failure will also affect the aircraft's artificial stability system if it has one.  Pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceAOAHeatOnCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_AOA_heat_on_copilot",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  AOA sensor heat. This switch turns on de-icing heat for the AOA sensor. If it freezes up your AOA indicator stops working. AOA sensor failure will also affect the aircraft's artificial stability system if it has one.  Copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceSurfceHeatOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surfce_heat_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (All wings)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceSurfceHeatLeftOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surfce_heat_left_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (Left wing)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceSurfceHeatRightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surfce_heat_right_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - bleed air. This switch directs warm air from the engines into the wing leading edges to keep them free of ice. (Right wing)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceSurfaceBootOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_surface_boot_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - pneumatic. This switch inflates flexible bladders on the wing leading edges to pop off accumulated ice.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceAutoIgniteOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_auto_ignite_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  De-ice - auto-ignition. This switch turns on a continuous ignition source in the engine to automatically relight it if there is a flameout.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2IceIceDetectOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/ice/ice_detect_on",
                    Units = "boolean",
                    Description = "De-ice switch, 0 or 1.  Ice-detection: Turn this switch on to enable ice-detection... if the system detects ice, it will light up the ICE annunciator.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationActuatorsBleedAirMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/bleed_air_mode",
                    Units = "enum",
                    Description = "Bleed air mode, 0=of, 1=left,2=both,3=right,4=apu,5=auto",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationActuatorsDumpAllOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/dump_all_on",
                    Units = "boolean",
                    Description = "Dump all pressurization, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationActuatorsDumpToAltitudeOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/dump_to_altitude_on",
                    Units = "feet",
                    Description = "Dump pressurization to the current altitude, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationActuatorsCabinAltitudeFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/cabin_altitude_ft",
                    Units = "feet",
                    Description = "Cabin altitude commanded, feet.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationActuatorsCabinVviFpm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/cabin_vvi_fpm",
                    Units = "feet/minute",
                    Description = "Cabin VVI commanded, feet.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationActuatorsMaxAllowableAltitudeFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/actuators/max_allowable_altitude_ft",
                    Units = "feet",
                    Description = "Maximum allowable altitude for this airplane to maintain the requested cabin altitude.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationIndicatorsCabinAltitudeFt
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/indicators/cabin_altitude_ft",
                    Units = "feet",
                    Description = "Cabin altitude actually occurring, feet.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationIndicatorsCabinVviFpm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/indicators/cabin_vvi_fpm",
                    Units = "feet/minute",
                    Description = "Cabin VVI actually occurring, fpm.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2PressurizationIndicatorsPressureDiffentialPsi
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/pressurization/indicators/pressure_diffential_psi",
                    Units = "pounds/square_inch",
                    Description = "Cabin differential pressure, psi.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1Power
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_power",
                    Units = "boolean",
                    Description = "Nav radio 1 off or on, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2Power
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_power",
                    Units = "boolean",
                    Description = "Nav radio 2 off or on, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1Power
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_power",
                    Units = "boolean",
                    Description = "Com radio 1 off or on, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2Power
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_power",
                    Units = "boolean",
                    Description = "Com radio 2 off or on, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf1Power
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_power",
                    Units = "enum",
                    Description = "ADF radio 1 off or on, 0 = off, 1 = antenna, 2 = on, 3 = tone, 4 = test",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf2Power
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_power",
                    Units = "enum",
                    Description = "ADF radio 2 off or on, 0 = off, 1 = antenna, 2 = on, 3 = tone, 4 = test",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsGpsPower
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/gps_power",
                    Units = "boolean",
                    Description = "GPS 1 off or on, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsGps2Power
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/gps2_power",
                    Units = "boolean",
                    Description = "GPS 2 off or on, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsDmePower
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_power",
                    Units = "boolean",
                    Description = "DME radio 1 off or on, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1FrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio 1 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1FrequencyMhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Nav radio 1 frequency, Mhz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1FrequencyKhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_frequency_khz",
                    Units = "khz",
                    Description = "Nav radio 1 frequency, khz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2FrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio 2 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2FrequencyMhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Nav radio 2 frequency, Mhz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2FrequencyKhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_frequency_khz",
                    Units = "khz",
                    Description = "Nav radio 2 frequency, khz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1FrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_frequency_hz",
                    Units = "10hertz",
                    Description = "Com radio 1 frequency, 10 hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1FrequencyMhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Com radio 1 frequency, Mhz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1FrequencyKhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_frequency_khz",
                    Units = "khz",
                    Description = "Com radio 1 frequency, khz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1FrequencyHz833
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_frequency_hz_833",
                    Units = "hertz",
                    Description = "Com radio 1 frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2FrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_frequency_hz",
                    Units = "10hertz",
                    Description = "Com radio 2 frequency, 10 hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2FrequencyMhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Com radio 2 frequency, Mhz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2FrequencyKhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_frequency_khz",
                    Units = "khz",
                    Description = "Com radio 2 frequency, khz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2FrequencyHz833
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_frequency_hz_833",
                    Units = "hertz",
                    Description = "Com radio 2 frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf1FrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_frequency_hz",
                    Units = "10hertz",
                    Description = "ADF radio 1 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf2FrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_frequency_hz",
                    Units = "10hertz",
                    Description = "ADF radio 2 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsDmeFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_frequency_hz",
                    Units = "10hertz",
                    Description = "DME radio frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1StandbyFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio 1 standby frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1StandbyFrequencyMhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Nav radio 1 frequency, Mhz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1StandbyFrequencyKhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby Nav radio 1 frequency, khz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2StandbyFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Nav radio 2 standby frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2StandbyFrequencyMhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Nav radio 2 frequency, Mhz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2StandbyFrequencyKhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby Nav radio 2 frequency, khz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1StandbyFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Com radio 1 standby frequency, 10 hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1StandbyFrequencyMhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Com radio 1 frequency, Mhz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1StandbyFrequencyKhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby Com radio 1 frequency, khz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1StandbyFrequencyHz833
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_standby_frequency_hz_833",
                    Units = "hertz",
                    Description = "Com radio 1 standby frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2StandbyFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "Com radio 2 standby frequency, 10 hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2StandbyFrequencyMhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_standby_frequency_Mhz",
                    Units = "Mhz",
                    Description = "Standby Com radio 2 frequency, Mhz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2StandbyFrequencyKhz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_standby_frequency_khz",
                    Units = "khz",
                    Description = "Standby com radio 2 frequency, khz component only",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2StandbyFrequencyHz833
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_standby_frequency_hz_833",
                    Units = "hertz",
                    Description = "Com radio 2 standby frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf1StandbyFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "ADF radio 1 standby frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf2StandbyFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "ADF radio 2 standby frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsDmeStandbyFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_standby_frequency_hz",
                    Units = "10hertz",
                    Description = "DME radio standby frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1ObsDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_obs_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "OBS 1 (pilot side) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2ObsDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_obs_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "OBS 2 (pilot isde) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1ObsDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_obs_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "OBS 1 (copilot side) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2ObsDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_obs_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "OBS 2 (copilot isde) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf1CardHeadingDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_card_heading_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "CARD selection for ADF 1, pilot side, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf2CardHeadingDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_card_heading_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "CARD selection for ADF 2, pilot side, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf1CardHeadingDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_card_heading_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "CARD selection for ADF 1, copilot side, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf2CardHeadingDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_card_heading_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "CARD selection for ADF 2, copilot side, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1CourseDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_course_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on nav1, pilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2CourseDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_course_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on nav2, pilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1CourseDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_course_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on nav1, copilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2CourseDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_course_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Selected course based on nav2, copilot, degrees magnetic.  This is OBS for VORs, or localizer heading for ILS",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsHSISourceSelectPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/HSI_source_select_pilot",
                    Units = "enum",
                    Description = "HSI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsHSISourceSelectCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/HSI_source_select_copilot",
                    Units = "enum",
                    Description = "HSI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsRMISourceSelectPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_source_select_pilot",
                    Units = "enum",
                    Description = "RMI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsRMISourceSelectCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_source_select_copilot",
                    Units = "enum",
                    Description = "RMI source to display: 0 for Nav1, 1 for Nav2, 2 for GPS.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsRMILeftUseAdfPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_left_use_adf_pilot",
                    Units = "enum",
                    Description = "RMI is taking ADF (1) or VOR (0).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsRMILeftUseAdfCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_left_use_adf_copilot",
                    Units = "enum",
                    Description = "RMI is taking ADF (1) or VOR (0).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsRMIRightUseAdfPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_right_use_adf_pilot",
                    Units = "enum",
                    Description = "RMI is taking ADF (1) or VOR (0).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsRMIRightUseAdfCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/RMI_right_use_adf_copilot",
                    Units = "enum",
                    Description = "RMI is taking ADF (1) or VOR (0).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsDMEMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/DME_mode",
                    Units = "enum",
                    Description = "DME display mode, where 0 is remote, 1 is frequency, and 2 is groundspeed-time.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsDMESlaveSource
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/DME_slave_source",
                    Units = "enum",
                    Description = "DME display selection of what NAV radio to display. 0 for Nav1, 1for Nav2.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNavComAdfMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav_com_adf_mode",
                    Units = "enum",
                    Description = "Frequency-to-change selection for the all-in-one radio, 0->5 are Nav1, Nav2, Com1, Com2, ADF1, ADF2.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsTransponderCode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/transponder_code",
                    Units = "transponder_code",
                    Description = "Current Transponder code (0000-7777)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsTransponderMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/transponder_mode",
                    Units = "enum",
                    Description = "Transponder mode (off=0,stdby=1,on=2,test=3)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioComSelection
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_com_selection",
                    Units = "enum",
                    Description = "6=com1,7=com2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioNavSelection
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_nav_selection",
                    Units = "enum",
                    Description = "0=nav1,1=nav2,2=adf1,3=adf2,9=none",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioSelectionCom1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_com1",
                    Units = "boolean",
                    Description = "is com1 selected for listening",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioSelectionCom2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_com2",
                    Units = "boolean",
                    Description = "is com2 selected for listening",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioSelectionNav1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_nav1",
                    Units = "boolean",
                    Description = "is nav1 selected for listening",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioSelectionNav2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_nav2",
                    Units = "boolean",
                    Description = "is nav2 selected for listening",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioSelectionAdf1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_adf1",
                    Units = "boolean",
                    Description = "is adf1 selected for listening",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioSelectionAdf2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_selection_adf2",
                    Units = "boolean",
                    Description = "is adf2 selected for listening",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioDmeEnabled
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_dme_enabled",
                    Units = "boolean",
                    Description = "Is DME audio enabled?  This only matters if the current selection has DME",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioMarkerEnabled
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_marker_enabled",
                    Units = "boolean",
                    Description = "Is audio for the marker beacons enabled?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioVolumeCom1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_com1",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for com1 audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioVolumeCom2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_com2",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for com2 audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioVolumeNav1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_nav1",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for nav1 audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioVolumeNav2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_nav2",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for nav2 audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioVolumeAdf1
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_adf1",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for adf1 audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioVolumeAdf2
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_adf2",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for adf2 audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioVolumeDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_dme",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for dme audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAudioVolumeMark
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/audio_volume_mark",
                    Units = "[0..1]",
                    Description = "Audio level (0 is off, 1 is max) for marker beacon audio",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsHsiObsDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/hsi_obs_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "HSI OBS (pilot side) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsHsiObsDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/hsi_obs_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "HSI OBS (copilot side) selection, in degrees magnetic.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1LeftFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left Nav radio 1 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2LeftFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left Nav radio 2 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1LeftFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left Com radio 1 frequency, 10 hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1LeftFrequencyHz833
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_left_frequency_hz_833",
                    Units = "hertz",
                    Description = "Left Nav radio 1 frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2LeftFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left Com radio 2 frequency, 10 hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2LeftFrequencyHz833
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_left_frequency_hz_833",
                    Units = "hertz",
                    Description = "Left Nav radio 2 frequency, hz, supports 8.3 khz spacing",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf1LeftFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left ADF radio 1 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf2LeftFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left ADF radio 2 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsDmeLeftFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_left_frequency_hz",
                    Units = "10hertz",
                    Description = "Left DME radio frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1RightFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right Nav radio 1 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2RightFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right Nav radio 2 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1RightFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right Com radio 1 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2RightFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right Com radio 2 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf1RightFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right ADF radio 1 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf2RightFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right ADF radio 2 frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsDmeRightFrequencyHz
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_right_frequency_hz",
                    Units = "10hertz",
                    Description = "Right DME radio frequency, hz",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav1RightIsSelected
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav1_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right nav 1 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsNav2RightIsSelected
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/nav2_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right nav 2 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom1RightIsSelected
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com1_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right com 1 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsCom2RightIsSelected
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/com2_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right com 2 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf1RightIsSelected
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf1_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right adf 1 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsAdf2RightIsSelected
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/adf2_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right adf 2 radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosActuatorsDmeRightIsSelected
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/actuators/dme_right_is_selected",
                    Units = "boolean",
                    Description = "1 if right DME radio is selected, 0 if left is selected",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1BearingDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the nav1 navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2BearingDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the nav2 navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf1BearingDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the adf1 navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf2BearingDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the adf2 navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsBearingDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the selected GPS 1 destination",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2BearingDegMag
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_bearing_deg_mag",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the selected GPS 2 destination",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1RelativeBearingDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the nav1 navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2RelativeBearingDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the nav2 navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf1RelativeBearingDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the adf1 navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf2RelativeBearingDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the adf2 navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsRelativeBearingDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the selected GPS 1 destination",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2RelativeBearingDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_bearing_deg",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the selected GPS 2 destination",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1FlagFromToPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_flag_from_to_pilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav1, pilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2FlagFromToPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_flag_from_to_pilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav2, pilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1FlagFromToCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_flag_from_to_copilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav1, copilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2FlagFromToCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_flag_from_to_copilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav2, copilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1FlagGlideslope
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_flag_glideslope",
                    Units = "boolean",
                    Description = "Glide slope flag, nav1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2FlagGlideslope
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_flag_glideslope",
                    Units = "boolean",
                    Description = "Glide slope flag, nav2.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1DisplayHorizontal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_display_horizontal",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on nav1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2DisplayHorizontal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_display_horizontal",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on nav2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1DisplayVertical
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_display_vertical",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on nav1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2DisplayVertical
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_display_vertical",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on nav2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1HdefDotsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav1, pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2HdefDotsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav2, pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsHdefDotsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, gps 1, pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2HdefDotsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, gps 2, pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1HdefDotsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav1, copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2HdefDotsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav2, copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsHdefDotsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, gps, copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2HdefDotsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, gps 2, copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1VdefDotsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_vdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav1, pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2VdefDotsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_vdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav2, pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1VdefDotsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_vdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav1, copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2VdefDotsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_vdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav2, copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from nav1's DME?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from nav2's DME?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf1HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from ADF1's DME?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf2HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from ADF2's DME?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsHasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from GPS 1?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2HasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from GPS 2?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsDmeHasDme
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_has_dme",
                    Units = "boolean",
                    Description = "Is there a DME signal from standalone DME?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1DmeDistanceNm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "nav1 DME distance in nautical miles.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2DmeDistanceNm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "nav2 DME distance in nautical miles.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf1DmeDistanceNm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "adf1 DME distance in nautical miles.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf2DmeDistanceNm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "adf2 DME distance in nautical miles.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsDmeDistanceNm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "gps 1 DME distance in nautical miles.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2DmeDistanceNm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "gps 2 DME distance in nautical miles.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsDmeDmeDistanceNm
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_dme_distance_nm",
                    Units = "nautical_miles",
                    Description = "standalone dme DME distance in nautical miles.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_dme_speed_kts",
                    Units = "knots",
                    Description = "nav1 DME speed in knots.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_dme_speed_kts",
                    Units = "knots",
                    Description = "nav2 DME speed in knots.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf1DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_dme_speed_kts",
                    Units = "knots",
                    Description = "adf1 DME speed in knots.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf2DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_dme_speed_kts",
                    Units = "knots",
                    Description = "adf2 DME speed in knots.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsDmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_dme_speed_kts",
                    Units = "knots",
                    Description = "gps 1 DME speed in knots.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2DmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_dme_speed_kts",
                    Units = "knots",
                    Description = "gps 2 DME speed in knots.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsDmeDmeSpeedKts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_dme_speed_kts",
                    Units = "knots",
                    Description = "standalone dme DME speed in knots.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1DmeTimeMin
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_dme_time_min",
                    Units = "minutes",
                    Description = "nav1 DME time in minutes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2DmeTimeMin
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_dme_time_min",
                    Units = "minutes",
                    Description = "nav2 DME time in minutes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf1DmeTimeMin
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_dme_time_min",
                    Units = "minutes",
                    Description = "adf1 DME time in minutes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsAdf2DmeTimeMin
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_dme_time_min",
                    Units = "minutes",
                    Description = "adf2 DME time in minutes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsDmeTimeMin
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_dme_time_min",
                    Units = "minutes",
                    Description = "gps 1 DME time in minutes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2DmeTimeMin
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_dme_time_min",
                    Units = "minutes",
                    Description = "gps 2 DME time in minutes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsDmeDmeTimeMin
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_dme_time_min",
                    Units = "minutes",
                    Description = "standalone dme DME time in minutes.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav1NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav2NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsAdf1NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf1_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsAdf2NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/adf2_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsGpsNavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsGps2NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsDmeNavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/dme_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav3NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav3_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav4NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav4_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav5NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav5_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav6NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav6_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav7NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav7_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav8NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav8_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav9NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav9_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav10NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav10_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav11NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav11_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static StringDataRefElement Cockpit2RadiosIndicatorsNav12NavId
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav12_nav_id",
                    Frequency = DefaultFrequency,
                    StringLenght = 500
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1Type
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_type",
                    Units = "enum",
                    Description = "Type of navaid that's currently tuned in and being received - nav1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2Type
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_type",
                    Units = "enum",
                    Description = "Type of navaid that's currently tuned in and being received - nav2",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsOverOuterMarker
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/over_outer_marker",
                    Units = "boolean",
                    Description = "Over the marker, 0 or 1.  This stays on when over the marker",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsOverMiddleMarker
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/over_middle_marker",
                    Units = "boolean",
                    Description = "Over the marker, 0 or 1.  This stays on when over the marker",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsOverInnerMarker
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/over_inner_marker",
                    Units = "boolean",
                    Description = "Over the marker, 0 or 1.  This stays on when over the marker",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsOuterMarkerLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/outer_marker_lit",
                    Units = "boolean",
                    Description = "Marker light actually lit, 0 or 1.  This flashes as we go over.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsMiddleMarkerLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/middle_marker_lit",
                    Units = "boolean",
                    Description = "Marker light actually lit, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsInnerMarkerLit
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/inner_marker_lit",
                    Units = "boolean",
                    Description = "Marker light actually lit, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiBearingDegMagPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_bearing_deg_mag_pilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the pilot's HSI-selected navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiBearingDegMagCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_bearing_deg_mag_copilot",
                    Units = "degrees_magnetic",
                    Description = "Indicated bearing to the copilot's HSI-selected navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiRelativeBearingDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_bearing_deg_pilot",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the pilot's HSI-selected navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiRelativeBearingDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_bearing_deg_copilot",
                    Units = "degrees",
                    Description = "Indicated relative bearing to the copilot's HSI-selected navaid",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiFlagFromToPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_from_to_pilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav1, pilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiFlagFromToCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_from_to_copilot",
                    Units = "enum",
                    Description = "Nav-To-From indication, nav1, copilot, 0 is flag, 1 is to, 2 is from.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiHdefDotsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_hdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav1, pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiHdefDotsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_hdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI lateral deflection in dots, nav1, copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiVdefDotsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_vdef_dots_pilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav1, pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiVdefDotsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_vdef_dots_copilot",
                    Units = "dots",
                    Description = "CDI vertical deflection in dots, nav1, copilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiHasDmePilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_has_dme_pilot",
                    Units = "boolean",
                    Description = "Is there a DME signal from nav1's DME?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiHasDmeCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_has_dme_copilot",
                    Units = "boolean",
                    Description = "Is there a DME signal from nav1's DME?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDmeDistanceNmPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_distance_nm_pilot",
                    Units = "nautical_miles",
                    Description = "nav1 DME distance in nautical miles, pilot HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDmeDistanceNmCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_distance_nm_copilot",
                    Units = "nautical_miles",
                    Description = "nav1 DME distance in nautical miles. copilot HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDmeSpeedKtsPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_speed_kts_pilot",
                    Units = "knots",
                    Description = "nav1 DME speed in knots. pilot HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDmeSpeedKtsCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_speed_kts_copilot",
                    Units = "knots",
                    Description = "nav1 DME speed in knots. copilot HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDmeTimeMinPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_time_min_pilot",
                    Units = "minutes",
                    Description = "nav1 DME time in minutes. pilot HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDmeTimeMinCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_dme_time_min_copilot",
                    Units = "minutes",
                    Description = "nav1 DME time in minutes. copilot HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiFlagGlideslopePilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_glideslope_pilot",
                    Units = "boolean",
                    Description = "Glide slope flag, pilot side HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiFlagGlideslopeCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_flag_glideslope_copilot",
                    Units = "boolean",
                    Description = "Glide slope flag, copilot side HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDisplayHorizontalPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_display_horizontal_pilot",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on pilot side HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDisplayHorizontalCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_display_horizontal_copilot",
                    Units = "boolean",
                    Description = "Is there some kind of horizontal signal on copilot side HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDisplayVerticalPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_display_vertical_pilot",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on pilot side HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiDisplayVerticalCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_display_vertical_copilot",
                    Units = "boolean",
                    Description = "Is there some kind of vertical signal on copilot side HSI",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsTransponderId
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/transponder_id",
                    Units = "bool",
                    Description = "Whether we are squawking ident right now.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsTransponderBrightness
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/transponder_brightness",
                    Units = "ratio",
                    Description = "Transponder light brightness ratio from 0 to 1",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingElectricDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav1RelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav1_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to AHARS for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingElectricDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsNav2RelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/nav2_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav2 OBS to AHARS for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingElectricDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGpsRelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 1 course to AHARS for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingElectricDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsGps2RelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/gps2_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the GPS 2 course to AHARS for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_vacuum_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the vacuum driven gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingVacuumDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_vacuum_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the vacuum driven gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_electric_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the electric gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingElectricDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_electric_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to the electric gyro for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_AHARS_deg_pilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to AHARS gyro for the pilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsHsiRelativeHeadingAHARSDegCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/hsi_relative_heading_AHARS_deg_copilot",
                    Units = "degrees",
                    Description = "This is the relative heading of the nav1 OBS to AHARS for the copilot.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsFmsExecLightPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_exec_light_pilot",
                    Units = "Boolean",
                    Description = "Is the exec FMS light/warning lit for the pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsFmsExecLightCopilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_exec_light_copilot",
                    Units = "Boolean",
                    Description = "Is the exec FMS light/warning lit for the co-pilot",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsFmsFptaPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_fpta_pilot",
                    Units = "Feet",
                    Description = "FMS Flight Plan Target Altitude",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsFmsVpaPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_vpa_pilot",
                    Units = "Degrees",
                    Description = "FMS Vertical Path Angle",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsFmsVtkPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_vtk_pilot",
                    Units = "Degrees",
                    Description = "FMS Vertical Track Error",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsFmsDistanceToTodPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_distance_to_tod_pilot",
                    Units = "nm",
                    Description = "FMS Distance to Top of Descent",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsFmsTodBeforeIndexPilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_tod_before_index_pilot",
                    Units = "index",
                    Description = "Index of waypoint in flightplan before which top of descent is located",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2RadiosIndicatorsFmsTodBeforeDistancePilot
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/radios/indicators/fms_tod_before_distance_pilot",
                    Units = "nm",
                    Description = "Distance from top of descent to Nth waypoint (wayoint found via fms_tod_before_index_pilot)",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesAvionicsPowerOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/avionics_power_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesNavigationLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/navigation_lights_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesBeaconOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/beacon_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesStrobeLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/strobe_lights_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesLandingLightsOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/landing_lights_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.  This affects the first landing light.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesTaxiLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/taxi_light_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesSpotLightOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/spot_light_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesDumpFuel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/dump_fuel",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesPuffersOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/puffers_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesPropSyncOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/prop_sync_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesJetSyncMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/jet_sync_mode",
                    Units = "enum",
                    Description = "Switch, 0 or 1. fan=0, off=1, turbine=2#WHAT ARE THESE?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesElectricHydraulicPumpOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/electric_hydraulic_pump_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesRamAirTurbineOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/ram_air_turbine_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesYawDamperOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/yaw_damper_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesArtificialStabilityOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/artificial_stability_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesArtificialStabilityPitchOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/artificial_stability_pitch_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesArtificialStabilityRollOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/artificial_stability_roll_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesHUDOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/HUD_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesParachuteDeploy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/parachute_deploy",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesJatoOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/jato_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesTailhookDeploy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/tailhook_deploy",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesCanopyOpen
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/canopy_open",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesWaterScoopDeploy
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/water_scoop_deploy",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesDumpWater
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/dump_water",
                    Units = "boolean",
                    Description = "This will be set to true when water is in the process of dumping out of a water-bomber.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesNoSmoking
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/no_smoking",
                    Units = "boolean",
                    Description = "No Smoking",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesFastenSeatBelts
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/fasten_seat_belts",
                    Units = "boolean",
                    Description = "Fasten Seat Belts",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesTotalEnergyAudio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/total_energy_audio",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesHSIIsArc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/HSI_is_arc",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesAutoBrakeLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/auto_brake_level",
                    Units = "enum",
                    Description = "Switch, 0 is RTO (Rejected Take-Off), 1 is off, 2->5 are increasing auto-brake levels.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesAutoReverseOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/auto_reverse_on",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesPropFeatherMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/prop_feather_mode",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesPreRotateLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/pre_rotate_level",
                    Units = "boolean",
                    Description = "Switch, 0 or 1.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesClutchEngage
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/clutch_engage",
                    Units = "boolean",
                    Description = "Switch, 0 or 1 - engage/disengage rotor clutch",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesRotorBrake
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/rotor_brake",
                    Units = "boolean",
                    Description = "Switch, 0 or 1 - turns on the rotor brake.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesRotorBrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/rotor_brake_ratio",
                    Units = "ratio",
                    Description = "This is the relative strength of the rotor brake compared to X-Plane default.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesClutchRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/clutch_ratio",
                    Units = "ratio",
                    Description = "Current clutch ratio, 0.0 is off, 1.0 is on - follows clutch engage with some lag.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesRocketMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/rocket_mode",
                    Units = "enum",
                    Description = "This will have an enumeration based on the direction of fire of any maneuvering rockets.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesBurnerLevel
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/burner_level",
                    Units = "enum",
                    Description = "This can be 0 (half-power afterburners) or 1 (full-power burner).",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesAlternateStaticAirRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/alternate_static_air_ratio",
                    Units = "ratio",
                    Description = "Alternate static air ratio, 0.0 is off, 1,.0 is on.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesWiperSpeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/wiper_speed",
                    Units = "enum",
                    Description = "0=off,1=25%speed,2=50%speed,3=100%speed.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesHUDBrightnessRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/HUD_brightness_ratio",
                    Units = "ratio",
                    Description = "Rheostat controlling HUD brightness.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesCameraPowerOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/camera_power_on",
                    Units = "boolean",
                    Description = "Camera power on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2SwitchesTotalEnergyAudioOn
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/switches/total_energy_audio_on",
                    Units = "boolean",
                    Description = "Variometer audio on",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TemperatureOutsideAirTempDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_temp_deg",
                    Units = "degrees",
                    Description = "outside air temperature, pilot selects units",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TemperatureOutsideAirTempDegc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_temp_degc",
                    Units = "degreesC",
                    Description = "outside air temperature, celsius",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TemperatureOutsideAirTempDegf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_temp_degf",
                    Units = "degreesF",
                    Description = "outside air temperature, fahrenheit",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TemperatureOutsideAirLETempDeg
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_LE_temp_deg",
                    Units = "degrees",
                    Description = "outside air temperature with leading edge, pilot selects units",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TemperatureOutsideAirLETempDegc
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_LE_temp_degc",
                    Units = "degreesC",
                    Description = "outside air temperature with leading edge, celsius",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TemperatureOutsideAirLETempDegf
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_LE_temp_degf",
                    Units = "degreesF",
                    Description = "outside air temperature with leading edge, fahrenheit",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TemperatureOutsideAirTempIsMetric
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/temperature/outside_air_temp_is_metric",
                    Units = "boolean",
                    Description = "1 if thermo is metric, 0 if fahrenheit.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TransmissionsIndicatorsOilTemperature
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/transmissions/indicators/oil_temperature",
                    Units = "any",
                    Description = "Transmission oil temperature.  Units are the same as the max oil temperature in ACF file.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2TransmissionsIndicatorsOilPressure
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/transmissions/indicators/oil_pressure",
                    Units = "any",
                    Description = "Transmission oil pressure.  Units are the same as the max oil pressure in ACF file.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2WeaponsWeaponSelectConsoleIndex
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/weapon_select_console_index",
                    Units = "index",
                    Description = "(V10 style!) Weapon index selected on the weapon console.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2WeaponsFireMode
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/fire_mode",
                    Units = "enum",
                    Description = "Weapon fire-mode, 0=single, 1=pair, 2=ripple, 3=salvo.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2WeaponsFireRate
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/fire_rate",
                    Units = "enum",
                    Description = "Weapon fire-rate, 0, 1, 2, 3 depending on fire rate.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2WeaponsWeaponSelected
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/weapon_selected",
                    Units = "enum",
                    Description = "Switch position for each weapon-arming switch (there can be several). These are the rotaries that can be dialed up or down to select various systems.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2WeaponsGunOffsetHeadingRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/gun_offset_heading_ratio",
                    Units = "ratio",
                    Description = "Heading offset of the gun from within its maximum heading range",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Cockpit2WeaponsGunOffsetPitchRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/cockpit2/weapons/gun_offset_pitch_ratio",
                    Units = "ratio",
                    Description = "Pitch offset of the gun from within its maximum pitch range",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsPitchRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/pitch_ratio",
                    Units = "ratio",
                    Description = "This is how much the flight controls are deflected in pitch after any stability augmentation, in ratio, where -1.0 is full down, and 1.0 is full up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsRollRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/roll_ratio",
                    Units = "ratio",
                    Description = "This is how much the flight controls are deflected in roll after any stability augmentation, in ratio, where -1.0 is full left, and 1.0 is full right.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsHeadingRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/heading_ratio",
                    Units = "ratio",
                    Description = "This is how much the flight controls are deflected in heading after any stability augmentation, where -1.0 is full left, and 1.0 is full right.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsSpeedbrakeRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/speedbrake_ratio",
                    Units = "ratio",
                    Description = "This is how much the speedbrakes surfaces are extended, in ratio, where 0.0 is fully retracted, and 1.0 is fully extended.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsWingsweepRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/wingsweep_ratio",
                    Units = "ratio",
                    Description = "Actual sweep, in ratio. 0.0 is no sweep deployment, 1 is max sweep deployment.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsThrustVectorRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/thrust_vector_ratio",
                    Units = "ratio",
                    Description = "Actual thrust vector, in ratio. 0.0 is no thrust vector deployment, 1 is max thrust vector deployment.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsDihedralRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/dihedral_ratio",
                    Units = "ratio",
                    Description = "Actual dihedral, in ratio. 0.0 is no dihedral deployment, 1 is max dihedral deployment.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsIncidenceRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/incidence_ratio",
                    Units = "ratio",
                    Description = "Actual incidence, in ratio. 0.0 is no incidence deployment, 1 is max incidence deployment.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsWingRetractionRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/wing_retraction_ratio",
                    Units = "ratio",
                    Description = "Actual wing-retraction, in ratio. 0.0 is no wing-retraction deployment, 1 is max wing-retraction deployment.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsFlapHandleDeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/flap_handle_deploy_ratio",
                    Units = "ratio",
                    Description = "This is the ACTUAL FLAP deployment for overall flap system, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended. You should probably use the deployment for flap set 1 or flap set 2 to deflect the surfaces though.  This takes into account that flaps deploy slowly, not instantaneously as the handle is dragged.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsSlat1DeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/slat1_deploy_ratio",
                    Units = "ratio",
                    Description = "Slat deployment, where 0.0 is slats fully retracted, 1.0 is slats fully extended. This variable applies to lading-edge flaps as well.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsSlat2DeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/slat2_deploy_ratio",
                    Units = "ratio",
                    Description = "Slat deployment, where 0.0 is slats fully retracted, 1.0 is slats fully extended. This variable applies to lading-edge flaps as well.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsFlap1DeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/flap1_deploy_ratio",
                    Units = "ratio",
                    Description = "This is the ACTUAL FLAP deployment for flap-set #1, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsFlap2DeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/flap2_deploy_ratio",
                    Units = "ratio",
                    Description = "This is the ACTUAL FLAP deployment for flap-set #2, in ratio, where 0.0 is flaps fully retracted, and 1.0 is flaps fully extended.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsStabilizerDeflectionDegrees
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/stabilizer_deflection_degrees",
                    Units = "degrees",
                    Description = "This is the actual stabilizer deflection with trim for all-moving horizontal stabilizers. This is the deflection you can see visually on airliners. This is in degrees, positive for leading-edge nose up.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsAileronTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/aileron_trim",
                    Units = "ratio",
                    Description = "Aileron trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the aileron trim is deflected enough to move the ailerons through 30% of their travel, then that is an aileron trim of 0.3.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsElevatorTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/elevator_trim",
                    Units = "ratio",
                    Description = "Elevator trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the elevator trim is deflected enough to move the elevators through 30% of their travel, then that is an elevator trim of 0.3.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsRudderTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/rudder_trim",
                    Units = "ratio",
                    Description = "Rudder trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rudder trim is deflected enough to move the rudders through 30% of their travel, then that is an rudder trim of 0.3.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsRotorTrim
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/rotor_trim",
                    Units = "ratio",
                    Description = "Rotor trim, in part of MAX FLIGHT CONTROL DEFLECTION. So, if the rotor trim is deflected enough to move the rotor through 30% of its travel, then that is a rotor trim of 0.3.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2ControlsWaterRudderDeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/controls/water_rudder_deploy_ratio",
                    Units = "ratio",
                    Description = "Deployment of the water rudder, 0 is none, 1 is max",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2LightsStrobeFlashNow
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/strobe_flash_now",
                    Units = "boolean",
                    Description = "Is any strobe flashing right now?",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2LightsOverrideBeaconsAndStrobes
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/lights/override_beacons_and_strobes",
                    Units = "boolean",
                    Description = "override beacon and strobe control",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscCanopyOpenRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/canopy_open_ratio",
                    Units = "ratio",
                    Description = "Canopy position: 0 = closed, 1 = open",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscTailhookDeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/tailhook_deploy_ratio",
                    Units = "ratio",
                    Description = "Tailhook position: 0 = up, 1 = down",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscWaterScoopDeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/water_scoop_deploy_ratio",
                    Units = "ratio",
                    Description = "Water scoop position: 0 = up, 1 = down",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscWaterDropDeployRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/water_drop_deploy_ratio",
                    Units = "ratio",
                    Description = "Water drop door position: 0 = up, 1=  down",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscPressureOutflowRatio
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/pressure_outflow_ratio",
                    Units = "ratio",
                    Description = "How far is the pressure-outflow valve open?  0=closed, 1=open",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscAoAAngleDegrees
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/AoA_angle_degrees",
                    Units = "degrees",
                    Description = "Angle of attack probe.  Positive means aircracft nose is above the flight path in aircraft coordinates.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscYawStringAngle
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/yaw_string_angle",
                    Units = "degrees",
                    Description = "desc",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscYawStringAirspeed
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/yaw_string_airspeed",
                    Units = "kias",
                    Description = "desc",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscGforceNormal
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/gforce_normal",
                    Units = "todo",
                    Description = "desc",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscGforceAxil
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/gforce_axil",
                    Units = "todo",
                    Description = "desc",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscGforceSide
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/gforce_side",
                    Units = "todo",
                    Description = "desc",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscAutoStartInProgress
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/auto_start_in_progress",
                    Units = "boolean",
                    Description = "True while the auto-start sequence is happening.  Plugins that override the auto-start sequence should set this to 1 during the sequence and clear it when done.",
                    Frequency = DefaultFrequency
                };
            }
        }
        public static FloatDataRefElement Flightmodel2MiscAutoBoardInProgress
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "sim/flightmodel2/misc/auto_board_in_progress",
                    Units = "boolean",
                    Description = "True while the auto-board sequence is happening.  Plugins that override the auto-board sequence should set this to 1 during the sequence and clear it when done.",
                    Frequency = DefaultFrequency
                };
            }
        }

        public static StringDataRefElement WT3AircraftIdentifier
        {
            get
            {
                return new StringDataRefElement
                {
                    DataRef = "cjs/world_traffic/id",
                    Frequency = DefaultFrequency,
                    StringLenght = 40
                };
            }
        }
#endregion
        #region World Traffic 3
        // DataRef Reference: http://www.classicjetsims.com/downloads/WorldTraffic.pdf

        public static FloatDataRefElement WT3NumberOfAircraftRendered
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "cjs/world_traffic/num_aircraft",
                    Units = "Count",
                    Description = "Number of aircraft currently being rendered",
                    Frequency = DefaultFrequency
                };
            }
        }

        public static FloatDataRefElement WT3AircraftTrackID
        {
            get
            {
                return new FloatDataRefElement
                {
                    DataRef = "cjs/world_traffic/aircraft_trackcam_id",
                    Units = "ID",
                    Description = "Aircraft id currently being viewed by track camera",
                    Frequency = DefaultFrequency,
                };
            }
        }

        public static IntegerArrayDataRefElement WT3TypesOfAllAircraft
        {
            get
            {
                return new IntegerArrayDataRefElement
                {
                    DataRef = "cjs/world_traffic/aircraft_type",
                    Units = "Type", // see Apendix A3
                    Description = "Aircraft Type",
                    Frequency = DefaultFrequency,
                };
            }
        }

        public static IntegerArrayDataRefElement WT3IDsOfAllAircraft
        {
            get
            {
                return new IntegerArrayDataRefElement
                {
                    DataRef = "cjs/world_traffic/id",
                    Units = "ID",
                    Description = "IDs of all aircraft",
                    Frequency = DefaultFrequency,
                };
            }
        }

        public static FloatArrayDataRefElement WT3AltitudesOfAllAircraft
        {
            get
            {
                return new FloatArrayDataRefElement
                {
                    DataRef = "cjs/world_traffic/alt_asl",
                    Units = "feet",
                    Description = "Altitudes of all aircraft (ASL)",
                    Frequency = DefaultFrequency,
                };
            }
        }

        public static FloatArrayDataRefElement WT3SpeedsOfAllAircraft
        {
            get
            {
                return new FloatArrayDataRefElement
                {
                    DataRef = "cjs/world_traffic/speed_kias",
                    Units = "Knots",
                    Description = "Speeds of all aircraft (kias)",
                    Frequency = DefaultFrequency,
                };
            }
        }

        public static FloatArrayDataRefElement WT3HeadingOfAllAircraft
        {
            get
            {
                return new FloatArrayDataRefElement
                {
                    DataRef = "cjs/world_traffic/heading_degT",
                    Units = "Degree",
                    Description = "Heading of all aircraft (true)",
                    Frequency = DefaultFrequency,
                };
            }
        }

        public static FloatArrayDataRefElement WT3LatitudesOfAllAircraft
        {
            get
            {
                return new FloatArrayDataRefElement
                {
                    DataRef = "cjs/world_traffic/aircraft_lat",
                    Units = "Todo",
                    Description = "Latitude position of all aircraft",
                    Frequency = DefaultFrequency,
                };
            }
        }

        public static FloatArrayDataRefElement WT3LongitudesOfAllAircraft
        {
            get
            {
                return new FloatArrayDataRefElement
                {
                    DataRef = "cjs/world_traffic/aircraft_lon",
                    Units = "Todo",
                    Description = "Longitude position of all aircraft",
                    Frequency = DefaultFrequency,
                };
            }
        }

        #endregion
    }
}
